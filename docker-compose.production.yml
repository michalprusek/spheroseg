version: '3.8'

# Production override file with security enhancements
# Usage: docker-compose -f docker-compose.yml -f docker-compose.production.yml --profile prod up -d

secrets:
  db_password:
    external: true
  db_root_password:
    external: true
  jwt_secret:
    external: true
  session_secret:
    external: true
  rabbitmq_password:
    external: true
  redis_password:
    external: true
  email_password:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true

services:
  # Enhanced database with secrets
  db:
    secrets:
      - db_password
      - db_root_password
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      # Remove plain text password
      POSTGRES_PASSWORD: ""
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '2.0'
        reservations:
          memory: 768M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./packages/backend/src/db:/docker-entrypoint-initdb.d

  # Automated backup service
  db-backup:
    profiles: ["prod"]
    image: postgres:14-alpine
    container_name: spheroseg-db-backup
    secrets:
      - db_password
    environment:
      PGPASSWORD_FILE: /run/secrets/db_password
    volumes:
      - ./backups:/backups
    depends_on:
      - db
    command: |
      sh -c 'while true; do
        echo "Running backup at $$(date)"
        PGPASSWORD=$$(cat /run/secrets/db_password) pg_dump -h db -U postgres spheroseg | gzip > /backups/spheroseg_$$(date +%Y%m%d_%H%M%S).sql.gz
        # Keep only last 7 days of backups
        find /backups -type f -name "spheroseg_*.sql.gz" -mtime +7 -delete
        # Sleep for 6 hours
        sleep 21600
      done'
    networks:
      - spheroseg-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Enhanced Redis with password
  redis:
    secrets:
      - redis_password
    command: >
      sh -c '
        redis-server
        --requirepass "$$(cat /run/secrets/redis_password)"
        --maxmemory 400mb
        --maxmemory-policy allkeys-lru
        --save 60 1
        --save 300 10
        --save 900 100
        --appendonly yes
        --appendfilename "redis-aof.aof"
      '
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Enhanced RabbitMQ with secrets
  rabbitmq:
    secrets:
      - rabbitmq_password
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      # Remove plain text password
      RABBITMQ_DEFAULT_PASS: ""
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Enhanced backend with secrets and proper limits
  backend:
    secrets:
      - db_password
      - jwt_secret
      - session_secret
      - redis_password
      - rabbitmq_password
      - email_password
    environment:
      # Security secrets from files
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      SESSION_SECRET_FILE: /run/secrets/session_secret
      DB_PASSWORD_FILE: /run/secrets/db_password
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      RABBITMQ_PASSWORD_FILE: /run/secrets/rabbitmq_password
      EMAIL_PASSWORD_FILE: /run/secrets/email_password
      
      # Remove plain text secrets
      JWT_SECRET: ""
      DB_PASSWORD: ""
      
      # Updated connection strings to use secrets
      DATABASE_URL: ""  # Will be constructed in startup script
      REDIS_URL: ""     # Will be constructed in startup script
      RABBITMQ_URL: ""  # Will be constructed in startup script
      
      # Production settings
      NODE_ENV: production
      LOG_LEVEL: warn
      ENABLE_SOURCE_MAPS: false
      
      # Performance settings for production
      CONTAINER_MEMORY_LIMIT_MB: 2048
      NODE_OPTIONS: --max-old-space-size=1536
      DB_POOL_MAX: 20
      DB_POOL_MIN: 5
      
      # Security settings
      ALLOWED_ORIGINS: https://spherosegapp.utia.cas.cz,https://www.spherosegapp.utia.cas.cz
      SECURE_COOKIES: true
      TRUST_PROXY: true
      
      # Rate limiting for production
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
      ENABLE_RATE_LIMIT: true
    
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2048M
          cpus: '2.0'
        reservations:
          memory: 1536M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    command: >
      sh -c '
        # Read secrets
        export JWT_SECRET=$$(cat /run/secrets/jwt_secret)
        export SESSION_SECRET=$$(cat /run/secrets/session_secret)
        export DB_PASSWORD=$$(cat /run/secrets/db_password)
        export REDIS_PASSWORD=$$(cat /run/secrets/redis_password)
        export RABBITMQ_PASSWORD=$$(cat /run/secrets/rabbitmq_password)
        export EMAIL_PASS=$$(cat /run/secrets/email_password)
        
        # Construct connection URLs
        export DATABASE_URL="postgresql://postgres:$$DB_PASSWORD@db:5432/spheroseg?ssl=prefer"
        export REDIS_URL="redis://:$$REDIS_PASSWORD@redis:6379"
        export RABBITMQ_URL="amqp://admin:$$RABBITMQ_PASSWORD@rabbitmq:5672"
        
        # Start the application
        npm run start:prod
      '

  # Enhanced ML service with proper limits
  ml:
    deploy:
      resources:
        limits:
          memory: 8192M
          cpus: '4.0'
        reservations:
          memory: 6144M
          cpus: '2.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    
    secrets:
      - rabbitmq_password
    
    environment:
      PYTHONUNBUFFERED: 1
      MODEL_PATH: /ML/checkpoint_epoch_9.pth.tar
      DEBUG: false
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_QUEUE: segmentation_tasks
      RABBITMQ_PREFETCH_COUNT: 2
      # Production optimizations
      OMP_NUM_THREADS: 4
      MKL_NUM_THREADS: 4

  # Enhanced nginx with SSL secrets
  nginx-prod:
    secrets:
      - ssl_cert
      - ssl_key
    volumes:
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./letsencrypt/etc/letsencrypt:/etc/letsencrypt:ro
      - ./letsencrypt/var/lib/letsencrypt:/var/lib/letsencrypt:ro
      - ./letsencrypt/webroot:/var/www/letsencrypt:ro
      # Remove hardcoded SSL files
    command: >
      sh -c "
        mkdir -p /etc/nginx/ssl &&
        cp /run/secrets/ssl_cert /etc/nginx/ssl/server.crt &&
        cp /run/secrets/ssl_key /etc/nginx/ssl/server.key &&
        chmod 600 /etc/nginx/ssl/server.key &&
        nginx -g 'daemon off;'
      "
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production frontend with optimizations
  frontend-prod:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    environment:
      # Remove development variables
      NODE_ENV: production
      # Nginx gzip and cache settings are in nginx config

  # Prometheus for monitoring
  prometheus:
    profiles: ["prod"]
    image: prom/prometheus:latest
    container_name: spheroseg-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - spheroseg-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Grafana for visualization
  grafana:
    profiles: ["prod"]
    image: grafana/grafana:latest
    container_name: spheroseg-grafana
    restart: always
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    networks:
      - spheroseg-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# Additional production volumes
volumes:
  prometheus_data:
  grafana_data:

# Additional secrets for monitoring
secrets:
  grafana_password:
    external: true