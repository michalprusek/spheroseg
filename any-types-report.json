{
  "summary": {
    "total": 984,
    "byRisk": {
      "high": 528,
      "medium": 432,
      "low": 24
    },
    "priorityFiles": 276
  },
  "findings": [
    {
      "file": "packages/backend/src/__tests__/types/mocks.ts",
      "line": 26,
      "category": "function-param",
      "risk": "HIGH",
      "code": "(text: string, values?: any[]) => Promise<QueryResult<any>>",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/__tests__/types/mocks.ts",
      "line": 26,
      "category": "array-any",
      "risk": "HIGH",
      "code": "(text: string, values?: any[]) => Promise<QueryResult<any>>",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/auth/jwtKeyRotation.ts",
      "line": 333,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).user = payload;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 258,
      "category": "api-response",
      "risk": "HIGH",
      "code": "async cacheSegmentationResult(imageId: string, result: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 218,
      "category": "array-any",
      "risk": "HIGH",
      "code": "images: any[]",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/imageProcessingService.ts",
      "line": 199,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "fit: opts.fit as any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/projectShareService.ts",
      "line": 61,
      "category": "array-any",
      "risk": "HIGH",
      "code": "private async query<T = any>(text: string, params?: any[]): Promise<import('pg').QueryResult<T>> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/securityService.ts",
      "line": 96,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export async function updateSecurityIssue(id: string, updateData: any, _userId: string) {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 195,
      "category": "function-param",
      "risk": "HIGH",
      "code": "this.connection.on('error', (err: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 852,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const queueSegmentationJob = async (imageId: string, options: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationService.ts",
      "line": 72,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const saveSegmentation = async (imageId: string, userId: string, segmentationData: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/socketServiceEnhanced.ts",
      "line": 357,
      "category": "api-response",
      "risk": "HIGH",
      "code": "data: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 61,
      "category": "api-response",
      "risk": "HIGH",
      "code": "onComplete?: (result: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 443,
      "category": "api-response",
      "risk": "HIGH",
      "code": "function handleTaskCompleted(task: Task<T>, result: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 61,
      "category": "function-param",
      "risk": "HIGH",
      "code": "onComplete?: (result: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/tokenService.ts",
      "line": 562,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const params: any[] = [userId];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/tokenService.ts",
      "line": 616,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const params: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userProfileService.ts",
      "line": 213,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const updateValues: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 24,
      "category": "array-any",
      "risk": "HIGH",
      "code": "recentActivity: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 25,
      "category": "array-any",
      "risk": "HIGH",
      "code": "recentProjects: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 26,
      "category": "array-any",
      "risk": "HIGH",
      "code": "recentImages: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsServiceOptimized.ts",
      "line": 8,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query(text: string, params?: any[]): Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 6,
      "category": "api-response",
      "risk": "HIGH",
      "code": "data: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 97,
      "category": "api-response",
      "risk": "HIGH",
      "code": "private addToBatch(key: string, event: string, data: any, room?: string, userId?: string): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 196,
      "category": "api-response",
      "risk": "HIGH",
      "code": "private compressPayload(data: any): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 238,
      "category": "api-response",
      "risk": "HIGH",
      "code": "public sendImmediate(event: string, data: any, target?: string | string[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 306,
      "category": "api-response",
      "risk": "HIGH",
      "code": "private handlers: Map<string, ((data: any) => void)[]> = new Map();",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 309,
      "category": "api-response",
      "risk": "HIGH",
      "code": "public on(event: string, handler: (data: any) => void): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 331,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "for (const message of messages as any[]) {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 306,
      "category": "function-param",
      "risk": "HIGH",
      "code": "private handlers: Map<string, ((data: any) => void)[]> = new Map();",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 309,
      "category": "function-param",
      "risk": "HIGH",
      "code": "public on(event: string, handler: (data: any) => void): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 53,
      "category": "array-any",
      "risk": "HIGH",
      "code": "this.io.emit = (event: string, ...args: any[]): boolean => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 66,
      "category": "array-any",
      "risk": "HIGH",
      "code": "chainableObj.emit = (event: string, ...args: any[]): boolean => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/api/projectImages.ts",
      "line": 159,
      "category": "function-param",
      "risk": "HIGH",
      "code": ".map((img: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useDuplicationProgress.ts",
      "line": 358,
      "category": "api-response",
      "risk": "HIGH",
      "code": "function normalizeTaskData(data: any): DuplicationTask {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 13,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const useDebounce = <T extends (...args: any[]) => any>(callback: T, delay: number): T => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 105,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 13,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const useDebounce = <T extends (...args: any[]) => any>(callback: T, delay: number): T => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useProjectDelete.ts",
      "line": 27,
      "category": "function-param",
      "risk": "HIGH",
      "code": "onError: (error: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useSegmentationUpdates.ts",
      "line": 120,
      "category": "function-param",
      "risk": "HIGH",
      "code": "queueData.processingImages?.some((img: any) => img.id === imageId)) // Added any for processingImages",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useToast.ts",
      "line": 112,
      "category": "function-param",
      "risk": "HIGH",
      "code": "error: string | ((error: any) => string);",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 23,
      "category": "function-param",
      "risk": "HIGH",
      "code": "events?: Record<string, (...args: any[]) => void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 39,
      "category": "function-param",
      "risk": "HIGH",
      "code": "emit: (event: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 40,
      "category": "function-param",
      "risk": "HIGH",
      "code": "emitWithAck: (event: string, ...args: any[]) => Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 47,
      "category": "function-param",
      "risk": "HIGH",
      "code": "on: (event: string, handler: (...args: any[]) => void) => () => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 48,
      "category": "function-param",
      "risk": "HIGH",
      "code": "off: (event: string, handler?: (...args: any[]) => void) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 100,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const emit = useCallback((event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 105,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const emitWithAck = useCallback(async (event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 131,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const on = useCallback((event: string, handler: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 141,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const off = useCallback((event: string, handler?: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 258,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleUpdate = useCallback((update: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 333,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleNotification = useCallback((notification: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 23,
      "category": "array-any",
      "risk": "HIGH",
      "code": "events?: Record<string, (...args: any[]) => void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 39,
      "category": "array-any",
      "risk": "HIGH",
      "code": "emit: (event: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 40,
      "category": "array-any",
      "risk": "HIGH",
      "code": "emitWithAck: (event: string, ...args: any[]) => Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 47,
      "category": "array-any",
      "risk": "HIGH",
      "code": "on: (event: string, handler: (...args: any[]) => void) => () => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 48,
      "category": "array-any",
      "risk": "HIGH",
      "code": "off: (event: string, handler?: (...args: any[]) => void) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 100,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const emit = useCallback((event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 105,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const emitWithAck = useCallback(async (event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 131,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const on = useCallback((event: string, handler: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 141,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const off = useCallback((event: string, handler?: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 51,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).XLSX = {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 52,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "...(window as any).XLSX,",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 60,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).XLSX = {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 61,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "...(window as any).XLSX,",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 1247,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "annotations: [] as any[],",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 215,
      "category": "function-param",
      "risk": "HIGH",
      "code": "normalizedPolygon.points = polygon.points.map((point: any, pointIndex: number) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 246,
      "category": "function-param",
      "risk": "HIGH",
      "code": "normalizedPolygon.points = polygon.vertices.map((vertex: any, pointIndex: number) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const tempWriteFile = function (wb: any, filename: string, opts: any) {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 204,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const normalizePolygons = (inputPolygons: any[]): Polygon[] => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 680,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const annotations: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 681,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const cocoImages: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 1242,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const items: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 110,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const sendRequest = useCallback(<T>(operation: WorkerOperation, data: any): Promise<T> => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 29,
      "category": "function-param",
      "risk": "HIGH",
      "code": "resolve: (value: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 30,
      "category": "function-param",
      "risk": "HIGH",
      "code": "reject: (reason?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/useSlicing.ts",
      "line": 15,
      "category": "function-param",
      "risk": "HIGH",
      "code": "setInteractionState: (state: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 34,
      "category": "function-param",
      "risk": "HIGH",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 35,
      "category": "function-param",
      "risk": "HIGH",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 36,
      "category": "function-param",
      "risk": "HIGH",
      "code": "error: (message: string, error?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 33,
      "category": "array-any",
      "risk": "HIGH",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 34,
      "category": "array-any",
      "risk": "HIGH",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 35,
      "category": "array-any",
      "risk": "HIGH",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 43,
      "category": "array-any",
      "risk": "HIGH",
      "code": "debug(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 49,
      "category": "array-any",
      "risk": "HIGH",
      "code": "info(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 55,
      "category": "array-any",
      "risk": "HIGH",
      "code": "warn(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 81,
      "category": "array-any",
      "risk": "HIGH",
      "code": "private metricsBuffer: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 136,
      "category": "array-any",
      "risk": "HIGH",
      "code": "private metricsBuffer: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 7,
      "category": "function-param",
      "risk": "HIGH",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 8,
      "category": "function-param",
      "risk": "HIGH",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 10,
      "category": "function-param",
      "risk": "HIGH",
      "code": "error: (message: string, error?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 7,
      "category": "array-any",
      "risk": "HIGH",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 8,
      "category": "array-any",
      "risk": "HIGH",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 9,
      "category": "array-any",
      "risk": "HIGH",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 17,
      "category": "array-any",
      "risk": "HIGH",
      "code": "debug(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 23,
      "category": "array-any",
      "risk": "HIGH",
      "code": "info(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 29,
      "category": "array-any",
      "risk": "HIGH",
      "code": "warn(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 345,
      "category": "api-response",
      "risk": "HIGH",
      "code": "private logSlowOperation(type: string, data: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 162,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const clsEntries = performance.getEntriesByType('layout-shift') as any[];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 172,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const fidEntries = performance.getEntriesByType('first-input') as any[];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 178,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const lcpEntries = performance.getEntriesByType('largest-contentful-paint') as any[];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 215,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "} as any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 220,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "usedJSHeapSize: (performance as any).memory.usedJSHeapSize,",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 221,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "totalJSHeapSize: (performance as any).memory.totalJSHeapSize,",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 222,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit,",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 319,
      "category": "function-param",
      "risk": "HIGH",
      "code": "set: async (key: string, value: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 28,
      "category": "function-param",
      "risk": "HIGH",
      "code": "onConfirm?: (data?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 82,
      "category": "function-param",
      "risk": "HIGH",
      "code": "onSubmit: (values: any) => void | Promise<void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 111,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const sendBatchedMessage = async (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 119,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const sendImmediateMessage = (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 111,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const sendBatchedMessage = async (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 119,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const sendImmediateMessage = (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/types/websocket.ts",
      "line": 8,
      "category": "api-response",
      "risk": "HIGH",
      "code": "data: any;",
      "isPriority": true
    },
    {
      "file": "packages/shared/src/api/responseHandler.ts",
      "line": 175,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "typeof (error as any).status === 'number'",
      "isPriority": true
    },
    {
      "file": "packages/shared/src/api/responseHandler.ts",
      "line": 241,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const responseData = error.response.data as any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/__tests__/types/mocks.ts",
      "line": 26,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "(text: string, values?: any[]) => Promise<QueryResult<any>>",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/__tests__/types/mocks.ts",
      "line": 26,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "(text: string, values?: any[]) => Promise<QueryResult<any>>",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/auth/jwtKeyRotation.ts",
      "line": 251,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public getJWKS(): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/auth/jwtKeyRotation.ts",
      "line": 343,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function signJWTWithRotation(payload: any, options?: jwt.SignOptions): string | null {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 313,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "async getStats(): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 108,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async set(key: string, value: any, ttl?: number): Promise<boolean> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 185,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async cacheProject(projectId: string, projectData: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 218,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "images: any[]",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 242,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async cacheUser(userId: string, userData: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 258,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async cacheSegmentationResult(imageId: string, result: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 274,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async cacheQueueStatus(projectId: string, status: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cacheService.ts",
      "line": 290,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async cacheProjectStats(projectId: string, stats: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cdnService.ts",
      "line": 8,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "let AWS: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cdnService.ts",
      "line": 63,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private cloudfront: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cdnService.ts",
      "line": 64,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private s3: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cdnService.ts",
      "line": 135,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any = {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/cdnService.ts",
      "line": 169,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any = {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/databaseOptimizationService.ts",
      "line": 83,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "async getUserStatsOptimized(userId: string): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/databaseOptimizationService.ts",
      "line": 221,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/databaseOptimizationService.ts",
      "line": 316,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/databaseOptimizationService.ts",
      "line": 220,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "filters: any = {}",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/databaseOptimizationService.ts",
      "line": 544,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "getMetrics(): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/imageProcessingService.ts",
      "line": 39,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "exif?: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/performanceMonitor.ts",
      "line": 239,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "async getPerformanceSummary(): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/performanceMonitor.ts",
      "line": 390,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "private async getDatabasePoolStats(): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/performanceMonitor.ts",
      "line": 275,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private calculateApiSummary(metrics: APIMetrics[]): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/performanceMonitor.ts",
      "line": 326,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private calculateDbSummary(metrics: DatabaseMetrics[]): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/performanceMonitor.ts",
      "line": 354,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private calculateSystemSummary(metrics: SystemMetrics[]): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/projectShareService.ts",
      "line": 61,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private async query<T = any>(text: string, params?: any[]): Promise<import('pg').QueryResult<T>> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/securityService.ts",
      "line": 96,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export async function updateSecurityIssue(id: string, updateData: any, _userId: string) {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueue.ts",
      "line": 14,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueue.ts",
      "line": 38,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any = {},",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 56,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 61,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "result?: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 195,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "this.connection.on('error', (err: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 425,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 483,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 638,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "resultData: any",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 664,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any = {},",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationQueueService.ts",
      "line": 852,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const queueSegmentationJob = async (imageId: string, options: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationService.ts",
      "line": 38,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export const getSegmentationQueueStatus = async (): Promise<any> => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationService.ts",
      "line": 17,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "parameters: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/segmentationService.ts",
      "line": 72,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const saveSegmentation = async (imageId: string, userId: string, segmentationData: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/socketServiceEnhanced.ts",
      "line": 357,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/stuckImageCleanup.ts",
      "line": 119,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private async fixStuckImage(client: any, image: StuckImage): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 28,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export type TaskExecutor<T> = (task: Task<T>) => Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 55,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "result?: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 61,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "onComplete?: (result: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/taskQueueService.ts",
      "line": 443,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function handleTaskCompleted(task: Task<T>, result: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/tokenService.ts",
      "line": 562,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any[] = [userId];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/tokenService.ts",
      "line": 616,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userProfileService.ts",
      "line": 44,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "setting_value: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userProfileService.ts",
      "line": 213,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const updateValues: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userProfileService.ts",
      "line": 473,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "settingValue: any,",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 24,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recentActivity: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 25,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recentProjects: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsService.ts",
      "line": 26,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recentImages: any[];",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsServiceOptimized.ts",
      "line": 8,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "query(text: string, params?: any[]): Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/userStatsServiceOptimized.ts",
      "line": 8,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query(text: string, params?: any[]): Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 6,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data: any;",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 53,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "this.io.emit = (event: string, ...args: any[]): boolean => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 66,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "chainableObj.emit = (event: string, ...args: any[]): boolean => {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 97,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private addToBatch(key: string, event: string, data: any, room?: string, userId?: string): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 196,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private compressPayload(data: any): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 196,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private compressPayload(data: any): any {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 238,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public sendImmediate(event: string, data: any, target?: string | string[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 306,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private handlers: Map<string, ((data: any) => void)[]> = new Map();",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 309,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public on(event: string, handler: (data: any) => void): void {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/services/websocketBatcher.ts",
      "line": 317,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public processBatch(batch: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/api/projectImages.ts",
      "line": 155,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const parsedImages = JSON.parse(storedImages) as Array<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/api/projectImages.ts",
      "line": 159,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": ".map((img: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useDuplicationProgress.ts",
      "line": 358,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function normalizeTaskData(data: any): DuplicationTask {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 13,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const useDebounce = <T extends (...args: any[]) => any>(callback: T, delay: number): T => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 105,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useImageProcessing.ts",
      "line": 409,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "options: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useProjectDelete.ts",
      "line": 27,
      "category": "event-handler",
      "risk": "MEDIUM",
      "code": "onError: (error: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useProjectDelete.ts",
      "line": 27,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "onError: (error: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useSegmentationUpdates.ts",
      "line": 84,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "let responseData: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useSegmentationUpdates.ts",
      "line": 120,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "queueData.processingImages?.some((img: any) => img.id === imageId)) // Added any for processingImages",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useSegmentationUpdates.ts",
      "line": 178,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "let responseData: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useToast.ts",
      "line": 112,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error: string | ((error: any) => string);",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 40,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "emitWithAck: (event: string, ...args: any[]) => Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 297,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const [queueStatus, setQueueStatus] = useState<any>(null);",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 23,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "events?: Record<string, (...args: any[]) => void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 39,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "emit: (event: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 40,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "emitWithAck: (event: string, ...args: any[]) => Promise<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 47,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "on: (event: string, handler: (...args: any[]) => void) => () => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 48,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "off: (event: string, handler?: (...args: any[]) => void) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 100,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const emit = useCallback((event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 105,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const emitWithAck = useCallback(async (event: string, ...args: any[]) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 131,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const on = useCallback((event: string, handler: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 141,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const off = useCallback((event: string, handler?: (...args: any[]) => void) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 258,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleUpdate = useCallback((update: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useUnifiedWebSocket.ts",
      "line": 333,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleNotification = useCallback((notification: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 24,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function generateXlsxBinary(workbook: any): string {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const tempWriteFile = function (wb: any, filename: string, opts: any) {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const tempWriteFile = function (wb: any, filename: string, opts: any) {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 204,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const normalizePolygons = (inputPolygons: any[]): Polygon[] => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 215,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "normalizedPolygon.points = polygon.points.map((point: any, pointIndex: number) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 246,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "normalizedPolygon.points = polygon.vertices.map((vertex: any, pointIndex: number) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 680,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const annotations: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 681,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const cocoImages: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/export/hooks/useExportFunctions.ts",
      "line": 1242,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const items: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 29,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "resolve: (value: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 30,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "reject: (reason?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts",
      "line": 110,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const sendRequest = useCallback(<T>(operation: WorkerOperation, data: any): Promise<T> => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/pages/segmentation/hooks/useSlicing.ts",
      "line": 15,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "setInteractionState: (state: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 34,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 35,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 36,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error: (message: string, error?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "debug(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 49,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "info(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 55,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "warn(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 61,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error(message: string, error?: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 71,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private sendToMonitoring(message: string, error?: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 81,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private metricsBuffer: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 202,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public getFeatureFlag(key: string, defaultValue: any = false): any {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 202,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public getFeatureFlag(key: string, defaultValue: any = false): any {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 367,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private evaluateGeoTargeting(geoTargeting: any, geo: GeoInfo): boolean {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.secure.ts",
      "line": 383,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private evaluateDeviceTargeting(deviceTargeting: any, device: DeviceInfo): boolean {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 56,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "value: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 113,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "value?: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 136,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private metricsBuffer: any[] = [];",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 223,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public getFeatureFlag(key: string, defaultValue: any = false): any {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/abTestingService.ts",
      "line": 223,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public getFeatureFlag(key: string, defaultValue: any = false): any {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 7,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "debug: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 8,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "info: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "warn: (message: string, ...args: any[]) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 10,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error: (message: string, error?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 17,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "debug(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 23,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "info(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 29,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "warn(message: string, ...args: any[]): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 38,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error(message: string, error?: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/logger.ts",
      "line": 48,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private sendToMonitoring(level: 'warning' | 'error', message: string, data?: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/secureStorage.ts",
      "line": 99,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "async setItem(key: string, value: any): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/types.ts",
      "line": 47,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "value: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/abTesting/types.ts",
      "line": 108,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "value?: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/performanceMetrics.ts",
      "line": 345,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private logSlowOperation(type: string, data: any): void {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 612,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "private async compress(value: any): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 618,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "private async encrypt(value: any): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 299,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public async warmUp(data: Array<{ key: string; value: any; options?: CacheOptions }>): Promise<void> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 319,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "set: async (key: string, value: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 529,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private estimateSize(value: any): number {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 612,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private async compress(value: any): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedCacheService.ts",
      "line": 618,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private async encrypt(value: any): Promise<any> {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedImageProcessingService.ts",
      "line": 94,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "private processingQueue: Map<string, Promise<any>> = new Map();",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedImageProcessingService.ts",
      "line": 473,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "options: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 82,
      "category": "event-handler",
      "risk": "MEDIUM",
      "code": "onSubmit: (values: any) => void | Promise<void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 23,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "component: React.ComponentType<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 28,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "onConfirm?: (data?: any) => void;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 81,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "validationSchema?: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/unifiedModalService.tsx",
      "line": 82,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "onSubmit: (values: any) => void | Promise<void>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 111,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const sendBatchedMessage = async (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/services/websocketBatchingExample.ts",
      "line": 119,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const sendImmediateMessage = (event: string, data: any) => {",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/types/lazyComponents.ts",
      "line": 12,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "default: ComponentType<any>;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/types/websocket.ts",
      "line": 8,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/types/websocket.ts",
      "line": 44,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data?: any;",
      "isPriority": true
    },
    {
      "file": "packages/frontend/src/hooks/useEmailValidation.ts",
      "line": 105,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": true
    },
    {
      "file": "packages/backend/src/__tests__/factories/image.factory.ts",
      "line": 96,
      "category": "api-response",
      "risk": "HIGH",
      "code": "export function createMockWebSocketEvent(type: string, data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/__tests__/factories/image.factory.ts",
      "line": 96,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function createMockWebSocketEvent(type: string, data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/__tests__/helpers/testHelpers.ts",
      "line": 59,
      "category": "function-param",
      "risk": "HIGH",
      "code": "app.use((req: any, _res, next) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/app.ts",
      "line": 33,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).rawBody = buf;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/monitoring/index.ts",
      "line": 15,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query: async function (text: string, params?: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 70,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "client.query = wrappedQuery as any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 19,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const wrappedQuery = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 90,
      "category": "array-any",
      "risk": "HIGH",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 152,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export async function transaction<T>(callback: (client: any) => Promise<T>): Promise<T> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 140,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 104,
      "category": "array-any",
      "risk": "HIGH",
      "code": "params?: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/unified.ts",
      "line": 99,
      "category": "array-any",
      "risk": "HIGH",
      "code": "params?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/unified.ts",
      "line": 110,
      "category": "array-any",
      "risk": "HIGH",
      "code": "params?: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 22,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordApiResponseTime(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 26,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordDatabaseQuery(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 30,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordFileOperation(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 34,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordMLInference(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 38,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordMemoryHeap(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 42,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (performanceMonitoring as any).recordCPUUsage(metric);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 21,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordApiResponseTime(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 25,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordDatabaseQuery(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 29,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordFileOperation(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordMLInference(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 37,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordMemoryHeap(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 41,
      "category": "function-param",
      "risk": "HIGH",
      "code": "recordCPUUsage(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cache.ts",
      "line": 76,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cache.ts",
      "line": 76,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 33,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 38,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 98,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 144,
      "category": "api-response",
      "risk": "HIGH",
      "code": "function rewriteUrls(data: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.locals.getCDNUrl = (path: string, options?: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 38,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 43,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.sendFile = function (path: string, options?: any, callback?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 83,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 98,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 50,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).optimizationService = service;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 102,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const userId = (req as any).user?.userId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 152,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const userId = (req as any).user?.userId || req.params?.userId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 189,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 212,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).optimizationHints = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 268,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 284,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const hints = (req as any).optimizationHints;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 64,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.send = function (body?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 177,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.send = function (body?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/dbMonitoringMiddleware.ts",
      "line": 319,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const pool = (dbMonitoring as any).pool || {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedCache.ts",
      "line": 208,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedCache.ts",
      "line": 208,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandler.ts",
      "line": 73,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "user: (req as any).user?.id || 'anonymous',",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandler.ts",
      "line": 10,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const errorHandler: ErrorRequestHandler = (",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandleri18n.ts",
      "line": 28,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "user: (req as any).user?.id,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandleri18n.ts",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const errorHandleri18n: ErrorRequestHandler = (",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "t: (key: string, options?: any) => string;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 43,
      "category": "array-any",
      "risk": "HIGH",
      "code": "export function getValidationErrors(errors: any[], req: Request): any[] {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 43,
      "category": "array-any",
      "risk": "HIGH",
      "code": "export function getValidationErrors(errors: any[], req: Request): any[] {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performance.ts",
      "line": 321,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const poolStats = (pool as any).totalCount || 0; // Get pool statistics if available",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMiddleware.ts",
      "line": 155,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const applyPerformanceMonitoring = (app: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 492,
      "category": "api-response",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 492,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 520,
      "category": "array-any",
      "risk": "HIGH",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoringMiddleware.ts",
      "line": 26,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (this: Response, ...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoringMiddleware.ts",
      "line": 26,
      "category": "array-any",
      "risk": "HIGH",
      "code": "res.end = function (this: Response, ...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 77,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 110,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 33,
      "category": "array-any",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 77,
      "category": "array-any",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 110,
      "category": "array-any",
      "risk": "HIGH",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/rateLimiter.ts",
      "line": 22,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/rateLimiter.ts",
      "line": 40,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const userId = (req as any).user?.userId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/rateLimiter.ts",
      "line": 74,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const user = (req as any).user;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/rateLimiter.ts",
      "line": 79,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const userId = (req as any).user?.userId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 38,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.id,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 42,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 59,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.json = function (obj?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/validation.ts",
      "line": 133,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const file = req.file || (req.files as any)[field];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/validation.ts",
      "line": 115,
      "category": "function-param",
      "risk": "HIGH",
      "code": "items.forEach((item: any, index: number) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/validationMiddleware.ts",
      "line": 13,
      "category": "object-any",
      "risk": "HIGH",
      "code": "const dataToValidate: { [key: string]: any } = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/errorTracker.ts",
      "line": 422,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/performanceTracker.ts",
      "line": 518,
      "category": "function-param",
      "risk": "HIGH",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 818,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export async function monitorQuery<T extends Record<string, any> = any>(",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1098,
      "category": "function-param",
      "risk": "HIGH",
      "code": "on: (event: string, listener: (...args: any[]) => void) => metricsEmitter.on(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1099,
      "category": "function-param",
      "risk": "HIGH",
      "code": "off: (event: string, listener: (...args: any[]) => void) => metricsEmitter.off(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1100,
      "category": "function-param",
      "risk": "HIGH",
      "code": "once: (event: string, listener: (...args: any[]) => void) => metricsEmitter.once(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 755,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function errorHandlerMiddleware(err: any, req: Request, res: Response, next: NextFunction) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 969,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function updatePoolMetrics(pool: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 279,
      "category": "array-any",
      "risk": "HIGH",
      "code": "private metricsQueue: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 820,
      "category": "array-any",
      "risk": "HIGH",
      "code": "params: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1098,
      "category": "array-any",
      "risk": "HIGH",
      "code": "on: (event: string, listener: (...args: any[]) => void) => metricsEmitter.on(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1099,
      "category": "array-any",
      "risk": "HIGH",
      "code": "off: (event: string, listener: (...args: any[]) => void) => metricsEmitter.off(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1100,
      "category": "array-any",
      "risk": "HIGH",
      "code": "once: (event: string, listener: (...args: any[]) => void) => metricsEmitter.once(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/index.ts",
      "line": 108,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const setupRoutes = (app: express.Application, _io: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/logs.ts",
      "line": 259,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const params: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/logs.ts",
      "line": 360,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const params: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/monitoring.ts",
      "line": 233,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "resolvedBy: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 167,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const user = (req as any).user;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 247,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.id,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 224,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (rateLimiterRes: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 211,
      "category": "array-any",
      "risk": "HIGH",
      "code": "const errors: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/rateLimitMiddleware.ts",
      "line": 45,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "return (req as any).user?.userId || req.ip || 'unknown';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/rateLimitMiddleware.ts",
      "line": 58,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "userId: (req as any).user?.userId,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/rateLimitMiddleware.ts",
      "line": 53,
      "category": "function-param",
      "risk": "HIGH",
      "code": "return (req: Request, res: Response, _next: NextFunction, options: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/security.ts",
      "line": 125,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).nonce = nonce;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/security.ts",
      "line": 167,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(directives as any)['report-uri'] = [cspReportUri];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/SecurityManager.ts",
      "line": 407,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const user = (req as any).user;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/utils/securityHelpers.ts",
      "line": 206,
      "category": "api-response",
      "risk": "HIGH",
      "code": "export const generateTimeLimitedToken = (data: any, expiryMinutes: number = 30): string => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 147,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 185,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 229,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 235,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 382,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).user = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 390,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).deviceId = payload.deviceId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 418,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "} as any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 423,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(req as any).deviceId = tokenData.deviceId;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 506,
      "category": "function-param",
      "risk": "HIGH",
      "code": "return jest.fn((payload: any, secret: string, options: any = {}) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 541,
      "category": "function-param",
      "risk": "HIGH",
      "code": "return jest.fn((token: string, secret: string, _options: any = {}, callback?: (err: Error | null, decoded?: any) => void) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 51,
      "category": "function-param",
      "risk": "HIGH",
      "code": "on(event: string, listener: (...args: any[]) => void): this;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 175,
      "category": "function-param",
      "risk": "HIGH",
      "code": "on: (_event: string, _listener: (...args: any[]) => void): Pool => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 32,
      "category": "array-any",
      "risk": "HIGH",
      "code": "values?: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 43,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query<T = any>(queryText: QueryParams, values?: any[]): Promise<QueryResult<T>>;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 48,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query<T = any>(queryText: QueryParams, values?: any[]): Promise<QueryResult<T>>;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 51,
      "category": "array-any",
      "risk": "HIGH",
      "code": "on(event: string, listener: (...args: any[]) => void): this;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 158,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query: (text: QueryParams, values?: any[]): Promise<QueryResult> => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 163,
      "category": "array-any",
      "risk": "HIGH",
      "code": "query: (text: QueryParams, values?: any[]): Promise<QueryResult> => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 175,
      "category": "array-any",
      "risk": "HIGH",
      "code": "on: (_event: string, _listener: (...args: any[]) => void): Pool => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 192,
      "category": "array-any",
      "risk": "HIGH",
      "code": "values: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 357,
      "category": "array-any",
      "risk": "HIGH",
      "code": "public async query(text: QueryParams, values: any[] = []): Promise<QueryResult> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1355,
      "category": "api-response",
      "risk": "HIGH",
      "code": "writeFile: (path: string, data: any, options?: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 296,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 297,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'open';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 298,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = filePath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 305,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EISDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 306,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'read';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 307,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = filePath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 337,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 338,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'open';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 339,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = filePath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 346,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EISDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 347,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'read';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 348,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = filePath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 481,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EEXIST';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 482,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'mkdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 483,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 495,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 496,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'mkdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 497,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 534,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EEXIST';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 535,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'mkdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 536,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 547,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 548,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'mkdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 549,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 598,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 599,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'scandir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 600,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 607,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 608,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'scandir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 609,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 668,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 669,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'scandir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 670,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 677,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 678,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'scandir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 679,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = dirPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 750,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 751,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'stat';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 752,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 771,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 772,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'stat';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 773,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 802,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 803,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'unlink';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 804,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 811,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EISDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 812,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'unlink';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 813,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 832,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 833,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'unlink';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 834,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 841,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EISDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 842,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'unlink';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 843,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 880,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 881,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 882,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 889,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 890,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 891,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 904,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTEMPTY';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 905,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 906,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 935,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 936,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 937,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 944,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 945,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 946,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 959,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTEMPTY';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 960,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rmdir';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 961,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1005,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1006,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1007,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1008,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1018,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1019,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1020,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1021,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1036,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTEMPTY';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1037,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1038,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1039,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1076,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1077,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1078,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1079,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1089,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1090,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1091,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1092,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1107,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOTEMPTY';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1108,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'rename';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1109,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = oldPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1110,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).dest = newPath;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1181,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1182,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'open';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1183,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1193,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'EISDIR';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1194,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'read';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1195,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1243,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).code = 'ENOENT';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1244,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).syscall = 'open';",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1245,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(err as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1254,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).path = path;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1255,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).bytesWritten = 0;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1258,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).write = (chunk: Buffer | string) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1261,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).bytesWritten += buffer.length;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1265,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).end = (chunk?: Buffer | string) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1267,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(stream as any).write(chunk);",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1354,
      "category": "function-param",
      "risk": "HIGH",
      "code": "readFile: (path: string, options?: any) => fileSystem.readFile(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1355,
      "category": "function-param",
      "risk": "HIGH",
      "code": "writeFile: (path: string, data: any, options?: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1357,
      "category": "function-param",
      "risk": "HIGH",
      "code": "mkdir: (path: string, options?: any) => fileSystem.mkdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1358,
      "category": "function-param",
      "risk": "HIGH",
      "code": "readdir: (path: string, options?: any) => fileSystem.readdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1359,
      "category": "function-param",
      "risk": "HIGH",
      "code": "stat: (path: string, options?: any) => fileSystem.stat(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1361,
      "category": "function-param",
      "risk": "HIGH",
      "code": "rmdir: (path: string, options?: any) => fileSystem.rmdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 187,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const extractPagination = (query: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 32,
      "category": "array-any",
      "risk": "HIGH",
      "code": "details?: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 111,
      "category": "array-any",
      "risk": "HIGH",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 131,
      "category": "array-any",
      "risk": "HIGH",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 169,
      "category": "array-any",
      "risk": "HIGH",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 109,
      "category": "array-any",
      "risk": "HIGH",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 131,
      "category": "array-any",
      "risk": "HIGH",
      "code": "errors: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 62,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const response: any = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 107,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const errorHelpers = (req: any, res: any, next: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 108,
      "category": "function-param",
      "risk": "HIGH",
      "code": "req.throwValidationError = (message: string, details?: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/__mocks__/polygonWorker.ts",
      "line": 27,
      "category": "api-response",
      "risk": "HIGH",
      "code": "let result: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/__mocks__/polygonWorker.ts",
      "line": 75,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "this.onmessage = listener as any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/__mocks__/polygonWorker.ts",
      "line": 77,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "this.onerror = listener as any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/App.enhanced.tsx",
      "line": 265,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).clearImageCache = async () => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx",
      "line": 35,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(apiClient.get as any).mockResolvedValue({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx",
      "line": 45,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(apiClient.post as any).mockResolvedValue({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/analytics/AnalyticsDashboardOptimized.tsx",
      "line": 155,
      "category": "function-param",
      "risk": "HIGH",
      "code": "return analyticsData.activity.map((item: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/analytics/AnalyticsDashboardOptimized.tsx",
      "line": 173,
      "category": "function-param",
      "risk": "HIGH",
      "code": "return analyticsData.performance.map((item: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/BarChartContainer.tsx",
      "line": 19,
      "category": "api-response",
      "risk": "HIGH",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/BarChartContainer.tsx",
      "line": 19,
      "category": "array-any",
      "risk": "HIGH",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 5,
      "category": "api-response",
      "risk": "HIGH",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "tooltipFormatter?: (value: any, name: string) => [string, string];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 10,
      "category": "function-param",
      "risk": "HIGH",
      "code": "labelFormatter?: (props: any) => string;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 5,
      "category": "array-any",
      "risk": "HIGH",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/ImageUploader.tsx",
      "line": 23,
      "category": "function-param",
      "risk": "HIGH",
      "code": "onUploadComplete: (projectId: string, uploadedImages: any[]) => void;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/ImageUploader.tsx",
      "line": 23,
      "category": "array-any",
      "risk": "HIGH",
      "code": "onUploadComplete: (projectId: string, uploadedImages: any[]) => void;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/DebugSegmentationThumbnail.tsx",
      "line": 6,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const segmentationCache = new Map<string, { data: any; timestamp: number }>();",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/DebugSegmentationThumbnail.tsx",
      "line": 100,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ImageDisplayOptimized.tsx",
      "line": 141,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ImageDisplayOptimized.tsx",
      "line": 141,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 34,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const createShareFormSchema = (t: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 96,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const users = response.data.data.map((user: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 122,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/SegmentationQueueIndicator.tsx",
      "line": 326,
      "category": "api-response",
      "risk": "HIGH",
      "code": "(data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/SegmentationQueueIndicator.tsx",
      "line": 325,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleSegmentationUpdate = useCallback(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AccountSection.tsx",
      "line": 72,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AppearanceSection.tsx",
      "line": 26,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "setLanguage(value as any);",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AppearanceSection.tsx",
      "line": 31,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "setTheme(value as any);",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AvatarUploader.tsx",
      "line": 91,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleCropComplete = async (cropData: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/DeleteAccountDialog.tsx",
      "line": 82,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 50,
      "category": "function-param",
      "risk": "HIGH",
      "code": "renderFileItem?: (file: any, actions: any) => React.ReactNode;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 145,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const defaultFileItemRenderer = (file: any) => (",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 47,
      "category": "array-any",
      "risk": "HIGH",
      "code": "files: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/config/queryClient.ts",
      "line": 21,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const status = (error as any).status;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 276,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function PricingCard({ plan, price, highlighted, onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 288,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function ComparisonTable({ onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 292,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function StandardPricingTable({ onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 308,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function VirtualizedImageGallery({ lazyLoad }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 312,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function StandardImageGallery({ lazyLoad }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/i18n.ts",
      "line": 45,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).i18next = i18nInstance;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 9,
      "category": "api-response",
      "risk": "HIGH",
      "code": "response: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 49,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const createMockResponse = (data: any, status = 200): AxiosResponse => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 127,
      "category": "api-response",
      "risk": "HIGH",
      "code": "mockPost.mockImplementation((url: string, data: any) => handleRequest(url, 'post', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 128,
      "category": "api-response",
      "risk": "HIGH",
      "code": "mockPut.mockImplementation((url: string, data: any) => handleRequest(url, 'put', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 129,
      "category": "api-response",
      "risk": "HIGH",
      "code": "mockPatch.mockImplementation((url: string, data: any) => handleRequest(url, 'patch', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 379,
      "category": "api-response",
      "risk": "HIGH",
      "code": "response: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 55,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "config: {} as any,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 68,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "config: {} as any,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 16,
      "category": "function-param",
      "risk": "HIGH",
      "code": "fallbackHandler?: (url: string, method: HttpMethod, data?: any) => Promise<any>;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 127,
      "category": "function-param",
      "risk": "HIGH",
      "code": "mockPost.mockImplementation((url: string, data: any) => handleRequest(url, 'post', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 128,
      "category": "function-param",
      "risk": "HIGH",
      "code": "mockPut.mockImplementation((url: string, data: any) => handleRequest(url, 'put', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 129,
      "category": "function-param",
      "risk": "HIGH",
      "code": "mockPatch.mockImplementation((url: string, data: any) => handleRequest(url, 'patch', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 49,
      "category": "api-response",
      "risk": "HIGH",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 62,
      "category": "api-response",
      "risk": "HIGH",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 124,
      "category": "api-response",
      "risk": "HIGH",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 137,
      "category": "api-response",
      "risk": "HIGH",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 49,
      "category": "function-param",
      "risk": "HIGH",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 62,
      "category": "function-param",
      "risk": "HIGH",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 124,
      "category": "function-param",
      "risk": "HIGH",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 137,
      "category": "function-param",
      "risk": "HIGH",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/monitoring/performanceMonitoring.ts",
      "line": 119,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "if (performance && (performance as any).memory) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/monitoring/performanceMonitoring.ts",
      "line": 256,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const memory = (performance as any).memory;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/uploadClient.ts",
      "line": 74,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const errorMessage = (error.response?.data as any)?.message?.toLowerCase() || '';",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/AcceptInvitation.tsx",
      "line": 53,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ForgotPassword.tsx",
      "line": 38,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 130,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 178,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const handleImageCreated = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 192,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const handleImageDeleted = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 588,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": ".filter((r) => r.status === 'fulfilled' && (r.value as any).success)",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 589,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": ".map((r) => (r.value as any).imageId);",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 624,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "results.filter((r) => r.status !== 'fulfilled' || !(r.value as any).success),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 130,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 178,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleImageCreated = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 192,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const handleImageDeleted = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 171,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (joinErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 229,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (leaveErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 241,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 519,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 571,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (newEndpointErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 578,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (legacyErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 772,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 63,
      "category": "function-param",
      "risk": "HIGH",
      "code": "vi.mock('recharts', () => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 65,
      "category": "function-param",
      "risk": "HIGH",
      "code": "Bar: ({ dataKey, name }: any) => <div data-testid={`bar-${dataKey}`} data-name={name}></div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 69,
      "category": "function-param",
      "risk": "HIGH",
      "code": "ResponsiveContainer: ({ children }: any) => <div data-testid=\"responsive-container\">{children}</div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 70,
      "category": "function-param",
      "risk": "HIGH",
      "code": "PieChart: ({ children }: any) => <div data-testid=\"pie-chart\">{children}</div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 71,
      "category": "function-param",
      "risk": "HIGH",
      "code": "Pie: ({ data, dataKey, label }: any) => (",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 101,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyBarChartPresent(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 107,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyBarCount(screen: any, expectedCount: number) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 112,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyPieChartPresent(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 117,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyChartTabs(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 122,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyEmptyState(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/statusbar/__tests__/statusBarTestUtils.tsx",
      "line": 26,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyStatusBarValues(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/toolbar/__tests__/toolbarTestUtils.tsx",
      "line": 32,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function verifyToolbarButtonsAction(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/toolbar/__tests__/toolbarTestUtils.tsx",
      "line": 57,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export function testAllToolbarButtons(screen: any, props = defaultToolbarV2Props) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 29,
      "category": "api-response",
      "risk": "HIGH",
      "code": "process: (data: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 53,
      "category": "api-response",
      "risk": "HIGH",
      "code": "process: (data: any[]) => (Array.isArray(data) && data.length > 0 ? data[0] : null),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 29,
      "category": "function-param",
      "risk": "HIGH",
      "code": "process: (data: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 53,
      "category": "function-param",
      "risk": "HIGH",
      "code": "process: (data: any[]) => (Array.isArray(data) && data.length > 0 ? data[0] : null),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 29,
      "category": "array-any",
      "risk": "HIGH",
      "code": "process: (data: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 53,
      "category": "array-any",
      "risk": "HIGH",
      "code": "process: (data: any[]) => (Array.isArray(data) && data.length > 0 ? data[0] : null),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/fetchAllSegmentations.ts",
      "line": 20,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/Settings.tsx",
      "line": 57,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/VerifyEmail.tsx",
      "line": 29,
      "category": "function-param",
      "risk": "HIGH",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 608,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "global.Worker = MockWorker as any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 688,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).indexedDB = {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 55,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const Icon = React.forwardRef((props: any, ref: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 297,
      "category": "function-param",
      "risk": "HIGH",
      "code": "useTranslation: () => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 780,
      "category": "function-param",
      "risk": "HIGH",
      "code": "vi.mock('@/lib/radix-optimized', () => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 782,
      "category": "function-param",
      "risk": "HIGH",
      "code": "SelectItem: ({ children, value }: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 784,
      "category": "function-param",
      "risk": "HIGH",
      "code": "SelectTrigger: ({ children }: any) => React.createElement('button', { 'data-testid': 'select-trigger' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 785,
      "category": "function-param",
      "risk": "HIGH",
      "code": "SelectValue: ({ placeholder }: any) => React.createElement('span', { 'data-testid': 'select-value' }, placeholder),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 786,
      "category": "function-param",
      "risk": "HIGH",
      "code": "SelectRoot: ({ children }: any) => React.createElement('div', { 'data-testid': 'select-root' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 787,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogRoot: ({ children, open }: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 789,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogTrigger: ({ children }: any) => React.createElement('button', { 'data-testid': 'dialog-trigger' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 790,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogPortal: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-portal' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 791,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogOverlay: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-overlay' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 792,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogContent: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-content' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 793,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogTitle: ({ children }: any) => React.createElement('h2', { 'data-testid': 'dialog-title' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 794,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogDescription: ({ children }: any) => React.createElement('p', { 'data-testid': 'dialog-description' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 795,
      "category": "function-param",
      "risk": "HIGH",
      "code": "DialogClose: ({ children }: any) => React.createElement('button', { 'data-testid': 'dialog-close' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 383,
      "category": "function-param",
      "risk": "HIGH",
      "code": "constructor(message: string, code?: string, config?: any, request?: any, response?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 128,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const mockSuccess = (method: keyof typeof mockApi, path: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 246,
      "category": "api-response",
      "risk": "HIGH",
      "code": "export const mockFileUpload = (api: any, response: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 128,
      "category": "function-param",
      "risk": "HIGH",
      "code": "const mockSuccess = (method: keyof typeof mockApi, path: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 246,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const mockFileUpload = (api: any, response: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/index.tsx",
      "line": 24,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const renderWithProviders = (",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 7,
      "category": "function-param",
      "risk": "HIGH",
      "code": "[key: string]: (...args: any[]) => any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 24,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const testPolygonAction = <T extends PolygonActions>(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 7,
      "category": "array-any",
      "risk": "HIGH",
      "code": "[key: string]: (...args: any[]) => any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 33,
      "category": "array-any",
      "risk": "HIGH",
      "code": "...actionArgs: any[]",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/react-router-wrapper.tsx",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const createTestRouter = (routes: any[], initialEntries = ['/', '/about']) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/react-router-wrapper.tsx",
      "line": 33,
      "category": "array-any",
      "risk": "HIGH",
      "code": "export const createTestRouter = (routes: any[], initialEntries = ['/', '/about']) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/test-data.ts",
      "line": 91,
      "category": "api-response",
      "risk": "HIGH",
      "code": "export const createMockApiResponse = (data: any, status = 200) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/test-data.ts",
      "line": 100,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const error = new Error(message) as any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/test-data.ts",
      "line": 91,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const createMockApiResponse = (data: any, status = 200) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/translations/migrate-translations.ts",
      "line": 399,
      "category": "function-param",
      "risk": "HIGH",
      "code": "function setNestedValue(obj: any, path: string, value: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 298,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const size = (entry as any).transferSize || 0;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 118,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).consoleErrorDetector = consoleErrorDetector;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 33,
      "category": "function-param",
      "risk": "HIGH",
      "code": "console.error = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 56,
      "category": "function-param",
      "risk": "HIGH",
      "code": "console.warn = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 33,
      "category": "array-any",
      "risk": "HIGH",
      "code": "console.error = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 56,
      "category": "array-any",
      "risk": "HIGH",
      "code": "console.warn = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/debugI18next.ts",
      "line": 6,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const i18n = (window as any).i18next;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/debugI18next.ts",
      "line": 71,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).debugI18next = debugI18next;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/error/globalErrorHandler.ts",
      "line": 112,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(error as any)._isHandledByBoundary = true;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/error/permissionErrorHandler.ts",
      "line": 74,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const i18n = (window as any).i18n;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 925,
      "category": "api-response",
      "risk": "HIGH",
      "code": "const result: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/localStorageTest.ts",
      "line": 52,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).testLocalStoragePersistence = testLocalStoragePersistence;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/logging/unifiedLogger.ts",
      "line": 408,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "(window as any).__originalConsole = originalConsole;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/logging/unifiedLogger.ts",
      "line": 415,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "if (typeof window !== 'undefined' && (window as any).__originalConsole) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/logging/unifiedLogger.ts",
      "line": 416,
      "category": "type-assertion",
      "risk": "HIGH",
      "code": "const original = (window as any).__originalConsole;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 9,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const setTimeoutSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 32,
      "category": "function-param",
      "risk": "HIGH",
      "code": "export const setIntervalSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 9,
      "category": "array-any",
      "risk": "HIGH",
      "code": "export const setTimeoutSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 32,
      "category": "array-any",
      "risk": "HIGH",
      "code": "export const setIntervalSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/__tests__/factories/image.factory.ts",
      "line": 96,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function createMockWebSocketEvent(type: string, data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/__tests__/helpers/testHelpers.ts",
      "line": 59,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "app.use((req: any, _res, next) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/config/i18n.ts",
      "line": 53,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "options?: any",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/monitoring/index.ts",
      "line": 15,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "query: async function (text: string, params?: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/monitoring/index.ts",
      "line": 15,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query: async function (text: string, params?: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 19,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const wrappedQuery = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 90,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 19,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const wrappedQuery = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 90,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/performanceWrapper.ts",
      "line": 131,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function createTrackedPool(poolConfig: any): Pool {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 104,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "params?: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 140,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 152,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export async function transaction<T>(callback: (client: any) => Promise<T>): Promise<T> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/unified.ts",
      "line": 99,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "params?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/unified.ts",
      "line": 110,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "params?: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 14,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function createPerformanceMonitoring(_options?: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 14,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function createPerformanceMonitoring(_options?: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 21,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordApiResponseTime(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 25,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordDatabaseQuery(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 29,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordFileOperation(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordMLInference(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 37,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordMemoryHeap(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 41,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "recordCPUUsage(metric: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/index.ts",
      "line": 47,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const monitoring: any = performanceMonitoring;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/performanceMonitoring.ts",
      "line": 14,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public static getInstance(_options?: any): typeof performanceMonitoring {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/lib/monitoring/performanceMonitoring.ts",
      "line": 26,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function createPerformanceMonitoring(_options?: any): typeof performanceMonitoring {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cache.ts",
      "line": 76,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.locals.getCDNUrl = (path: string, options?: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 38,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.sendFile = function (path: string, options?: any, callback?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.sendFile = function (path: string, options?: any, callback?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 83,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 98,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 144,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function rewriteUrls(data: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 144,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function rewriteUrls(data: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 165,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const rewritten: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 64,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.send = function (body?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/databaseOptimizationMiddleware.ts",
      "line": 177,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.send = function (body?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedCache.ts",
      "line": 208,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.json = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedValidation.ts",
      "line": 354,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function sanitizeObject(obj: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedValidation.ts",
      "line": 354,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function sanitizeObject(obj: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/enhancedValidation.ts",
      "line": 363,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const sanitized: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandler.ts",
      "line": 111,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export const asyncHandler = (fn: (req: Request, res: Response, next: NextFunction) => Promise<any>) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandler.ts",
      "line": 11,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "err: any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/errorHandleri18n.ts",
      "line": 10,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "err: any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "t: (key: string, options?: any) => string;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 11,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "i18n: any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function getValidationErrors(errors: any[], req: Request): any[] {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/i18n.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function getValidationErrors(errors: any[], req: Request): any[] {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performance.ts",
      "line": 243,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const logData: any = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMiddleware.ts",
      "line": 155,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const applyPerformanceMonitoring = (app: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 520,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 492,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.send = function (data: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoring.ts",
      "line": 520,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "pool.query = async function (...args: any[]): Promise<any> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceMonitoringMiddleware.ts",
      "line": 26,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (this: Response, ...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 77,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/performanceTracking.ts",
      "line": 110,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (...args: any[]) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 21,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error?: any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 42,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 42,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/requestLogger.ts",
      "line": 59,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.json = function (obj?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/validation.ts",
      "line": 115,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "items.forEach((item: any, index: number) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/validationMiddleware.ts",
      "line": 13,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const dataToValidate: { [key: string]: any } = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/errorTracker.ts",
      "line": 415,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "err: any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/performanceTracker.ts",
      "line": 518,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/performanceTracker.ts",
      "line": 518,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "res.end = function (chunk?: any, encoding?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1100,
      "category": "event-handler",
      "risk": "MEDIUM",
      "code": "once: (event: string, listener: (...args: any[]) => void) => metricsEmitter.once(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 279,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private metricsQueue: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 340,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "private recordMetric(metric: any): void {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 755,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function errorHandlerMiddleware(err: any, req: Request, res: Response, next: NextFunction) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 820,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "params: any[],",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 969,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function updatePoolMetrics(pool: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 989,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "values?: any",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1098,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "on: (event: string, listener: (...args: any[]) => void) => metricsEmitter.on(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1099,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "off: (event: string, listener: (...args: any[]) => void) => metricsEmitter.off(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/monitoring/unified/index.ts",
      "line": 1100,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "once: (event: string, listener: (...args: any[]) => void) => metricsEmitter.once(event, listener),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/imagesAsync.ts",
      "line": 85,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "processor: (file: T) => Promise<any>,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/index.ts",
      "line": 108,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const setupRoutes = (app: express.Application, _io: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/logs.ts",
      "line": 259,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/logs.ts",
      "line": 360,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const params: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/routes/userStats.optimized.ts",
      "line": 314,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const filters: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 211,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const errors: any[] = [];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 224,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (rateLimiterRes: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 271,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const headers: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/rateLimitMiddleware.ts",
      "line": 53,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return (req: Request, res: Response, _next: NextFunction, options: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/security.ts",
      "line": 25,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "[key: string]: any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/utils/securityHelpers.ts",
      "line": 206,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const generateTimeLimitedToken = (data: any, expiryMinutes: number = 30): string => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/utils/securityHelpers.ts",
      "line": 227,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const verifyTimeLimitedToken = (token: string): any | null => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 147,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 185,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 229,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 235,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 23,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "[key: string]: any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "[key: string]: any;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 506,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return jest.fn((payload: any, secret: string, options: any = {}) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 506,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return jest.fn((payload: any, secret: string, options: any = {}) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 541,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return jest.fn((token: string, secret: string, _options: any = {}, callback?: (err: Error | null, decoded?: any) => void) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockAuth.ts",
      "line": 541,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return jest.fn((token: string, secret: string, _options: any = {}, callback?: (err: Error | null, decoded?: any) => void) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 32,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "values?: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 43,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query<T = any>(queryText: QueryParams, values?: any[]): Promise<QueryResult<T>>;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 48,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query<T = any>(queryText: QueryParams, values?: any[]): Promise<QueryResult<T>>;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 51,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "on(event: string, listener: (...args: any[]) => void): this;",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 158,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query: (text: QueryParams, values?: any[]): Promise<QueryResult> => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 163,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "query: (text: QueryParams, values?: any[]): Promise<QueryResult> => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 175,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "on: (_event: string, _listener: (...args: any[]) => void): Pool => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 192,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "values: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockDatabase.ts",
      "line": 357,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "public async query(text: QueryParams, values: any[] = []): Promise<QueryResult> {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 633,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const dirent: any = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 703,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const dirent: any = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1354,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "readFile: (path: string, options?: any) => fileSystem.readFile(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1355,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "writeFile: (path: string, data: any, options?: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1355,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "writeFile: (path: string, data: any, options?: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1357,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "mkdir: (path: string, options?: any) => fileSystem.mkdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1358,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "readdir: (path: string, options?: any) => fileSystem.readdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1359,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "stat: (path: string, options?: any) => fileSystem.stat(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/test-utils/mockFileSystem.ts",
      "line": 1361,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "rmdir: (path: string, options?: any) => fileSystem.rmdir(path, options),",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 32,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "details?: any[];",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 111,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 131,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 169,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponse.ts",
      "line": 187,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const extractPagination = (query: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 24,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "messageParams?: any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 83,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "messageParams?: any",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 107,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "errorParams?: any,",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 109,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "details?: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 131,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "errors: any[]",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/apiResponsei18n.ts",
      "line": 189,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "error?: any",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 62,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const response: any = {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 84,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const isApiError = (error: any): error is ApiErrorClass => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 88,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const isOperationalError = (error: any): boolean => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 92,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const isValidationError = (error: any): boolean => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 96,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const isAuthenticationError = (error: any): boolean => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 100,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const isAuthorizationError = (error: any): boolean => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 107,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const errorHelpers = (req: any, res: any, next: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 107,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const errorHelpers = (req: any, res: any, next: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 107,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const errorHelpers = (req: any, res: any, next: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/utils/errorHandling/index.ts",
      "line": 108,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "req.throwValidationError = (message: string, details?: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/workers/projectDuplicationWorker.ts",
      "line": 55,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "metadata: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/__mocks__/polygonWorker.ts",
      "line": 15,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "postMessage(message: any, _transfer?: Transferable[]): void {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/__mocks__/polygonWorker.ts",
      "line": 27,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "let result: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/analytics/AnalyticsDashboardOptimized.tsx",
      "line": 155,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return analyticsData.activity.map((item: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/analytics/AnalyticsDashboardOptimized.tsx",
      "line": 173,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "return analyticsData.performance.map((item: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/BarChartContainer.tsx",
      "line": 19,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 5,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "tooltipFormatter?: (value: any, name: string) => [string, string];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/charts/PieChartContainer.tsx",
      "line": 10,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "labelFormatter?: (props: any) => string;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/ImageUploader.tsx",
      "line": 23,
      "category": "event-handler",
      "risk": "MEDIUM",
      "code": "onUploadComplete: (projectId: string, uploadedImages: any[]) => void;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/ImageUploader.tsx",
      "line": 23,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "onUploadComplete: (projectId: string, uploadedImages: any[]) => void;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/LazyLoadedComponents.tsx",
      "line": 153,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const componentCache = new Map<string, ComponentType<any>>();",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/LazyLoadedComponents.tsx",
      "line": 155,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export async function loadDynamicComponent(componentPath: string): Promise<ComponentType<any>> {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/LazyLoadedComponents.tsx",
      "line": 172,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export function useLazyComponent(importFn: () => Promise<any>, rootMargin: string = '100px') {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/LazyLoadedComponents.tsx",
      "line": 173,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const [Component, setComponent] = useState<ComponentType<any> | null>(null);",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/DebugSegmentationThumbnail.tsx",
      "line": 6,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const segmentationCache = new Map<string, { data: any; timestamp: number }>();",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/DebugSegmentationThumbnail.tsx",
      "line": 100,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ImageDebug.tsx",
      "line": 4,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "image: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ImageDebugger.tsx",
      "line": 5,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "image: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ImageDisplayOptimized.tsx",
      "line": 141,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 34,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const createShareFormSchema = (t: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 96,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const users = response.data.data.map((user: any) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 122,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/SegmentationQueueIndicator.tsx",
      "line": 326,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "(data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AccountSection.tsx",
      "line": 72,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AvatarUploader.tsx",
      "line": 91,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleCropComplete = async (cropData: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/DeleteAccountDialog.tsx",
      "line": 82,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 47,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "files: any[];",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 50,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "renderFileItem?: (file: any, actions: any) => React.ReactNode;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 50,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "renderFileItem?: (file: any, actions: any) => React.ReactNode;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/upload/UnifiedFileUploader.tsx",
      "line": 145,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const defaultFileItemRenderer = (file: any) => (",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 276,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function PricingCard({ plan, price, highlighted, onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 288,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function ComparisonTable({ onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 292,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function StandardPricingTable({ onSelect }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 308,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function VirtualizedImageGallery({ lazyLoad }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/examples/ABTestingExample.tsx",
      "line": 312,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function StandardImageGallery({ lazyLoad }: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 16,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "fallbackHandler?: (url: string, method: HttpMethod, data?: any) => Promise<any>;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "response: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 16,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "fallbackHandler?: (url: string, method: HttpMethod, data?: any) => Promise<any>;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 49,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const createMockResponse = (data: any, status = 200): AxiosResponse => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 90,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleRequest = async (url: string, method: HttpMethod, data?: any): Promise<AxiosResponse> => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 127,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "mockPost.mockImplementation((url: string, data: any) => handleRequest(url, 'post', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 128,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "mockPut.mockImplementation((url: string, data: any) => handleRequest(url, 'put', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 129,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "mockPatch.mockImplementation((url: string, data: any) => handleRequest(url, 'patch', data));",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts",
      "line": 379,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "response: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 5,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "data?: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 49,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 62,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 124,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "post: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/lib/__mocks__/enhanced/apiClient.tsx",
      "line": 137,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "put: vi.fn((url: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/AcceptInvitation.tsx",
      "line": 53,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ForgotPassword.tsx",
      "line": 38,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 130,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleSegmentationUpdate = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 171,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (joinErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 178,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleImageCreated = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 192,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const handleImageDeleted = (data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 229,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (leaveErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 241,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 519,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 571,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (newEndpointErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 578,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (legacyErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 772,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 64,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "BarChart: ({ children }: any) => <div data-testid=\"bar-chart\">{children}</div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 65,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "Bar: ({ dataKey, name }: any) => <div data-testid={`bar-${dataKey}`} data-name={name}></div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 69,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "ResponsiveContainer: ({ children }: any) => <div data-testid=\"responsive-container\">{children}</div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 70,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "PieChart: ({ children }: any) => <div data-testid=\"pie-chart\">{children}</div>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 71,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "Pie: ({ data, dataKey, label }: any) => (",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 101,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function verifyBarChartPresent(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 107,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function verifyBarCount(screen: any, expectedCount: number) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 112,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function verifyPieChartPresent(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 117,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function verifyChartTabs(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx",
      "line": 122,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function verifyEmptyState(screen: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/statusbar/__tests__/statusBarTestUtils.tsx",
      "line": 27,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "screen: any,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/toolbar/__tests__/toolbarTestUtils.tsx",
      "line": 36,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "expectedParams?: any,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/components/toolbar/__tests__/toolbarTestUtils.tsx",
      "line": 57,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export function testAllToolbarButtons(screen: any, props = defaultToolbarV2Props) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 29,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "process: (data: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts",
      "line": 53,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "process: (data: any[]) => (Array.isArray(data) && data.length > 0 ? data[0] : null),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/fetchAllSegmentations.ts",
      "line": 20,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/Settings.tsx",
      "line": 57,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/VerifyEmail.tsx",
      "line": 29,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 55,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const Icon = React.forwardRef((props: any, ref: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 55,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const Icon = React.forwardRef((props: any, ref: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 298,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "t: (key: string, params?: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 379,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "config?: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 380,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "request?: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 381,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "response?: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 383,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "constructor(message: string, code?: string, config?: any, request?: any, response?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 383,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "constructor(message: string, code?: string, config?: any, request?: any, response?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 383,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "constructor(message: string, code?: string, config?: any, request?: any, response?: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 781,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "SelectContent: ({ children }: any) => React.createElement('div', { 'data-testid': 'select-content' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 782,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "SelectItem: ({ children, value }: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 784,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "SelectTrigger: ({ children }: any) => React.createElement('button', { 'data-testid': 'select-trigger' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 785,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "SelectValue: ({ placeholder }: any) => React.createElement('span', { 'data-testid': 'select-value' }, placeholder),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 786,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "SelectRoot: ({ children }: any) => React.createElement('div', { 'data-testid': 'select-root' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 787,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogRoot: ({ children, open }: any) =>",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 789,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogTrigger: ({ children }: any) => React.createElement('button', { 'data-testid': 'dialog-trigger' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 790,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogPortal: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-portal' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 791,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogOverlay: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-overlay' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 792,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogContent: ({ children }: any) => React.createElement('div', { 'data-testid': 'dialog-content' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 793,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogTitle: ({ children }: any) => React.createElement('h2', { 'data-testid': 'dialog-title' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 794,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogDescription: ({ children }: any) => React.createElement('p', { 'data-testid': 'dialog-description' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-setup.ts",
      "line": 795,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "DialogClose: ({ children }: any) => React.createElement('button', { 'data-testid': 'dialog-close' }, children),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 128,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const mockSuccess = (method: keyof typeof mockApi, path: string, data: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 246,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const mockFileUpload = (api: any, response: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/apiClientMock.ts",
      "line": 246,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const mockFileUpload = (api: any, response: any) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/index.tsx",
      "line": 34,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "preloadedState?: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 7,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "[key: string]: (...args: any[]) => any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 31,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "renderHookFn: (params: any) => RenderHookResult<any, T>,",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/polygonActionTestUtils.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "...actionArgs: any[]",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/react-router-wrapper.tsx",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const createTestRouter = (routes: any[], initialEntries = ['/', '/about']) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/render-with-providers.tsx",
      "line": 18,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "return React.cloneElement(child as React.ReactElement<any>, {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/test-utils/test-data.ts",
      "line": 91,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const createMockApiResponse = (data: any, status = 200) => ({",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/translations/migrate-translations.ts",
      "line": 372,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const nestedTranslations: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/translations/migrate-translations.ts",
      "line": 399,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function setNestedValue(obj: any, path: string, value: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/translations/migrate-translations.ts",
      "line": 399,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function setNestedValue(obj: any, path: string, value: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 32,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const componentCache = new Map<string, LazyExoticComponent<ComponentType<any>>>();",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 33,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const loadingPromises = new Map<string, Promise<any>>();",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 38,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export function lazyWithRetry<T extends ComponentType<any>>(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 81,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export async function prefetchComponent(importFn: () => Promise<any>, chunkName?: string): Promise<void> {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 164,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export function createCodeSplitComponent<T extends ComponentType<any>>(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 213,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "export function splitComponent<T extends ComponentType<any>>(",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 234,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "splitComponent<any>('../pages/segmentation/components/canvas/CanvasV2', {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 241,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "splitComponent<any>('../pages/segmentation/components/project/export/ExcelExporter', {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 247,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "splitComponent<any>('../components/analytics/AnalyticsDashboardOptimized', { chunkName: 'analytics-dashboard' }),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/codeSplitting.ts",
      "line": 251,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "splitComponent<any>('../components/project/VirtualImageGrid', { chunkName: 'virtual-image-grid', prefetch: true }),",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 33,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "console.error = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/consoleErrorDetector.ts",
      "line": 56,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "console.warn = (...args: any[]) => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/error/permissionErrorHandler.ts",
      "line": 166,
      "category": "generic-any",
      "risk": "MEDIUM",
      "code": "const axiosError = error as AxiosError<any>;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 15,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "let enTranslations: any;",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 631,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const remainingSections: any = {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 918,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function translateSection(section: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 918,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "function translateSection(section: any): any {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/fix-chinese-formatting.ts",
      "line": 925,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "const result: any = {};",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 9,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const setTimeoutSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/utils/timers.ts",
      "line": 32,
      "category": "variable-type",
      "risk": "MEDIUM",
      "code": "export const setIntervalSafe = (callback: (...args: any[]) => void, delay?: number): NodeJS.Timeout => {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/db/readReplica.ts",
      "line": 140,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/middleware/cdn.ts",
      "line": 83,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/security/middleware/advancedRateLimiter.ts",
      "line": 224,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (rateLimiterRes: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 147,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 185,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 229,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/backend/src/server.ts",
      "line": 235,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/DebugSegmentationThumbnail.tsx",
      "line": 100,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/project/ShareDialog.tsx",
      "line": 122,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/AccountSection.tsx",
      "line": 72,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/components/settings/DeleteAccountDialog.tsx",
      "line": 82,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/AcceptInvitation.tsx",
      "line": 53,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ForgotPassword.tsx",
      "line": 38,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 171,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (joinErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 229,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (leaveErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 241,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 519,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 571,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (newEndpointErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 578,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (legacyErr: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/ProjectDetail.tsx",
      "line": 772,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/segmentation/utils/fetchAllSegmentations.ts",
      "line": 20,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (err: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/Settings.tsx",
      "line": 57,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    },
    {
      "file": "packages/frontend/src/pages/VerifyEmail.tsx",
      "line": 29,
      "category": "error-catch",
      "risk": "LOW",
      "code": "} catch (error: any) {",
      "isPriority": false
    }
  ]
}