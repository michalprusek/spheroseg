{
  "statistics": {
    "detectionDate": "2025-05-09T16:01:53.103Z",
    "formats": {
      "typescript": {
        "sources": {
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/sliceValidator.ts": {
            "lines": 75,
            "tokens": 530,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/polygonSplitter.ts": {
            "lines": 79,
            "tokens": 603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/intersectionUtils.ts": {
            "lines": 88,
            "tokens": 1055,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 261,
            "percentage": 26.14,
            "percentageTokens": 24.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/SpatialGrid.ts": {
            "lines": 62,
            "tokens": 657,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/useGeometryUtils.ts": {
            "lines": 122,
            "tokens": 1465,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/actions/usePathModification.ts": {
            "lines": 92,
            "tokens": 935,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/visualizationUtils.ts": {
            "lines": 68,
            "tokens": 409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/useSegmentationV2.ts": {
            "lines": 818,
            "tokens": 5426,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 85,
            "percentage": 1.59,
            "percentageTokens": 1.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/useSegmentationCache.ts": {
            "lines": 119,
            "tokens": 914,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/types.ts": {
            "lines": 77,
            "tokens": 514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/index.ts": {
            "lines": 37,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/geometry.worker.ts": {
            "lines": 159,
            "tokens": 1280,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 243,
            "percentage": 12.58,
            "percentageTokens": 18.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/geometry.ts": {
            "lines": 49,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/coordinates.ts": {
            "lines": 68,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/constants.ts": {
            "lines": 14,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/segmentation/api.ts": {
            "lines": 270,
            "tokens": 2131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useCoordinateTransform.ts": {
            "lines": 36,
            "tokens": 291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/coordinateUtils.ts": {
            "lines": 30,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/workers/polygonWorker.ts": {
            "lines": 75,
            "tokens": 447,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/slicePolygon.ts": {
            "lines": 17,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/polygonVisibility.ts": {
            "lines": 77,
            "tokens": 553,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/polygonSlicing.ts": {
            "lines": 30,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/metricCalculations.ts": {
            "lines": 367,
            "tokens": 3874,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/imageLoader.ts": {
            "lines": 133,
            "tokens": 879,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 107,
            "percentage": 13.53,
            "percentageTokens": 12.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/geometry.ts": {
            "lines": 66,
            "tokens": 955,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 64,
            "duplicatedTokens": 786,
            "percentage": 96.97,
            "percentageTokens": 82.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/fileSystemAccess.ts": {
            "lines": 111,
            "tokens": 686,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/fetchAllSegmentations.ts": {
            "lines": 30,
            "tokens": 278,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/directImageLoader.ts": {
            "lines": 99,
            "tokens": 780,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/databaseImageLoader.ts": {
            "lines": 158,
            "tokens": 1168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/utils/cocoConverter.ts": {
            "lines": 75,
            "tokens": 702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSlicing.ts": {
            "lines": 109,
            "tokens": 813,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationKeyboard.ts": {
            "lines": 142,
            "tokens": 950,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 85,
            "percentage": 9.15,
            "percentageTokens": 8.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationHistory.ts": {
            "lines": 49,
            "tokens": 449,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationEditor.ts": {
            "lines": 111,
            "tokens": 1029,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/usePolygonWorker.ts": {
            "lines": 196,
            "tokens": 1462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/usePolygonWasm.ts": {
            "lines": 54,
            "tokens": 434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/__mocks__/enhanced/apiClient.ts": {
            "lines": 379,
            "tokens": 2822,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/__tests__/mockApiClient.ts": {
            "lines": 8,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/geometry/slicingUtils.ts": {
            "lines": 138,
            "tokens": 1059,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 103,
            "duplicatedTokens": 941,
            "percentage": 74.64,
            "percentageTokens": 88.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/geometry/index.ts": {
            "lines": 6,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/geometry/geometryUtils.ts": {
            "lines": 359,
            "tokens": 3172,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 472,
            "duplicatedTokens": 4399,
            "percentage": 131.48,
            "percentageTokens": 138.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/shared/utils/polygonWorkerUtils.ts": {
            "lines": 84,
            "tokens": 675,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 82,
            "duplicatedTokens": 585,
            "percentage": 97.62,
            "percentageTokens": 86.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/shared/utils/polygonSlicingUtils.ts": {
            "lines": 166,
            "tokens": 1460,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 93,
            "duplicatedTokens": 838,
            "percentage": 56.02,
            "percentageTokens": 57.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/shared/utils/polygonOperationsUtils.ts": {
            "lines": 418,
            "tokens": 3628,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 816,
            "duplicatedTokens": 7210,
            "percentage": 195.22,
            "percentageTokens": 198.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/shared/utils/index.ts": {
            "lines": 73,
            "tokens": 269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/types.ts": {
            "lines": 96,
            "tokens": 1034,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation/types.ts": {
            "lines": 27,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation/polygonValidator.ts": {
            "lines": 167,
            "tokens": 1466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation/maskToPolygons.ts": {
            "lines": 264,
            "tokens": 2513,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation/index.ts": {
            "lines": 4,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation/dynamicSimplification.ts": {
            "lines": 209,
            "tokens": 1424,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 116,
            "percentage": 4.78,
            "percentageTokens": 8.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/monitoring/usePerformanceMonitoring.ts": {
            "lines": 98,
            "tokens": 722,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/monitoring/performanceMonitoring.ts": {
            "lines": 305,
            "tokens": 2220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/monitoring/index.ts": {
            "lines": 11,
            "tokens": 126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/__mocks__/apiClient.ts": {
            "lines": 86,
            "tokens": 715,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 510,
            "percentage": 62.79,
            "percentageTokens": 71.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/index.ts": {
            "lines": 6,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/index.ts": {
            "lines": 3,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__tests__/visual-regression/setupVisualRegression.ts": {
            "lines": 100,
            "tokens": 781,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 282,
            "percentage": 40,
            "percentageTokens": 36.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__tests__/visual-regression/segmentation.visual.spec.ts": {
            "lines": 202,
            "tokens": 1700,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 177,
            "percentage": 9.41,
            "percentageTokens": 10.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__tests__/performance/performanceTestingFramework.ts": {
            "lines": 310,
            "tokens": 2432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__tests__/performance/performanceTest.ts": {
            "lines": 191,
            "tokens": 1567,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__tests__/fixtures/polygonFixtures.ts": {
            "lines": 138,
            "tokens": 1120,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 177,
            "percentage": 13.77,
            "percentageTokens": 15.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/lib/monitoring/performanceMonitoring.ts": {
            "lines": 335,
            "tokens": 2264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/lib/monitoring/index.ts": {
            "lines": 9,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/lib/metrics/prometheusClient.ts": {
            "lines": 210,
            "tokens": 1449,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/db/monitoring/setupMonitoring.ts": {
            "lines": 90,
            "tokens": 716,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/db/monitoring/prometheusIntegration.ts": {
            "lines": 100,
            "tokens": 653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/db/monitoring/index.ts": {
            "lines": 561,
            "tokens": 4400,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/db/monitoring/exportPatterns.ts": {
            "lines": 266,
            "tokens": 1621,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/polygonWorkerUtils.ts": {
            "lines": 81,
            "tokens": 582,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 82,
            "duplicatedTokens": 585,
            "percentage": 101.23,
            "percentageTokens": 100.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/polygonSlicingUtils.ts": {
            "lines": 247,
            "tokens": 2196,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 33,
            "duplicatedTokens": 472,
            "percentage": 13.36,
            "percentageTokens": 21.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/polygonOperationsUtils.ts": {
            "lines": 418,
            "tokens": 3676,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 415,
            "duplicatedTokens": 3665,
            "percentage": 99.28,
            "percentageTokens": 99.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/utils/index.ts": {
            "lines": 65,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/monitoring/performanceMonitoring.ts": {
            "lines": 131,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/monitoring/metricsTypes.ts": {
            "lines": 181,
            "tokens": 891,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/translationUtils.ts": {
            "lines": 358,
            "tokens": 2712,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/toastUtils.ts": {
            "lines": 76,
            "tokens": 408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/polygonUtils.ts": {
            "lines": 829,
            "tokens": 6801,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 150,
            "duplicatedTokens": 1817,
            "percentage": 18.09,
            "percentageTokens": 26.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/performance.ts": {
            "lines": 246,
            "tokens": 2127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/pathUtils.ts": {
            "lines": 34,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/metricsService.ts": {
            "lines": 260,
            "tokens": 2127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/logger.ts": {
            "lines": 167,
            "tokens": 1011,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/imageUtils.ts": {
            "lines": 102,
            "tokens": 803,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 210,
            "percentage": 29.41,
            "percentageTokens": 26.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/imageLoader.ts": {
            "lines": 448,
            "tokens": 3206,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 103,
            "percentage": 2.68,
            "percentageTokens": 3.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/httpClient.ts": {
            "lines": 343,
            "tokens": 2199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/getAssetUrl.ts": {
            "lines": 60,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/errorUtils.ts": {
            "lines": 86,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/errorHandling.ts": {
            "lines": 384,
            "tokens": 2954,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/enhancedErrorHandling.ts": {
            "lines": 183,
            "tokens": 1341,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/dateUtils.ts": {
            "lines": 117,
            "tokens": 812,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/authInterceptor.ts": {
            "lines": 282,
            "tokens": 2054,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/accessibility.ts": {
            "lines": 282,
            "tokens": 1939,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/types/userProfile.ts": {
            "lines": 15,
            "tokens": 118,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 104,
            "percentage": 66.67,
            "percentageTokens": 88.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/types/index.ts": {
            "lines": 158,
            "tokens": 815,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/test-setup-helper.ts": {
            "lines": 198,
            "tokens": 1507,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/polygonActionTestUtils.ts": {
            "lines": 53,
            "tokens": 385,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/index.ts": {
            "lines": 83,
            "tokens": 541,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/apiClientMock.ts": {
            "lines": 269,
            "tokens": 1962,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/services/authService.ts": {
            "lines": 456,
            "tokens": 3048,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 278,
            "percentage": 10.09,
            "percentageTokens": 9.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/utils.ts": {
            "lines": 5,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/urlUtils.ts": {
            "lines": 157,
            "tokens": 1187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/svgUtils.ts": {
            "lines": 76,
            "tokens": 639,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 10,
            "duplicatedTokens": 202,
            "percentage": 13.16,
            "percentageTokens": 31.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/segmentation.ts": {
            "lines": 180,
            "tokens": 1729,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/logger.ts": {
            "lines": 113,
            "tokens": 884,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/imageProxy.ts": {
            "lines": 48,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/apiPaths.ts": {
            "lines": 83,
            "tokens": 661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/lib/apiClient.ts": {
            "lines": 252,
            "tokens": 1885,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useUserStatistics.ts": {
            "lines": 313,
            "tokens": 2242,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 87,
            "duplicatedTokens": 690,
            "percentage": 27.8,
            "percentageTokens": 30.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useUndoRedo.ts": {
            "lines": 83,
            "tokens": 782,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useTranslations.ts": {
            "lines": 103,
            "tokens": 856,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useSocketConnection.ts": {
            "lines": 136,
            "tokens": 1038,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useSegmentationUpdates.ts": {
            "lines": 122,
            "tokens": 899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useRecentActivity.ts": {
            "lines": 285,
            "tokens": 1957,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 152,
            "percentage": 6.32,
            "percentageTokens": 7.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useProjectDuplicate.ts": {
            "lines": 292,
            "tokens": 1596,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 108,
            "percentage": 4.79,
            "percentageTokens": 6.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useProjectDelete.ts": {
            "lines": 308,
            "tokens": 2028,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/usePerformanceTracking.ts": {
            "lines": 87,
            "tokens": 586,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/usePerformance.ts": {
            "lines": 161,
            "tokens": 1094,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useOnClickOutside.ts": {
            "lines": 26,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useImageResegment.ts": {
            "lines": 282,
            "tokens": 1839,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 216,
            "percentage": 9.93,
            "percentageTokens": 11.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useImageLoader.ts": {
            "lines": 180,
            "tokens": 1499,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useImageDelete.ts": {
            "lines": 221,
            "tokens": 1625,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 27,
            "duplicatedTokens": 214,
            "percentage": 12.22,
            "percentageTokens": 13.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useErrorHandler.ts": {
            "lines": 71,
            "tokens": 466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useDuplicationProgress.ts": {
            "lines": 380,
            "tokens": 2319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useDashboardProjects.ts": {
            "lines": 191,
            "tokens": 1602,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/use-toast.ts": {
            "lines": 18,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/index.ts": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/api/segmentationQueue.ts": {
            "lines": 128,
            "tokens": 850,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/api/projectImages.ts": {
            "lines": 170,
            "tokens": 1288,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 186,
            "percentage": 9.41,
            "percentageTokens": 14.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/api/imageUpload.ts": {
            "lines": 150,
            "tokens": 998,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/workers/projectDuplicationWorker.ts": {
            "lines": 473,
            "tokens": 3514,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 50,
            "duplicatedTokens": 468,
            "percentage": 10.57,
            "percentageTokens": 13.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/userValidators.ts": {
            "lines": 47,
            "tokens": 584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/segmentationValidators.ts": {
            "lines": 33,
            "tokens": 323,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/projectValidators.ts": {
            "lines": 95,
            "tokens": 830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/imageValidators.ts": {
            "lines": 58,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/authValidators.ts": {
            "lines": 73,
            "tokens": 762,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/validators/accessRequestValidators.ts": {
            "lines": 13,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/pathUtils.ts": {
            "lines": 60,
            "tokens": 275,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/logger.ts": {
            "lines": 93,
            "tokens": 616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/imageUtils.unified.ts": {
            "lines": 575,
            "tokens": 4943,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/imageUtils.ts": {
            "lines": 82,
            "tokens": 492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/fileUtils.ts": {
            "lines": 126,
            "tokens": 1061,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/utils/errors.ts": {
            "lines": 69,
            "tokens": 503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/types/sharedTypes.ts": {
            "lines": 5,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/types/geometry.ts": {
            "lines": 5,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/test-utils/mockDatabase.ts": {
            "lines": 718,
            "tokens": 6216,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 128,
            "duplicatedTokens": 1208,
            "percentage": 17.83,
            "percentageTokens": 19.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/test-utils/mockAuth.ts": {
            "lines": 625,
            "tokens": 5166,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 62,
            "duplicatedTokens": 812,
            "percentage": 9.92,
            "percentageTokens": 15.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/test-utils/index.ts": {
            "lines": 128,
            "tokens": 842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/tutorialProjectService.ts": {
            "lines": 180,
            "tokens": 1335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/tokenService.ts": {
            "lines": 701,
            "tokens": 4665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/taskQueueService.ts": {
            "lines": 609,
            "tokens": 3873,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/segmentationService.ts": {
            "lines": 57,
            "tokens": 283,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 85,
            "percentage": 31.58,
            "percentageTokens": 30.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/segmentationQueueService.ts": {
            "lines": 891,
            "tokens": 7025,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 85,
            "percentage": 2.02,
            "percentageTokens": 1.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/segmentationQueue.ts": {
            "lines": 128,
            "tokens": 899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/securityService.ts": {
            "lines": 206,
            "tokens": 1216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/prometheusMetricsService.ts": {
            "lines": 185,
            "tokens": 1603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/projectShareService.ts": {
            "lines": 338,
            "tokens": 2192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/projectService.ts": {
            "lines": 551,
            "tokens": 3337,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/projectDuplicationService.ts": {
            "lines": 459,
            "tokens": 3134,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 50,
            "duplicatedTokens": 468,
            "percentage": 10.89,
            "percentageTokens": 14.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/projectDuplicationQueueService.ts": {
            "lines": 716,
            "tokens": 4483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/mlMetricsAdapter.ts": {
            "lines": 272,
            "tokens": 2045,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/metricsService.ts": {
            "lines": 286,
            "tokens": 2500,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 67,
            "duplicatedTokens": 800,
            "percentage": 23.43,
            "percentageTokens": 32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/imageDeleteService.ts": {
            "lines": 276,
            "tokens": 1776,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/fileCleanupService.ts": {
            "lines": 170,
            "tokens": 1329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/services/emailService.ts": {
            "lines": 269,
            "tokens": 1139,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/test.ts": {
            "lines": 18,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/status.ts": {
            "lines": 208,
            "tokens": 1658,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 333,
            "percentage": 16.35,
            "percentageTokens": 20.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/segmentation.ts": {
            "lines": 601,
            "tokens": 4939,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 114,
            "duplicatedTokens": 953,
            "percentage": 18.97,
            "percentageTokens": 19.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/securityReportRoutes.ts": {
            "lines": 82,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/projects.ts": {
            "lines": 444,
            "tokens": 3315,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 150,
            "duplicatedTokens": 984,
            "percentage": 33.78,
            "percentageTokens": 29.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/projectShares.ts": {
            "lines": 52,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/projectDuplicationRoutes.ts": {
            "lines": 322,
            "tokens": 2482,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 106,
            "duplicatedTokens": 786,
            "percentage": 32.92,
            "percentageTokens": 31.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/metricsRoutes.ts": {
            "lines": 83,
            "tokens": 617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/metrics.ts": {
            "lines": 124,
            "tokens": 887,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/logs.ts": {
            "lines": 39,
            "tokens": 430,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/index.ts": {
            "lines": 48,
            "tokens": 325,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/images.ts": {
            "lines": 923,
            "tokens": 7317,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 138,
            "duplicatedTokens": 1252,
            "percentage": 14.95,
            "percentageTokens": 17.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/health.ts": {
            "lines": 67,
            "tokens": 543,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/dbMetrics.ts": {
            "lines": 178,
            "tokens": 1232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/auth.ts": {
            "lines": 436,
            "tokens": 3693,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 174,
            "percentage": 3.67,
            "percentageTokens": 4.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/accessRequests.ts": {
            "lines": 86,
            "tokens": 696,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/validationMiddleware.ts": {
            "lines": 29,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/swaggerMiddleware.ts": {
            "lines": 73,
            "tokens": 351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/socketAuthMiddleware.ts": {
            "lines": 128,
            "tokens": 930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/securityMiddleware.ts": {
            "lines": 86,
            "tokens": 680,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/securityHeadersMiddleware.ts": {
            "lines": 209,
            "tokens": 1295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/requestLogger.ts": {
            "lines": 29,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/rateLimitMiddleware.ts": {
            "lines": 197,
            "tokens": 1855,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 50,
            "duplicatedTokens": 520,
            "percentage": 25.38,
            "percentageTokens": 28.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/performanceMonitoringMiddleware.ts": {
            "lines": 43,
            "tokens": 306,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/performanceMiddleware.ts": {
            "lines": 155,
            "tokens": 1211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/metricsMiddleware.ts": {
            "lines": 147,
            "tokens": 1069,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/errorMiddleware.ts": {
            "lines": 67,
            "tokens": 509,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/errorHandler.ts": {
            "lines": 28,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/dbMonitoringMiddleware.ts": {
            "lines": 369,
            "tokens": 653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/csrfMiddleware.ts": {
            "lines": 216,
            "tokens": 1592,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/cspMiddleware.ts": {
            "lines": 154,
            "tokens": 1090,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/corsMiddleware.ts": {
            "lines": 59,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/bodyParser.ts": {
            "lines": 20,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/authorizationMiddleware.ts": {
            "lines": 76,
            "tokens": 695,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/authMiddleware.ts": {
            "lines": 244,
            "tokens": 2087,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 392,
            "percentage": 18.85,
            "percentageTokens": 18.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/db/optimized.ts": {
            "lines": 351,
            "tokens": 2697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/controllers/segmentationController.ts": {
            "lines": 217,
            "tokens": 1500,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 366,
            "percentage": 20.28,
            "percentageTokens": 24.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/controllers/securityController.ts": {
            "lines": 132,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/controllers/projectShareController.ts": {
            "lines": 193,
            "tokens": 1528,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/config/index.ts": {
            "lines": 130,
            "tokens": 1249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/user.ts": {
            "lines": 52,
            "tokens": 362,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 55,
            "duplicatedTokens": 459,
            "percentage": 105.77,
            "percentageTokens": 126.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/user.d.ts": {
            "lines": 45,
            "tokens": 355,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 45,
            "duplicatedTokens": 355,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/segmentation.ts": {
            "lines": 66,
            "tokens": 509,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 411,
            "percentage": 71.21,
            "percentageTokens": 80.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/segmentation.d.ts": {
            "lines": 58,
            "tokens": 502,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 411,
            "percentage": 81.03,
            "percentageTokens": 81.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/project.ts": {
            "lines": 32,
            "tokens": 203,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 29,
            "duplicatedTokens": 200,
            "percentage": 90.63,
            "percentageTokens": 98.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/project.d.ts": {
            "lines": 29,
            "tokens": 200,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 29,
            "duplicatedTokens": 200,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/polygon.ts": {
            "lines": 68,
            "tokens": 431,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 304,
            "percentage": 63.24,
            "percentageTokens": 70.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/polygon.d.ts": {
            "lines": 59,
            "tokens": 424,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 304,
            "percentage": 72.88,
            "percentageTokens": 71.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/index.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/index.d.ts": {
            "lines": 4,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/image.ts": {
            "lines": 54,
            "tokens": 393,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 50,
            "duplicatedTokens": 389,
            "percentage": 92.59,
            "percentageTokens": 98.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/image.d.ts": {
            "lines": 50,
            "tokens": 389,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 50,
            "duplicatedTokens": 389,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/shared/src/index.ts": {
            "lines": 45,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-setup.ts": {
            "lines": 30,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/socketClient.ts": {
            "lines": 218,
            "tokens": 1455,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/setupTests.ts": {
            "lines": 40,
            "tokens": 214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/i18n.ts": {
            "lines": 63,
            "tokens": 429,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/config.ts": {
            "lines": 40,
            "tokens": 313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/socket.ts": {
            "lines": 91,
            "tokens": 616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/server.ts": {
            "lines": 76,
            "tokens": 567,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/server.monitoring.patch.ts": {
            "lines": 32,
            "tokens": 197,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/server.direct.ts": {
            "lines": 70,
            "tokens": 607,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/vite.config.ts": {
            "lines": 153,
            "tokens": 1421,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 38849,
          "tokens": 290181,
          "sources": 227,
          "clones": 82,
          "duplicatedLines": 2183,
          "duplicatedTokens": 19456,
          "percentage": 5.62,
          "percentageTokens": 6.7,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "tsx": {
        "sources": {
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/pointAddingMode/useOptimalPath.tsx": {
            "lines": 93,
            "tokens": 846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx": {
            "lines": 128,
            "tokens": 1295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/useSegmentFinder.tsx": {
            "lines": 90,
            "tokens": 696,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/usePolygonSplitter.tsx": {
            "lines": 168,
            "tokens": 1437,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/usePolygonSimplifier.tsx": {
            "lines": 59,
            "tokens": 409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/usePointOperations.tsx": {
            "lines": 95,
            "tokens": 658,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/usePointEditor.tsx": {
            "lines": 32,
            "tokens": 200,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useTempPoints.tsx": {
            "lines": 95,
            "tokens": 809,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 106,
            "percentage": 13.68,
            "percentageTokens": 13.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useSlicingMode.tsx": {
            "lines": 116,
            "tokens": 1078,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useEditModeSwitcher.tsx": {
            "lines": 78,
            "tokens": 637,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useEditModeClickHandlers.tsx": {
            "lines": 60,
            "tokens": 533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useAutoPointAdding.tsx": {
            "lines": 74,
            "tokens": 611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/actions/usePolygonSimplifyAction.tsx": {
            "lines": 41,
            "tokens": 322,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/actions/usePolygonEditModeActions.tsx": {
            "lines": 30,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/toolbar/__tests__/toolbarTestUtils.tsx": {
            "lines": 99,
            "tokens": 729,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/statusbar/__tests__/statusBarTestUtils.tsx": {
            "lines": 80,
            "tokens": 726,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/MetricsVisualization.tsx": {
            "lines": 173,
            "tokens": 1912,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/MetricsDisplay.tsx": {
            "lines": 135,
            "tokens": 1494,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/ExcelExporter.tsx": {
            "lines": 115,
            "tokens": 1056,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/CocoTab.tsx": {
            "lines": 71,
            "tokens": 621,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/index.tsx": {
            "lines": 89,
            "tokens": 499,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/TempPointsPath.tsx": {
            "lines": 83,
            "tokens": 579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/StartPointIndicator.tsx": {
            "lines": 59,
            "tokens": 436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/PotentialEndpointIndicator.tsx": {
            "lines": 76,
            "tokens": 574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/HoveredVertexIndicator.tsx": {
            "lines": 52,
            "tokens": 377,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/HighlightedSegment.tsx": {
            "lines": 72,
            "tokens": 652,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/CursorLineConnector.tsx": {
            "lines": 67,
            "tokens": 507,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/view/useOffsetConstraints.tsx": {
            "lines": 87,
            "tokens": 636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/view/useImageCentering.tsx": {
            "lines": 95,
            "tokens": 1001,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useVertexHover.tsx": {
            "lines": 71,
            "tokens": 653,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useVertexDrag.tsx": {
            "lines": 138,
            "tokens": 1276,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useVertexDetection.tsx": {
            "lines": 57,
            "tokens": 497,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/usePolygonState.tsx": {
            "lines": 35,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/usePolygonSelection.tsx": {
            "lines": 36,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/usePolygonEditMode.tsx": {
            "lines": 115,
            "tokens": 756,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/usePolygonDetection.tsx": {
            "lines": 25,
            "tokens": 309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/usePolygonActions.tsx": {
            "lines": 115,
            "tokens": 908,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useCoordinateTransform.tsx": {
            "lines": 34,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/useCanvasDrag.tsx": {
            "lines": 62,
            "tokens": 460,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/toolbar/ToolbarV2.tsx": {
            "lines": 201,
            "tokens": 1658,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/statusbar/StatusBarV2.tsx": {
            "lines": 101,
            "tokens": 875,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/ProjectImageExport.tsx": {
            "lines": 81,
            "tokens": 776,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/layout/EditorLayout.tsx": {
            "lines": 25,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/layout/EditorContent.tsx": {
            "lines": 17,
            "tokens": 95,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/keyboard/KeyboardShortcutsHelp.tsx": {
            "lines": 87,
            "tokens": 894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/keyboard/KeyboardEventHandler.tsx": {
            "lines": 64,
            "tokens": 575,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/editor/EditorContainer.tsx": {
            "lines": 337,
            "tokens": 3109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/editor/DebugOverlay.tsx": {
            "lines": 193,
            "tokens": 1662,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/context-menu/VertexContextMenu.tsx": {
            "lines": 48,
            "tokens": 308,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/context-menu/PolygonContextMenu.tsx": {
            "lines": 100,
            "tokens": 716,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/TemporaryEditPath.tsx": {
            "lines": 147,
            "tokens": 1363,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/SlicingModeVisualizer.tsx": {
            "lines": 80,
            "tokens": 482,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/PolygonCollection.tsx": {
            "lines": 111,
            "tokens": 756,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 121,
            "percentage": 6.31,
            "percentageTokens": 16.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/PointAddingVisualizer.tsx": {
            "lines": 233,
            "tokens": 1767,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/FallbackImage.tsx": {
            "lines": 337,
            "tokens": 2871,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditorModeVisualizations.tsx": {
            "lines": 80,
            "tokens": 474,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditorModeFooter.tsx": {
            "lines": 31,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditModeBorder.tsx": {
            "lines": 43,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasZoomInfo.tsx": {
            "lines": 14,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasVertex.tsx": {
            "lines": 107,
            "tokens": 749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx": {
            "lines": 842,
            "tokens": 7562,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 344,
            "percentage": 4.39,
            "percentageTokens": 4.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasUIElements.tsx": {
            "lines": 62,
            "tokens": 354,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasSvgFilters.tsx": {
            "lines": 7,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasPolygonLayer.tsx": {
            "lines": 102,
            "tokens": 584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasPolygon.tsx": {
            "lines": 190,
            "tokens": 1495,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 121,
            "percentage": 3.68,
            "percentageTokens": 8.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasLoadingOverlay.tsx": {
            "lines": 30,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasImage.tsx": {
            "lines": 31,
            "tokens": 202,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasContent.tsx": {
            "lines": 33,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasContainer.tsx": {
            "lines": 40,
            "tokens": 256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx": {
            "lines": 616,
            "tokens": 4653,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 105,
            "duplicatedTokens": 725,
            "percentage": 17.05,
            "percentageTokens": 15.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx": {
            "lines": 323,
            "tokens": 2461,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 105,
            "duplicatedTokens": 725,
            "percentage": 32.51,
            "percentageTokens": 29.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationView.tsx": {
            "lines": 68,
            "tokens": 531,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationHistory.tsx": {
            "lines": 254,
            "tokens": 2094,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useSegmentationCore.tsx": {
            "lines": 432,
            "tokens": 3963,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/usePolygonInteraction.tsx": {
            "lines": 146,
            "tokens": 890,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/hooks/useAutoSave.tsx": {
            "lines": 122,
            "tokens": 883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/contexts/SegmentationContext.tsx": {
            "lines": 31,
            "tokens": 219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/StatusBar.tsx": {
            "lines": 121,
            "tokens": 1123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/RegionPanel.tsx": {
            "lines": 108,
            "tokens": 895,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorToolbar.tsx": {
            "lines": 231,
            "tokens": 1668,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 150,
            "percentage": 11.26,
            "percentageTokens": 8.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorHelpTips.tsx": {
            "lines": 86,
            "tokens": 740,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorHeader.tsx": {
            "lines": 217,
            "tokens": 1687,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/components/ImageSelectionCard.tsx": {
            "lines": 95,
            "tokens": 842,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/components/ExportOptionsCard.tsx": {
            "lines": 182,
            "tokens": 1612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationPage.tsx": {
            "lines": 311,
            "tokens": 2535,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationEditorV2.tsx": {
            "lines": 227,
            "tokens": 1587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationEditorRedirect.tsx": {
            "lines": 31,
            "tokens": 320,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationEditor.tsx": {
            "lines": 11,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/ProjectExport.tsx": {
            "lines": 113,
            "tokens": 798,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/UploaderOptions.tsx": {
            "lines": 75,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/UploadComponent.tsx": {
            "lines": 50,
            "tokens": 407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/FileList.tsx": {
            "lines": 107,
            "tokens": 990,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/DropZone.tsx": {
            "lines": 52,
            "tokens": 490,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/tooltip.tsx": {
            "lines": 27,
            "tokens": 197,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/toggle.tsx": {
            "lines": 42,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/toggle-group.tsx": {
            "lines": 58,
            "tokens": 433,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/textarea.tsx": {
            "lines": 23,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/tabs.tsx": {
            "lines": 52,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/table.tsx": {
            "lines": 116,
            "tokens": 753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/switch.tsx": {
            "lines": 26,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sonner.tsx": {
            "lines": 52,
            "tokens": 362,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/slider.tsx": {
            "lines": 25,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/skeleton.tsx": {
            "lines": 14,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sidebar.tsx": {
            "lines": 760,
            "tokens": 4770,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sheet.tsx": {
            "lines": 129,
            "tokens": 863,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/separator.tsx": {
            "lines": 28,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/select.tsx": {
            "lines": 157,
            "tokens": 1035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/scroll-area.tsx": {
            "lines": 45,
            "tokens": 331,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/resizable.tsx": {
            "lines": 42,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/radio-group.tsx": {
            "lines": 41,
            "tokens": 303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/progressive-image.tsx": {
            "lines": 123,
            "tokens": 998,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/progress.tsx": {
            "lines": 25,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/popover.tsx": {
            "lines": 28,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/pagination.tsx": {
            "lines": 116,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/navigation-menu.tsx": {
            "lines": 127,
            "tokens": 822,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/menubar.tsx": {
            "lines": 233,
            "tokens": 1493,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/lazy-image.tsx": {
            "lines": 137,
            "tokens": 992,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/label.tsx": {
            "lines": 23,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/input.tsx": {
            "lines": 21,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/input-otp.tsx": {
            "lines": 68,
            "tokens": 562,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/image-cropper.tsx": {
            "lines": 179,
            "tokens": 1435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/hover-card.tsx": {
            "lines": 26,
            "tokens": 196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/form.tsx": {
            "lines": 175,
            "tokens": 1233,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/form-helper-text.tsx": {
            "lines": 46,
            "tokens": 339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/file-uploader.tsx": {
            "lines": 247,
            "tokens": 2223,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 56,
            "duplicatedTokens": 474,
            "percentage": 22.67,
            "percentageTokens": 21.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/file-input.tsx": {
            "lines": 57,
            "tokens": 427,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/enhanced-file-uploader.tsx": {
            "lines": 438,
            "tokens": 4207,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 56,
            "duplicatedTokens": 474,
            "percentage": 12.79,
            "percentageTokens": 11.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/dropdown-menu.tsx": {
            "lines": 197,
            "tokens": 1270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/drawer.tsx": {
            "lines": 115,
            "tokens": 742,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/dialog.tsx": {
            "lines": 119,
            "tokens": 733,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/context-menu.tsx": {
            "lines": 197,
            "tokens": 1256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/container.tsx": {
            "lines": 18,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/command.tsx": {
            "lines": 152,
            "tokens": 1003,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/collapsible.tsx": {
            "lines": 8,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/checkbox.tsx": {
            "lines": 27,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/chart.tsx": {
            "lines": 362,
            "tokens": 2473,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/carousel.tsx": {
            "lines": 259,
            "tokens": 1745,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/card.tsx": {
            "lines": 78,
            "tokens": 553,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/calendar.tsx": {
            "lines": 63,
            "tokens": 457,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/button.tsx": {
            "lines": 57,
            "tokens": 388,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/breadcrumb.tsx": {
            "lines": 123,
            "tokens": 823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/badge.tsx": {
            "lines": 35,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/avatar.tsx": {
            "lines": 47,
            "tokens": 343,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/aspect-ratio.tsx": {
            "lines": 4,
            "tokens": 30,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/alert.tsx": {
            "lines": 58,
            "tokens": 404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/alert-dialog.tsx": {
            "lines": 138,
            "tokens": 879,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/accordion.tsx": {
            "lines": 55,
            "tokens": 431,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/UserProfileSection.tsx": {
            "lines": 257,
            "tokens": 2412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/NotificationSection.tsx": {
            "lines": 72,
            "tokens": 771,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AvatarUploader.tsx": {
            "lines": 269,
            "tokens": 1964,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AppearanceSection.tsx": {
            "lines": 116,
            "tokens": 1086,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AccountSection.tsx": {
            "lines": 54,
            "tokens": 574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ShareDialog.tsx": {
            "lines": 330,
            "tokens": 2497,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/SegmentationProgress.tsx": {
            "lines": 506,
            "tokens": 4217,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 416,
            "percentage": 9.88,
            "percentageTokens": 9.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectViewOptions.tsx": {
            "lines": 29,
            "tokens": 270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectUploaderSection.tsx": {
            "lines": 42,
            "tokens": 345,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectToolbar.tsx": {
            "lines": 199,
            "tokens": 2285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectThumbnail.tsx": {
            "lines": 34,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectMetadata.tsx": {
            "lines": 23,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectImages.tsx": {
            "lines": 161,
            "tokens": 1257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectImageProcessor.tsx": {
            "lines": 157,
            "tokens": 1426,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 28,
            "duplicatedTokens": 324,
            "percentage": 17.83,
            "percentageTokens": 22.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectImageActions.tsx": {
            "lines": 107,
            "tokens": 1119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectHeader.tsx": {
            "lines": 50,
            "tokens": 403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectDuplicationDialog.tsx": {
            "lines": 305,
            "tokens": 2101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectDialogForm.tsx": {
            "lines": 80,
            "tokens": 611,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 107,
            "percentage": 16.25,
            "percentageTokens": 17.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectCard.tsx": {
            "lines": 133,
            "tokens": 1127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectActions.tsx": {
            "lines": 196,
            "tokens": 1141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/NewProjectCardUI.tsx": {
            "lines": 36,
            "tokens": 279,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageListItem.tsx": {
            "lines": 141,
            "tokens": 1179,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 199,
            "percentage": 14.18,
            "percentageTokens": 16.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageListActions.tsx": {
            "lines": 42,
            "tokens": 287,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 157,
            "percentage": 66.67,
            "percentageTokens": 54.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageDebugger.tsx": {
            "lines": 70,
            "tokens": 654,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageDebug.tsx": {
            "lines": 23,
            "tokens": 259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageCard.tsx": {
            "lines": 138,
            "tokens": 1145,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 199,
            "percentage": 14.49,
            "percentageTokens": 17.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageActions.tsx": {
            "lines": 42,
            "tokens": 287,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 157,
            "percentage": 66.67,
            "percentageTokens": 54.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/EmptyState.tsx": {
            "lines": 27,
            "tokens": 243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DuplicationTasksList.tsx": {
            "lines": 161,
            "tokens": 1390,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DuplicationProgress.tsx": {
            "lines": 176,
            "tokens": 1411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DeleteProjectDialog.tsx": {
            "lines": 217,
            "tokens": 1349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/CreateProjectDialog.tsx": {
            "lines": 132,
            "tokens": 1031,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/UserProfileDropdown.tsx": {
            "lines": 85,
            "tokens": 808,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/NotificationsDropdown.tsx": {
            "lines": 35,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/MobileMenu.tsx": {
            "lines": 102,
            "tokens": 866,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/Logo.tsx": {
            "lines": 17,
            "tokens": 148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/diagnostics/ImageLoadingDebugger.tsx": {
            "lines": 113,
            "tokens": 1201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/UploadTab.tsx": {
            "lines": 60,
            "tokens": 608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/StatsOverview.tsx": {
            "lines": 465,
            "tokens": 3698,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/ProjectsTab.tsx": {
            "lines": 31,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/DuplicationTasksWidget.tsx": {
            "lines": 30,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/DashboardTabs.tsx": {
            "lines": 52,
            "tokens": 393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/PieChartContainer.tsx": {
            "lines": 59,
            "tokens": 463,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/MetricsChartCard.tsx": {
            "lines": 33,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/BarChartContainer.tsx": {
            "lines": 62,
            "tokens": 399,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/auth/SignInForm.tsx": {
            "lines": 51,
            "tokens": 470,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/VisuallyHidden.tsx": {
            "lines": 30,
            "tokens": 168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/SkipLink.tsx": {
            "lines": 26,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/ScreenReaderAnnouncement.tsx": {
            "lines": 45,
            "tokens": 288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/FocusTrap.tsx": {
            "lines": 99,
            "tokens": 762,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx": {
            "lines": 143,
            "tokens": 1027,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 182,
            "percentage": 15.38,
            "percentageTokens": 17.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/test-wrapper.tsx": {
            "lines": 65,
            "tokens": 435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/react-router-wrapper.tsx": {
            "lines": 59,
            "tokens": 402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/contextMocks.tsx": {
            "lines": 157,
            "tokens": 1251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/TermsOfService.tsx": {
            "lines": 64,
            "tokens": 579,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 156,
            "percentage": 25,
            "percentageTokens": 26.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/SignUp.tsx": {
            "lines": 322,
            "tokens": 2649,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 93,
            "duplicatedTokens": 656,
            "percentage": 28.88,
            "percentageTokens": 24.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/SignIn.tsx": {
            "lines": 201,
            "tokens": 1854,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 40,
            "duplicatedTokens": 265,
            "percentage": 19.9,
            "percentageTokens": 14.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Settings.tsx": {
            "lines": 154,
            "tokens": 1386,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 104,
            "percentage": 7.79,
            "percentageTokens": 7.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/RequestAccess.tsx": {
            "lines": 255,
            "tokens": 2168,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 53,
            "duplicatedTokens": 391,
            "percentage": 20.78,
            "percentageTokens": 18.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/ProjectDetail.tsx": {
            "lines": 602,
            "tokens": 5006,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 54,
            "duplicatedTokens": 530,
            "percentage": 8.97,
            "percentageTokens": 10.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Profile.tsx": {
            "lines": 535,
            "tokens": 4932,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 80,
            "duplicatedTokens": 878,
            "percentage": 14.95,
            "percentageTokens": 17.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/PrivacyPolicy.tsx": {
            "lines": 89,
            "tokens": 799,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 156,
            "percentage": 17.98,
            "percentageTokens": 19.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/NotFound.tsx": {
            "lines": 27,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/LandingPage.tsx": {
            "lines": 195,
            "tokens": 1703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Index.tsx": {
            "lines": 50,
            "tokens": 386,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/ImageTestPage.tsx": {
            "lines": 25,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/ForgotPassword.tsx": {
            "lines": 120,
            "tokens": 1073,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Documentation.tsx": {
            "lines": 248,
            "tokens": 2377,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Dashboard.tsx": {
            "lines": 161,
            "tokens": 1390,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 33,
            "duplicatedTokens": 337,
            "percentage": 20.5,
            "percentageTokens": 24.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/AboutPage.tsx": {
            "lines": 122,
            "tokens": 1234,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useProjectForm.tsx": {
            "lines": 92,
            "tokens": 856,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useProjectData.tsx": {
            "lines": 433,
            "tokens": 3483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/useImageFilter.tsx": {
            "lines": 64,
            "tokens": 621,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/hooks/use-mobile.tsx": {
            "lines": 18,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/ThemeContext.tsx": {
            "lines": 117,
            "tokens": 983,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/SocketContext.tsx": {
            "lines": 72,
            "tokens": 466,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 72,
            "duplicatedTokens": 466,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/ProfileContext.tsx": {
            "lines": 112,
            "tokens": 929,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/LanguageContext.tsx": {
            "lines": 303,
            "tokens": 2926,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/AuthContext.tsx": {
            "lines": 521,
            "tokens": 3961,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/context/SocketContext.tsx": {
            "lines": 72,
            "tokens": 466,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 72,
            "duplicatedTokens": 466,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/TranslationTester.tsx": {
            "lines": 86,
            "tokens": 676,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ThemedFooter.tsx": {
            "lines": 216,
            "tokens": 1789,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 233,
            "percentage": 10.65,
            "percentageTokens": 13.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ThemeToggle.tsx": {
            "lines": 89,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/StatsOverview.tsx": {
            "lines": 155,
            "tokens": 1601,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 81,
            "percentage": 4.52,
            "percentageTokens": 5.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/SegmentationProgress.tsx": {
            "lines": 210,
            "tokens": 1912,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/RealImageTest.tsx": {
            "lines": 130,
            "tokens": 1199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProtectedRoute.tsx": {
            "lines": 45,
            "tokens": 408,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectsList.tsx": {
            "lines": 178,
            "tokens": 1625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectSelector.tsx": {
            "lines": 69,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectListItem.tsx": {
            "lines": 70,
            "tokens": 510,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectImageGrid.tsx": {
            "lines": 116,
            "tokens": 964,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Profile.tsx": {
            "lines": 264,
            "tokens": 2227,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/NewProjectListItem.tsx": {
            "lines": 32,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/NewProject.tsx": {
            "lines": 128,
            "tokens": 1065,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 107,
            "percentage": 10.16,
            "percentageTokens": 10.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Navbar.tsx": {
            "lines": 175,
            "tokens": 1253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/LoadingFallback.tsx": {
            "lines": 12,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/LanguageSwitcher.tsx": {
            "lines": 155,
            "tokens": 1315,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageUploaderDropzone.tsx": {
            "lines": 75,
            "tokens": 571,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageUploader.tsx": {
            "lines": 290,
            "tokens": 2762,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageTest.tsx": {
            "lines": 75,
            "tokens": 658,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Hero.tsx": {
            "lines": 109,
            "tokens": 955,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 100,
            "percentage": 12.84,
            "percentageTokens": 10.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Features.tsx": {
            "lines": 196,
            "tokens": 1621,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 333,
            "percentage": 18.88,
            "percentageTokens": 20.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ErrorBoundary.tsx": {
            "lines": 228,
            "tokens": 1685,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/EmptyProjectState.tsx": {
            "lines": 74,
            "tokens": 494,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DiagnosticTest.tsx": {
            "lines": 195,
            "tokens": 1726,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DashboardHeader.tsx": {
            "lines": 34,
            "tokens": 282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DashboardActions.tsx": {
            "lines": 55,
            "tokens": 435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/BackButton.tsx": {
            "lines": 23,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/About.tsx": {
            "lines": 84,
            "tokens": 679,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/__mocks__/react-router-dom.tsx": {
            "lines": 27,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/main.tsx": {
            "lines": 64,
            "tokens": 409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/App.tsx": {
            "lines": 344,
            "tokens": 2765,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 31922,
          "tokens": 257905,
          "sources": 259,
          "clones": 44,
          "duplicatedLines": 628,
          "duplicatedTokens": 5120,
          "percentage": 1.97,
          "percentageTokens": 1.99,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "javascript": {
        "sources": {
          "packages/frontend/src/pages/segmentation/components/project/export/__tests__/visualizationTestUtils.tsx": {
            "lines": 7,
            "tokens": 208,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/MetricsVisualization.tsx": {
            "lines": 42,
            "tokens": 475,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/MetricsDisplay.tsx": {
            "lines": 24,
            "tokens": 223,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/ExcelExporter.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/export/CocoTab.tsx": {
            "lines": 13,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/index.tsx": {
            "lines": 40,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/TempPointsPath.tsx": {
            "lines": 41,
            "tokens": 319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/StartPointIndicator.tsx": {
            "lines": 26,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/PotentialEndpointIndicator.tsx": {
            "lines": 21,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/HoveredVertexIndicator.tsx": {
            "lines": 16,
            "tokens": 126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/HighlightedSegment.tsx": {
            "lines": 17,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/pointAddingVisualizer/CursorLineConnector.tsx": {
            "lines": 7,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/toolbar/ToolbarV2.tsx": {
            "lines": 125,
            "tokens": 1009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/project/ProjectImageExport.tsx": {
            "lines": 43,
            "tokens": 456,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/layout/EditorLayout.tsx": {
            "lines": 4,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/keyboard/KeyboardShortcutsHelp.tsx": {
            "lines": 33,
            "tokens": 303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/editor/EditorContainer.tsx": {
            "lines": 103,
            "tokens": 841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/editor/DebugOverlay.tsx": {
            "lines": 102,
            "tokens": 841,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/context-menu/VertexContextMenu.tsx": {
            "lines": 6,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/context-menu/PolygonContextMenu.tsx": {
            "lines": 33,
            "tokens": 277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/TemporaryEditPath.tsx": {
            "lines": 56,
            "tokens": 518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/SlicingModeVisualizer.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditorModeVisualizations.tsx": {
            "lines": 22,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditorModeFooter.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/EditModeBorder.tsx": {
            "lines": 7,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx": {
            "lines": 561,
            "tokens": 5160,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 92,
            "duplicatedTokens": 1790,
            "percentage": 16.4,
            "percentageTokens": 34.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasUIElements.tsx": {
            "lines": 27,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasPolygonLayer.tsx": {
            "lines": 26,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasPolygon.tsx": {
            "lines": 5,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasLoadingOverlay.tsx": {
            "lines": 3,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasImage.tsx": {
            "lines": 5,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasContainer.tsx": {
            "lines": 6,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx": {
            "lines": 41,
            "tokens": 553,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/contexts/SegmentationContext.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/StatusBar.tsx": {
            "lines": 36,
            "tokens": 270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/RegionPanel.tsx": {
            "lines": 45,
            "tokens": 424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorToolbar.tsx": {
            "lines": 154,
            "tokens": 1165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorHelpTips.tsx": {
            "lines": 13,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/components/EditorHeader.tsx": {
            "lines": 155,
            "tokens": 1177,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/components/ImageSelectionCard.tsx": {
            "lines": 33,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/components/ExportOptionsCard.tsx": {
            "lines": 103,
            "tokens": 950,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationPage.tsx": {
            "lines": 139,
            "tokens": 1027,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 104,
            "percentage": 12.23,
            "percentageTokens": 10.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/segmentation/SegmentationEditorV2.tsx": {
            "lines": 27,
            "tokens": 165,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 104,
            "percentage": 62.96,
            "percentageTokens": 63.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/export/ProjectExport.tsx": {
            "lines": 60,
            "tokens": 402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/UploaderOptions.tsx": {
            "lines": 11,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/FileList.tsx": {
            "lines": 46,
            "tokens": 432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/upload/DropZone.tsx": {
            "lines": 5,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/tooltip.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/toggle.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/toggle-group.tsx": {
            "lines": 28,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/textarea.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/tabs.tsx": {
            "lines": 34,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/table.tsx": {
            "lines": 91,
            "tokens": 610,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/switch.tsx": {
            "lines": 10,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sonner.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/slider.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/skeleton.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sidebar.tsx": {
            "lines": 598,
            "tokens": 3621,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/sheet.tsx": {
            "lines": 100,
            "tokens": 634,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/separator.tsx": {
            "lines": 7,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/select.tsx": {
            "lines": 123,
            "tokens": 816,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/scroll-area.tsx": {
            "lines": 27,
            "tokens": 181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/resizable.tsx": {
            "lines": 21,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/radio-group.tsx": {
            "lines": 18,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/progressive-image.tsx": {
            "lines": 12,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/progress.tsx": {
            "lines": 4,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/popover.tsx": {
            "lines": 6,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/pagination.tsx": {
            "lines": 89,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/navigation-menu.tsx": {
            "lines": 96,
            "tokens": 616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/menubar.tsx": {
            "lines": 188,
            "tokens": 1233,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 545,
            "percentage": 42.55,
            "percentageTokens": 44.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/lazy-image.tsx": {
            "lines": 23,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/label.tsx": {
            "lines": 1,
            "tokens": 16,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/input.tsx": {
            "lines": 5,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/input-otp.tsx": {
            "lines": 51,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/image-cropper.tsx": {
            "lines": 51,
            "tokens": 333,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/hover-card.tsx": {
            "lines": 6,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/form.tsx": {
            "lines": 122,
            "tokens": 913,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/form-helper-text.tsx": {
            "lines": 5,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/file-input.tsx": {
            "lines": 8,
            "tokens": 32,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/enhanced-file-uploader.tsx": {
            "lines": 0,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/dropdown-menu.tsx": {
            "lines": 149,
            "tokens": 983,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/drawer.tsx": {
            "lines": 88,
            "tokens": 588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/dialog.tsx": {
            "lines": 83,
            "tokens": 512,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/context-menu.tsx": {
            "lines": 149,
            "tokens": 969,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 545,
            "percentage": 53.69,
            "percentageTokens": 56.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/container.tsx": {
            "lines": 0,
            "tokens": 8,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/command.tsx": {
            "lines": 122,
            "tokens": 799,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/checkbox.tsx": {
            "lines": 8,
            "tokens": 35,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/chart.tsx": {
            "lines": 256,
            "tokens": 1696,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/carousel.tsx": {
            "lines": 120,
            "tokens": 755,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/card.tsx": {
            "lines": 63,
            "tokens": 436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/button.tsx": {
            "lines": 1,
            "tokens": 21,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/breadcrumb.tsx": {
            "lines": 95,
            "tokens": 627,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/badge.tsx": {
            "lines": 0,
            "tokens": 13,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/avatar.tsx": {
            "lines": 31,
            "tokens": 210,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/alert.tsx": {
            "lines": 26,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/alert-dialog.tsx": {
            "lines": 103,
            "tokens": 665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ui/accordion.tsx": {
            "lines": 36,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/UserProfileSection.tsx": {
            "lines": 97,
            "tokens": 763,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 48,
            "duplicatedTokens": 344,
            "percentage": 49.48,
            "percentageTokens": 45.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/NotificationSection.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AvatarUploader.tsx": {
            "lines": 84,
            "tokens": 538,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AppearanceSection.tsx": {
            "lines": 50,
            "tokens": 425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 34,
            "duplicatedTokens": 258,
            "percentage": 68,
            "percentageTokens": 60.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/settings/AccountSection.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ShareDialog.tsx": {
            "lines": 179,
            "tokens": 1260,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/SegmentationProgress.tsx": {
            "lines": 438,
            "tokens": 3591,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectViewOptions.tsx": {
            "lines": 3,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectUploaderSection.tsx": {
            "lines": 9,
            "tokens": 68,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectToolbar.tsx": {
            "lines": 118,
            "tokens": 1463,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 106,
            "percentage": 9.32,
            "percentageTokens": 7.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectImages.tsx": {
            "lines": 86,
            "tokens": 612,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 388,
            "percentage": 62.79,
            "percentageTokens": 63.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectImageProcessor.tsx": {
            "lines": 1,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectHeader.tsx": {
            "lines": 13,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectDuplicationDialog.tsx": {
            "lines": 116,
            "tokens": 939,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectDialogForm.tsx": {
            "lines": 32,
            "tokens": 267,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 232,
            "percentage": 84.38,
            "percentageTokens": 86.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectCard.tsx": {
            "lines": 63,
            "tokens": 551,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ProjectActions.tsx": {
            "lines": 57,
            "tokens": 424,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/NewProjectCardUI.tsx": {
            "lines": 3,
            "tokens": 53,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageListItem.tsx": {
            "lines": 54,
            "tokens": 423,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 232,
            "percentage": 59.26,
            "percentageTokens": 54.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageListActions.tsx": {
            "lines": 16,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageDebugger.tsx": {
            "lines": 36,
            "tokens": 327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageCard.tsx": {
            "lines": 94,
            "tokens": 774,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 232,
            "percentage": 34.04,
            "percentageTokens": 29.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/ImageActions.tsx": {
            "lines": 16,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/EmptyState.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DuplicationTasksList.tsx": {
            "lines": 42,
            "tokens": 349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DuplicationProgress.tsx": {
            "lines": 64,
            "tokens": 457,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/DeleteProjectDialog.tsx": {
            "lines": 62,
            "tokens": 476,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/project/CreateProjectDialog.tsx": {
            "lines": 44,
            "tokens": 354,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/UserProfileDropdown.tsx": {
            "lines": 19,
            "tokens": 237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/header/MobileMenu.tsx": {
            "lines": 57,
            "tokens": 503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/diagnostics/ImageLoadingDebugger.tsx": {
            "lines": 13,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/UploadTab.tsx": {
            "lines": 13,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/StatsOverview.tsx": {
            "lines": 390,
            "tokens": 3191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/ProjectsTab.tsx": {
            "lines": 5,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/DuplicationTasksWidget.tsx": {
            "lines": 10,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/dashboard/DashboardTabs.tsx": {
            "lines": 10,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/PieChartContainer.tsx": {
            "lines": 14,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/MetricsChartCard.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/charts/BarChartContainer.tsx": {
            "lines": 12,
            "tokens": 143,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/auth/SignInForm.tsx": {
            "lines": 11,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/VisuallyHidden.tsx": {
            "lines": 1,
            "tokens": 16,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/SkipLink.tsx": {
            "lines": 1,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/ScreenReaderAnnouncement.tsx": {
            "lines": 0,
            "tokens": 10,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/a11y/FocusTrap.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx": {
            "lines": 1,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/utils/ImageUtils.js": {
            "lines": 38,
            "tokens": 175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/test-wrapper.tsx": {
            "lines": 0,
            "tokens": 9,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/test-utils/react-router-wrapper.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/SignUp.tsx": {
            "lines": 175,
            "tokens": 1234,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 54,
            "duplicatedTokens": 290,
            "percentage": 30.86,
            "percentageTokens": 23.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/SignIn.tsx": {
            "lines": 44,
            "tokens": 360,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Settings.tsx": {
            "lines": 37,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/RequestAccess.tsx": {
            "lines": 87,
            "tokens": 711,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/ProjectDetail.tsx": {
            "lines": 144,
            "tokens": 1193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Profile.tsx": {
            "lines": 161,
            "tokens": 1753,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 100,
            "duplicatedTokens": 1050,
            "percentage": 62.11,
            "percentageTokens": 59.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/ForgotPassword.tsx": {
            "lines": 13,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/pages/Dashboard.tsx": {
            "lines": 53,
            "tokens": 466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/ThemeContext.tsx": {
            "lines": 0,
            "tokens": 7,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/SocketContext.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/ProfileContext.tsx": {
            "lines": 6,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/LanguageContext.tsx": {
            "lines": 0,
            "tokens": 11,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/contexts/AuthContext.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/context/SocketContext.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/TranslationTester.tsx": {
            "lines": 29,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ThemedFooter.tsx": {
            "lines": 84,
            "tokens": 714,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 130,
            "duplicatedTokens": 1034,
            "percentage": 154.76,
            "percentageTokens": 144.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ThemeToggle.tsx": {
            "lines": 42,
            "tokens": 357,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 34,
            "duplicatedTokens": 258,
            "percentage": 80.95,
            "percentageTokens": 72.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/StatsOverview.tsx": {
            "lines": 71,
            "tokens": 657,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/SegmentationProgress.tsx": {
            "lines": 62,
            "tokens": 534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/RealImageTest.tsx": {
            "lines": 58,
            "tokens": 612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectsList.tsx": {
            "lines": 122,
            "tokens": 1122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectSelector.tsx": {
            "lines": 10,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectListItem.tsx": {
            "lines": 19,
            "tokens": 163,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ProjectImageGrid.tsx": {
            "lines": 38,
            "tokens": 375,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Profile.tsx": {
            "lines": 141,
            "tokens": 1099,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/NewProjectListItem.tsx": {
            "lines": 0,
            "tokens": 3,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/NewProject.tsx": {
            "lines": 41,
            "tokens": 360,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 232,
            "percentage": 65.85,
            "percentageTokens": 64.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Navbar.tsx": {
            "lines": 118,
            "tokens": 788,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 66,
            "duplicatedTokens": 464,
            "percentage": 55.93,
            "percentageTokens": 58.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/LanguageSwitcher.tsx": {
            "lines": 27,
            "tokens": 248,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageUploaderDropzone.tsx": {
            "lines": 16,
            "tokens": 93,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageUploader.tsx": {
            "lines": 118,
            "tokens": 1014,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ImageTest.tsx": {
            "lines": 18,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Hero.tsx": {
            "lines": 46,
            "tokens": 416,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/Features.tsx": {
            "lines": 59,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/ErrorBoundary.tsx": {
            "lines": 105,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/EmptyProjectState.tsx": {
            "lines": 8,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DiagnosticTest.tsx": {
            "lines": 55,
            "tokens": 583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DashboardHeader.tsx": {
            "lines": 0,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/DashboardActions.tsx": {
            "lines": 11,
            "tokens": 106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 106,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/BackButton.tsx": {
            "lines": 1,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/components/About.tsx": {
            "lines": 1,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/workers/projectDuplicationWorker.js": {
            "lines": 315,
            "tokens": 2441,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/metrics.js": {
            "lines": 16,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/health.js": {
            "lines": 16,
            "tokens": 121,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 81,
            "percentage": 68.75,
            "percentageTokens": 66.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/fixed-images.js": {
            "lines": 15,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/routes/direct-endpoints.js": {
            "lines": 39,
            "tokens": 289,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 81,
            "percentage": 28.21,
            "percentageTokens": 28.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/migrations/20250508_add_project_shares.js": {
            "lines": 33,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/migrations/1748720500000_add-project-duplication-tasks.js": {
            "lines": 72,
            "tokens": 605,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/middleware/metrics.js": {
            "lines": 119,
            "tokens": 928,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/user.js": {
            "lines": 5,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/segmentation.js": {
            "lines": 14,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/project.js": {
            "lines": 5,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/polygon.js": {
            "lines": 13,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/index.js": {
            "lines": 21,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/types/src/image.js": {
            "lines": 5,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/src/App.tsx": {
            "lines": 151,
            "tokens": 1035,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 178,
            "percentage": 18.54,
            "percentageTokens": 17.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/simple-server.js": {
            "lines": 807,
            "tokens": 7346,
            "sources": 1,
            "clones": 31,
            "duplicatedLines": 1924,
            "duplicatedTokens": 17413,
            "percentage": 238.41,
            "percentageTokens": 237.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/simple-server.fix.js": {
            "lines": 807,
            "tokens": 7336,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 809,
            "duplicatedTokens": 7344,
            "percentage": 100.25,
            "percentageTokens": 100.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/simple-server-fixed.js": {
            "lines": 807,
            "tokens": 7346,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 807,
            "duplicatedTokens": 7346,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/server.js": {
            "lines": 310,
            "tokens": 2320,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/generate-placeholders.js": {
            "lines": 71,
            "tokens": 1273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/fix-validation.js": {
            "lines": 17,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/src/delete-handler.js": {
            "lines": 70,
            "tokens": 667,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 70,
            "duplicatedTokens": 667,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "jscpd-report/html/js/prism.js": {
            "lines": 15,
            "tokens": 4580,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/vite-static-fix.js": {
            "lines": 83,
            "tokens": 778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/tailwind.config.js": {
            "lines": 66,
            "tokens": 417,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/frontend/postcss.config.cjs": {
            "lines": 5,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "packages/backend/db-init.js": {
            "lines": 199,
            "tokens": 796,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 13845,
          "tokens": 116079,
          "sources": 213,
          "clones": 38,
          "duplicatedLines": 2303,
          "duplicatedTokens": 20712,
          "percentage": 16.63,
          "percentageTokens": 17.84,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "css": {
        "sources": {
          "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx": {
            "lines": 7,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 7,
          "tokens": 33,
          "sources": 1,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 84623,
      "tokens": 664198,
      "sources": 700,
      "clones": 164,
      "duplicatedLines": 5114,
      "duplicatedTokens": 45288,
      "percentage": 6.04,
      "percentageTokens": 6.82,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "javascript",
      "lines": 21,
      "fragment": ", marginBottom: '4px' }}>Create Polygon Mode</div>\n                            <div>1. Click to start creating a polygon</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Hold SHIFT to automatically add points</div>\n                        </div>\n                    ) : tempPoints.length < 3 ? (\n                        <div>\n                            <div style={{ color: '#4ade80', marginBottom: '4px' }}>Create Polygon Mode</div>\n                            <div>2. Continue clicking to add more points (at least 3 needed)</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Hold SHIFT to automatically add points • Press ESC to cancel</div>\n                        </div>\n                    ) : (\n                        <div>\n                            <div style={{ color: '#4ade80', marginBottom: '4px' }}>Create Polygon Mode</div>\n                            <div>3. Continue adding points or click near the first point to close the polygon</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Hold SHIFT to automatically add points • Press ESC to cancel</div>\n                        </div>\n                    )\n                ) : editMode === EditMode.AddPoints ? (\n                    !interactionState?.isAddingPoints ? (\n                        <div>\n                            <div style={{ color: '#60a5fa'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 303,
        "end": 323,
        "startLoc": {
          "line": 303,
          "column": 10,
          "position": 2778
        },
        "endLoc": {
          "line": 323,
          "column": 10,
          "position": 3182
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 295,
        "end": 309,
        "startLoc": {
          "line": 295,
          "column": 10,
          "position": 2641
        },
        "endLoc": {
          "line": 309,
          "column": 10,
          "position": 2896
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": ", marginBottom: '4px' }}>Add Points Mode</div>\n                            <div>Click on any vertex to start adding points</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Press ESC to cancel</div>\n                        </div>\n                    ) : (\n                        <div>\n                            <div style={{ color: '#60a5fa', marginBottom: '4px' }}>Add Points Mode</div>\n                            <div>Click to add points, then click on another vertex to complete</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Hold SHIFT to automatically add points • Press ESC to cancel</div>\n                        </div>\n                    )\n                ) : editMode === EditMode.EditVertices ? (\n                    selectedPolygonId ? (\n                        <div>\n                            <div style={{ color: '#f97316'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 323,
        "end": 337,
        "startLoc": {
          "line": 323,
          "column": 10,
          "position": 3183
        },
        "endLoc": {
          "line": 337,
          "column": 10,
          "position": 3437
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 315,
        "end": 329,
        "startLoc": {
          "line": 315,
          "column": 10,
          "position": 3026
        },
        "endLoc": {
          "line": 329,
          "column": 10,
          "position": 3289
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ", marginBottom: '4px' }}>Edit Vertices Mode</div>\n                            <div>Click and drag vertices to move them</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Hold SHIFT and click a vertex to add points • Double-click a vertex to delete it</div>\n                        </div>\n                    ) : (\n                        <div>\n                            <div style={{ color: '#f97316', marginBottom: '4px' }}>Edit Vertices Mode</div>\n                            <div style={{ fontSize: '12px', marginTop: '4px', opacity: 0.8 }}>Click on a polygon to select it for editing</div>\n                        </div>\n                    )\n                ) : editMode === EditMode.DeletePolygon ? (\n                    <div>\n                        <div style={{ color: '#ef4444'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 337,
        "end": 349,
        "startLoc": {
          "line": 337,
          "column": 10,
          "position": 3438
        },
        "endLoc": {
          "line": 349,
          "column": 10,
          "position": 3675
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 329,
        "end": 343,
        "startLoc": {
          "line": 329,
          "column": 10,
          "position": 3290
        },
        "endLoc": {
          "line": 343,
          "column": 10,
          "position": 3568
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Shift') {\n                setIsShiftPressed(true);\n            }\n        };\n\n        const handleKeyUp = (e: KeyboardEvent) => {\n            if (e.key === 'Shift') {\n                setIsShiftPressed(false);\n            }\n        };\n\n        window",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 93,
        "end": 106,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 773
        },
        "endLoc": {
          "line": 106,
          "column": 7,
          "position": 879
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/editMode/useTempPoints.tsx",
        "start": 50,
        "end": 63,
        "startLoc": {
          "line": 50,
          "column": 3,
          "position": 462
        },
        "endLoc": {
          "line": 63,
          "column": 9,
          "position": 570
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "${index}`}\n                                    cx={point.x}\n                                    cy={point.y}\n                                    r={index === 0 ? vertexRadius * 1.5 : vertexRadius} // Make first point larger\n                                    fill={index === 0 ? \"yellow\" : \"cyan\"} // Make first point a different color\n                                    stroke=\"black\"\n                                    strokeWidth={1 / transform.zoom}\n                                    vectorEffect=\"non-scaling-stroke\"\n                                    style={{ pointerEvents: 'none' }}\n                                />\n                            ))}\n\n                            {/* Draw line from start vertex to first temp point or cursor */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 760,
        "end": 772,
        "startLoc": {
          "line": 760,
          "column": 17,
          "position": 6881
        },
        "endLoc": {
          "line": 772,
          "column": 64,
          "position": 7000
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasV2.tsx",
        "start": 666,
        "end": 678,
        "startLoc": {
          "line": 666,
          "column": 13,
          "position": 6125
        },
        "endLoc": {
          "line": 678,
          "column": 42,
          "position": 6244
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": "editMode: EditMode;\n  onSelectPolygon?: (id: string) => void;\n  onDeletePolygon?: (id: string) => void;\n  onSlicePolygon?: (id: string) => void;\n  onEditPolygon?: (id: string) => void;\n  onDeleteVertex?: (polygonId: string, vertexIndex: number) => void;\n  onDuplicateVertex?: (polygonId: string, vertexIndex: number) => void;\n  relatedPolygons",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/CanvasPolygon.tsx",
        "start": 32,
        "end": 39,
        "startLoc": {
          "line": 32,
          "column": 3,
          "position": 243
        },
        "endLoc": {
          "line": 39,
          "column": 16,
          "position": 364
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/canvas/PolygonCollection.tsx",
        "start": 19,
        "end": 26,
        "startLoc": {
          "line": 19,
          "column": 3,
          "position": 163
        },
        "endLoc": {
          "line": 26,
          "column": 2,
          "position": 283
        }
      }
    },
    {
      "format": "tsx",
      "lines": 23,
      "fragment": "const mockState = {\n    imageData: {\n      id: 'test-image-id',\n      actualId: 'test-image-id',\n      name: 'test-image.jpg',\n      url: 'https://example.com/test-image.jpg',\n      width: 800,\n      height: 600,\n    },\n    segmentationData: {\n      polygons: [\n        {\n          id: 'polygon-1',\n          points: [\n            { x: 100, y: 100 },\n            { x: 200, y: 100 },\n            { x: 200, y: 200 },\n            { x: 100, y: 200 },\n          ],\n          color: '#FF0000',\n          label: 'Cell 1',\n        },\n      ]",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 17,
        "end": 39,
        "startLoc": {
          "line": 17,
          "column": 3,
          "position": 161
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 340
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 16,
        "end": 38,
        "startLoc": {
          "line": 16,
          "column": 3,
          "position": 151
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 330
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ": vi.fn(),\n    handleSave: vi.fn(),\n    undo: vi.fn(),\n    redo: vi.fn(),\n    onMouseDown: vi.fn(),\n    onMouseMove: vi.fn(),\n    onMouseUp: vi.fn(),\n    getCanvasCoordinates: vi.fn()",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 59,
        "end": 66,
        "startLoc": {
          "line": 59,
          "column": 31,
          "position": 521
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 604
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 79,
        "end": 86,
        "startLoc": {
          "line": 79,
          "column": 17,
          "position": 680
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 763
        }
      }
    },
    {
      "format": "tsx",
      "lines": 20,
      "fragment": "),\n    handleDeletePolygon: vi.fn(),\n  };\n\n  return {\n    useSegmentationV2: vi.fn(() => mockState),\n    EditMode: {\n      View: 'View',\n      EditVertices: 'EditVertices',\n      AddPolygon: 'AddPolygon',\n      DeletePolygon: 'DeletePolygon',\n      SlicePolygon: 'SlicePolygon',\n      MergePolygons: 'MergePolygons',\n    },\n    // Export the mock state so we can modify it during tests\n    _mockSegmentationState: mockState\n  };\n});\n\n// Mock useSlicing hook",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 66,
        "end": 85,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 604
        },
        "endLoc": {
          "line": 85,
          "column": 24,
          "position": 715
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 86,
        "end": 105,
        "startLoc": {
          "line": 86,
          "column": 2,
          "position": 782
        },
        "endLoc": {
          "line": 105,
          "column": 48,
          "position": 893
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ");\n\n// Mock react-router-dom's useNavigate\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom');\n  return {\n    ...actual,\n    useNavigate: vi.fn(() => vi.fn()),\n  };\n});\n\n// Mock CanvasV2 component",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 90,
        "end": 101,
        "startLoc": {
          "line": 90,
          "column": 2,
          "position": 767
        },
        "endLoc": {
          "line": 101,
          "column": 27,
          "position": 846
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 146,
        "end": 157,
        "startLoc": {
          "line": 146,
          "column": 2,
          "position": 1227
        },
        "endLoc": {
          "line": 157,
          "column": 63,
          "position": 1306
        }
      }
    },
    {
      "format": "tsx",
      "lines": 23,
      "fragment": "</div>\n  )),\n}));\n\n// Mock toast\nvi.mock('sonner', () => ({\n  toast: {\n    success: vi.fn(),\n    error: vi.fn(),\n  },\n}));\n\n// Mock react-i18next\nvi.mock('react-i18next', () => ({\n  useTranslation: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\n// Mock fetch for API calls\nglobal.fetch = vi.fn();\n\ndescribe('SegmentationEditorV2 Keyboard Interactions'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 119,
        "end": 141,
        "startLoc": {
          "line": 119,
          "column": 5,
          "position": 984
        },
        "endLoc": {
          "line": 141,
          "column": 45,
          "position": 1128
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 216,
        "end": 238,
        "startLoc": {
          "line": 216,
          "column": 5,
          "position": 1969
        },
        "endLoc": {
          "line": 238,
          "column": 44,
          "position": 2113
        }
      }
    },
    {
      "format": "tsx",
      "lines": 25,
      "fragment": ", () => {\n  beforeEach(() => {\n    // Setup all context mocks\n    setupAllContextMocks();\n    \n    // Reset mocks\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n  });\n\n  const renderComponent = () => {\n    return render(\n      <MemoryRouterWrapper>\n        <SegmentationEditorV2 \n          projectId=\"test-project-id\" \n          imageId=\"test-image-id\" \n        />\n      </MemoryRouterWrapper>\n    );\n  };\n\n  it",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/keyboard/SegmentationEditorV2KeyboardTests.tsx",
        "start": 141,
        "end": 165,
        "startLoc": {
          "line": 141,
          "column": 45,
          "position": 1129
        },
        "endLoc": {
          "line": 165,
          "column": 3,
          "position": 1258
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/__tests__/polygon/SegmentationEditorV2PolygonTests.tsx",
        "start": 238,
        "end": 262,
        "startLoc": {
          "line": 238,
          "column": 44,
          "position": 2114
        },
        "endLoc": {
          "line": 262,
          "column": 28,
          "position": 2243
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ");\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n        window.addEventListener('keyup', handleKeyUp);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n            window.removeEventListener('keyup', handleKeyUp);\n        };\n    }, [\n        editMode,\n        setEditMode",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/useSegmentationKeyboard.ts",
        "start": 117,
        "end": 130,
        "startLoc": {
          "line": 117,
          "column": 6,
          "position": 810
        },
        "endLoc": {
          "line": 130,
          "column": 12,
          "position": 895
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/segmentation/useSegmentationV2.ts",
        "start": 460,
        "end": 473,
        "startLoc": {
          "line": 460,
          "column": 5,
          "position": 3294
        },
        "endLoc": {
          "line": 473,
          "column": 18,
          "position": 3379
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ")</span>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n\n      <TooltipProvider delayDuration={300}>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-9 w-9 text-foreground/80 hover:bg-muted hover:text-foreground\"\n              onClick={onResetView}\n              data-testid=\"reset-view-button",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/components/EditorToolbar.tsx",
        "start": 104,
        "end": 117,
        "startLoc": {
          "line": 104,
          "column": 2,
          "position": 725
        },
        "endLoc": {
          "line": 117,
          "column": 18,
          "position": 800
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/components/EditorToolbar.tsx",
        "start": 85,
        "end": 98,
        "startLoc": {
          "line": 85,
          "column": 2,
          "position": 596
        },
        "endLoc": {
          "line": 98,
          "column": 16,
          "position": 671
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    const intersect = ((yi > point.y) !== (yj > point.y)) &&\n      (point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi);\n\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n};\n\n/**\n * Calculate the intersection point of two line segments\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 45,
        "end": 63,
        "startLoc": {
          "line": 45,
          "column": 3,
          "position": 339
        },
        "endLoc": {
          "line": 63,
          "column": 4,
          "position": 561
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/utils/geometry.ts",
        "start": 7,
        "end": 24,
        "startLoc": {
          "line": 7,
          "column": 5,
          "position": 47
        },
        "endLoc": {
          "line": 24,
          "column": 4,
          "position": 269
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "(points: Point[]): number => {\n  let area = 0;\n\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    area += points[i].x * points[j].y;\n    area -= points[j].x * points[i].y;\n  }\n\n  return Math.abs(area /",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 205,
        "end": 214,
        "startLoc": {
          "line": 205,
          "column": 2,
          "position": 1925
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 2059
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/intersectionUtils.ts",
        "start": 81,
        "end": 88,
        "startLoc": {
          "line": 81,
          "column": 2,
          "position": 914
        },
        "endLoc": {
          "line": 88,
          "column": 2,
          "position": 1045
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": ";\n};\n\n/**\n * Determines if a polygon is oriented clockwise\n */\nexport const isClockwise = (points: Point[]): boolean => {\n  let sum = 0;\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    sum += (points[j].x - points[i].x) * (points[j].y + points[i].y);\n  }\n  return sum > 0;\n};\n\n/**\n * Ensures a polygon's points are in clockwise order\n */\nexport const ensureClockwise = (points: Point[]): Point[] => {\n  if (!isClockwise(points)) {\n    return [...points].reverse();\n  }\n  return points;\n};",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 231,
        "end": 254,
        "startLoc": {
          "line": 231,
          "column": 10,
          "position": 2230
        },
        "endLoc": {
          "line": 254,
          "column": 2,
          "position": 2447
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/utils/geometry.ts",
        "start": 44,
        "end": 67,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 738
        },
        "endLoc": {
          "line": 67,
          "column": 2,
          "position": 955
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "export const getPointSideOfLine = (\n  point: Point,\n  lineStart: Point,\n  lineEnd: Point\n): number => {\n  return (\n    (lineEnd.x - lineStart.x) * (point.y - lineStart.y) -\n    (lineEnd.y - lineStart.y) * (point.x - lineStart.x)\n  );\n};\n\n/**\n * Calculate the intersection point of two lines\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonSlicingUtils.ts",
        "start": 17,
        "end": 30,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 74
        },
        "endLoc": {
          "line": 30,
          "column": 4,
          "position": 182
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 191,
        "end": 204,
        "startLoc": {
          "line": 191,
          "column": 1,
          "position": 1807
        },
        "endLoc": {
          "line": 204,
          "column": 4,
          "position": 1915
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ".y;\n\n  const determinant = a1 * b2 - a2 * b1;\n\n  if (determinant === 0) {\n    // Lines are parallel\n    return null;\n  }\n\n  const x = (b2 * c1 - b1 * c2) / determinant;\n  const y = (a1 * c2 - a2 * c1) / determinant;\n\n  // Check if the intersection point is on both line segments\n  const onSegment1 =\n    Math.min(line1Start",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonSlicingUtils.ts",
        "start": 45,
        "end": 59,
        "startLoc": {
          "line": 45,
          "column": 11,
          "position": 361
        },
        "endLoc": {
          "line": 59,
          "column": 11,
          "position": 487
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 75,
        "end": 89,
        "startLoc": {
          "line": 75,
          "column": 3,
          "position": 737
        },
        "endLoc": {
          "line": 89,
          "column": 3,
          "position": 863
        }
      }
    },
    {
      "format": "typescript",
      "lines": 51,
      "fragment": "export const distanceToLineSegment = (\n  point: Point,\n  lineStart: Point,\n  lineEnd: Point\n): number => {\n  const dx = lineEnd.x - lineStart.x;\n  const dy = lineEnd.y - lineStart.y;\n  \n  // Line length squared\n  const lineLengthSquared = dx * dx + dy * dy;\n  \n  if (lineLengthSquared === 0) {\n    // Line is actually a point\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) + \n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n  \n  // Calculate the projection of the point onto the line\n  const t = ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / lineLengthSquared;\n  \n  if (t < 0) {\n    // Point is beyond the lineStart end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) + \n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n  \n  if (t > 1) {\n    // Point is beyond the lineEnd end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineEnd.x, 2) + \n      Math.pow(point.y - lineEnd.y, 2)\n    );\n  }\n  \n  // Projection falls on the line segment\n  const projectionX = lineStart.x + t * dx;\n  const projectionY = lineStart.y + t * dy;\n  \n  return Math.sqrt(\n    Math.pow(point.x - projectionX, 2) + \n    Math.pow(point.y - projectionY, 2)\n  );\n};\n\n/**\n * Create a new polygon with the given points and type\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonSlicingUtils.ts",
        "start": 76,
        "end": 126,
        "startLoc": {
          "line": 76,
          "column": 1,
          "position": 695
        },
        "endLoc": {
          "line": 126,
          "column": 4,
          "position": 1172
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 139,
        "end": 190,
        "startLoc": {
          "line": 139,
          "column": 1,
          "position": 1339
        },
        "endLoc": {
          "line": 190,
          "column": 4,
          "position": 1805
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": "(polygon.points, sliceStart, sliceEnd);\n    \n    if (!result || result.length < 2) {\n      return null;\n    }\n    \n    // Create new polygon objects from the result\n    return result.map(points => ({\n      id: uuidv4(),\n      points,\n      type: polygon.type || 'external'\n    }));\n  } catch (error) {\n    console.error('Error in slicePolygon:', error);\n    return null;\n  }\n};",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonSlicingUtils.ts",
        "start": 151,
        "end": 167,
        "startLoc": {
          "line": 151,
          "column": 19,
          "position": 1333
        },
        "endLoc": {
          "line": 167,
          "column": 2,
          "position": 1460
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/slicingUtils.ts",
        "start": 123,
        "end": 139,
        "startLoc": {
          "line": 123,
          "column": 13,
          "position": 932
        },
        "endLoc": {
          "line": 139,
          "column": 2,
          "position": 1059
        }
      }
    },
    {
      "format": "typescript",
      "lines": 126,
      "fragment": ";\n}\n\n/**\n * Calculate the bounding box of a polygon\n */\nexport const calculateBoundingBox = (points: Point[]): BoundingBox => {\n  if (!points.length) {\n    return { minX: 0, minY: 0, maxX: 0, maxY: 0 };\n  }\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  for (const point of points) {\n    minX = Math.min(minX, point.x);\n    minY = Math.min(minY, point.y);\n    maxX = Math.max(maxX, point.x);\n    maxY = Math.max(maxY, point.y);\n  }\n\n  return { minX, minY, maxX, maxY };\n};\n\n/**\n * Check if a point is inside a polygon using ray casting algorithm\n */\nexport const isPointInPolygon = (point: Point, polygon: Point[]): boolean => {\n  if (polygon.length < 3) return false;\n\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    const intersect = ((yi > point.y) !== (yj > point.y)) &&\n      (point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi);\n\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n};\n\n/**\n * Calculate the intersection point of two line segments\n */\nexport const calculateIntersection = (\n  p1: Point, p2: Point, p3: Point, p4: Point\n): Point | null => {\n  // Line 1 represented as a1x + b1y = c1\n  const a1 = p2.y - p1.y;\n  const b1 = p1.x - p2.x;\n  const c1 = a1 * p1.x + b1 * p1.y;\n\n  // Line 2 represented as a2x + b2y = c2\n  const a2 = p4.y - p3.y;\n  const b2 = p3.x - p4.x;\n  const c2 = a2 * p3.x + b2 * p3.y;\n\n  const determinant = a1 * b2 - a2 * b1;\n\n  if (determinant === 0) {\n    // Lines are parallel\n    return null;\n  }\n\n  const x = (b2 * c1 - b1 * c2) / determinant;\n  const y = (a1 * c2 - a2 * c1) / determinant;\n\n  // Check if the intersection point is on both line segments\n  const onSegment1 =\n    Math.min(p1.x, p2.x) <= x && x <= Math.max(p1.x, p2.x) &&\n    Math.min(p1.y, p2.y) <= y && y <= Math.max(p1.y, p2.y);\n\n  const onSegment2 =\n    Math.min(p3.x, p4.x) <= x && x <= Math.max(p3.x, p4.x) &&\n    Math.min(p3.y, p4.y) <= y && y <= Math.max(p3.y, p4.y);\n\n  if (onSegment1 && onSegment2) {\n    return { x, y };\n  }\n\n  return null;\n};\n\n/**\n * Calculate all intersection points between a line and a polygon\n */\nexport const calculateLinePolygonIntersections = (\n  lineStart: Point,\n  lineEnd: Point,\n  polygon: Point[]\n): Point[] => {\n  const intersections: Point[] = [];\n\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    const intersection = calculateIntersection(\n      lineStart, lineEnd, polygon[i], polygon[j]\n    );\n\n    if (intersection) {\n      // Add a small epsilon to avoid duplicate points\n      const epsilon = 0.0001;\n      const isDuplicate = intersections.some(p =>\n        Math.abs(p.x - intersection.x) < epsilon &&\n        Math.abs(p.y - intersection.y) < epsilon\n      );\n\n      if (!isDuplicate) {\n        intersections.push(intersection);\n      }\n    }\n  }\n\n  return intersections;\n};\n\n/**\n * Calculate perpendicular distance from a point to a line\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 29,
        "end": 154,
        "startLoc": {
          "line": 29,
          "column": 7,
          "position": 126
        },
        "endLoc": {
          "line": 154,
          "column": 4,
          "position": 1411
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 13,
        "end": 138,
        "startLoc": {
          "line": 13,
          "column": 7,
          "position": 52
        },
        "endLoc": {
          "line": 138,
          "column": 4,
          "position": 1337
        }
      }
    },
    {
      "format": "typescript",
      "lines": 42,
      "fragment": "const lineLengthSquared = dx * dx + dy * dy;\n\n  if (lineLengthSquared === 0) {\n    // Line is actually a point\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) +\n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n\n  // Calculate the projection of the point onto the line\n  const t = ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / lineLengthSquared;\n\n  if (t < 0) {\n    // Point is beyond the lineStart end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) +\n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n\n  if (t > 1) {\n    // Point is beyond the lineEnd end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineEnd.x, 2) +\n      Math.pow(point.y - lineEnd.y, 2)\n    );\n  }\n\n  // Projection falls on the line segment\n  const projectionX = lineStart.x + t * dx;\n  const projectionY = lineStart.y + t * dy;\n\n  return Math.sqrt(\n    Math.pow(point.x - projectionX, 2) +\n    Math.pow(point.y - projectionY, 2)\n  );\n};\n\n/**\n * Slice a polygon with a line\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 164,
        "end": 205,
        "startLoc": {
          "line": 164,
          "column": 3,
          "position": 1493
        },
        "endLoc": {
          "line": 205,
          "column": 4,
          "position": 1879
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 148,
        "end": 190,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 1419
        },
        "endLoc": {
          "line": 190,
          "column": 4,
          "position": 1805
        }
      }
    },
    {
      "format": "typescript",
      "lines": 83,
      "fragment": "/**\n * Slice a polygon with a line\n */\nexport const slicePolygon = (\n  polygon: Point[],\n  sliceStart: Point,\n  sliceEnd: Point\n): Point[][] => {\n  // Find intersections\n  const intersections = calculateLinePolygonIntersections(\n    sliceStart, sliceEnd, polygon\n  );\n\n  // If we don't have exactly 2 intersections, we can't slice properly\n  if (intersections.length !== 2) {\n    return [polygon]; // Return original polygon\n  }\n\n  // Sort intersections by distance from slice start\n  intersections.sort((a, b) => {\n    const distA = Math.pow(a.x - sliceStart.x, 2) + Math.pow(a.y - sliceStart.y, 2);\n    const distB = Math.pow(b.x - sliceStart.x, 2) + Math.pow(b.y - sliceStart.y, 2);\n    return distA - distB;\n  });\n\n  // Find the polygon edges that contain the intersections\n  const intersectionEdges: number[] = [];\n\n  for (const intersection of intersections) {\n    for (let i = 0; i < polygon.length; i++) {\n      const j = (i + 1) % polygon.length;\n      const p1 = polygon[i];\n      const p2 = polygon[j];\n\n      const intersection2 = calculateIntersection(\n        sliceStart, sliceEnd, p1, p2\n      );\n\n      if (intersection2) {\n        const epsilon = 0.0001;\n        if (\n          Math.abs(intersection.x - intersection2.x) < epsilon &&\n          Math.abs(intersection.y - intersection2.y) < epsilon\n        ) {\n          intersectionEdges.push(i);\n          break;\n        }\n      }\n    }\n  }\n\n  // Create two new polygons\n  const poly1: Point[] = [];\n  const poly2: Point[] = [];\n\n  // First polygon: from edge1 to edge2 via one side\n  let currentIndex = intersectionEdges[0];\n  poly1.push(intersections[0]);\n\n  while (currentIndex !== intersectionEdges[1]) {\n    currentIndex = (currentIndex + 1) % polygon.length;\n    poly1.push(polygon[currentIndex]);\n  }\n\n  poly1.push(intersections[1]);\n\n  // Second polygon: from edge2 to edge1 via the other side\n  currentIndex = intersectionEdges[1];\n  poly2.push(intersections[1]);\n\n  while (currentIndex !== intersectionEdges[0]) {\n    currentIndex = (currentIndex + 1) % polygon.length;\n    poly2.push(polygon[currentIndex]);\n  }\n\n  poly2.push(intersections[0]);\n\n  return [poly1, poly2];\n};\n\n/**\n * Calculate polygon area using the Shoelace formula\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 203,
        "end": 285,
        "startLoc": {
          "line": 203,
          "column": 1,
          "position": 1879
        },
        "endLoc": {
          "line": 285,
          "column": 4,
          "position": 2585
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/slicingUtils.ts",
        "start": 20,
        "end": 102,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 93
        },
        "endLoc": {
          "line": 102,
          "column": 4,
          "position": 799
        }
      }
    },
    {
      "format": "typescript",
      "lines": 38,
      "fragment": ";\n};\n\n/**\n * Calculate polygon area using the Shoelace formula\n */\nexport const calculatePolygonArea = (points: Point[]): number => {\n  let area = 0;\n\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    area += points[i].x * points[j].y;\n    area -= points[j].x * points[i].y;\n  }\n\n  return Math.abs(area / 2);\n};\n\n/**\n * Calculate polygon perimeter\n */\nexport const calculatePolygonPerimeter = (points: Point[]): number => {\n  let perimeter = 0;\n\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    perimeter += Math.sqrt(\n      Math.pow(points[j].x - points[i].x, 2) +\n      Math.pow(points[j].y - points[i].y, 2)\n    );\n  }\n\n  return perimeter;\n};\n\n/**\n * Simplify a polygon using the Ramer-Douglas-Peucker algorithm\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 280,
        "end": 317,
        "startLoc": {
          "line": 280,
          "column": 2,
          "position": 2579
        },
        "endLoc": {
          "line": 317,
          "column": 4,
          "position": 2906
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 199,
        "end": 236,
        "startLoc": {
          "line": 199,
          "column": 2,
          "position": 1909
        },
        "endLoc": {
          "line": 236,
          "column": 4,
          "position": 2236
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": ";\n\n/**\n * Simplify a polygon using the Ramer-Douglas-Peucker algorithm\n */\nexport const simplifyPolygon = (\n  points: Point[],\n  epsilon: number\n): Point[] => {\n  if (points.length <= 2) return points;\n\n  // Find the point with the maximum distance\n  let maxDistance = 0;\n  let index = 0;\n\n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n\n  for (let i = 1; i < points.length - 1; i++) {\n    const distance = perpendicularDistance",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 313,
        "end": 332,
        "startLoc": {
          "line": 313,
          "column": 2,
          "position": 2903
        },
        "endLoc": {
          "line": 332,
          "column": 22,
          "position": 3059
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 321,
        "end": 340,
        "startLoc": {
          "line": 321,
          "column": 2,
          "position": 2847
        },
        "endLoc": {
          "line": 340,
          "column": 22,
          "position": 3003
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "(points[i], firstPoint, lastPoint);\n\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      index = i;\n    }\n  }\n\n  // If max distance is greater than epsilon, recursively simplify\n  if (maxDistance > epsilon) {\n    // Recursive call\n    const firstHalf = simplifyPolygon(points.slice(0, index + 1), epsilon);\n    const secondHalf = simplifyPolygon(points.slice(index), epsilon);\n\n    // Concatenate the two parts\n    return firstHalf.slice(0, -1).concat(secondHalf);\n  } else {\n    // Base case - return just the endpoints\n    return [firstPoint, lastPoint];\n  }\n};",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 332,
        "end": 352,
        "startLoc": {
          "line": 332,
          "column": 22,
          "position": 3060
        },
        "endLoc": {
          "line": 352,
          "column": 2,
          "position": 3228
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 340,
        "end": 360,
        "startLoc": {
          "line": 340,
          "column": 22,
          "position": 3004
        },
        "endLoc": {
          "line": 360,
          "column": 2,
          "position": 3172
        }
      }
    },
    {
      "format": "typescript",
      "lines": 68,
      "fragment": "};\n\n/**\n * Check if a bounding box is visible in the viewport\n * Adds a margin to ensure polygons that are partially visible are included\n */\nexport const isBoxVisible = (\n  box: BoundingBox,\n  viewport: BoundingBox,\n  margin: number = 100\n): boolean => {\n  // Add margin to viewport\n  const viewportWithMargin = {\n    minX: viewport.minX - margin,\n    minY: viewport.minY - margin,\n    maxX: viewport.maxX + margin,\n    maxY: viewport.maxY + margin\n  };\n\n  // Check if the boxes overlap\n  return !(\n    box.maxX < viewportWithMargin.minX ||\n    box.minX > viewportWithMargin.maxX ||\n    box.maxY < viewportWithMargin.minY ||\n    box.minY > viewportWithMargin.maxY\n  );\n};\n\n/**\n * Memoize bounding box calculations for polygons\n */\nexport class PolygonBoundingBoxCache {\n  private cache: Map<string, BoundingBox> = new Map();\n\n  /**\n   * Get the bounding box for a polygon, calculating it if not cached\n   */\n  getBoundingBox(polygonId: string, points: Point[]): BoundingBox {\n    if (!this.cache.has(polygonId)) {\n      this.cache.set(polygonId, calculateBoundingBox(points));\n    }\n    return this.cache.get(polygonId)!;\n  }\n\n  /**\n   * Invalidate the cache for a specific polygon\n   */\n  invalidate(polygonId: string): void {\n    this.cache.delete(polygonId);\n  }\n\n  /**\n   * Clear the entire cache\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get the number of cached bounding boxes\n   */\n  size(): number {\n    return this.cache.size;\n  }\n}\n\n// Create a singleton instance\nexport const polygonBoundingBoxCache = new PolygonBoundingBoxCache();",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 352,
        "end": 419,
        "startLoc": {
          "line": 352,
          "column": 1,
          "position": 3227
        },
        "endLoc": {
          "line": 419,
          "column": 2,
          "position": 3628
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 254,
        "end": 321,
        "startLoc": {
          "line": 254,
          "column": 1,
          "position": 2446
        },
        "endLoc": {
          "line": 321,
          "column": 2,
          "position": 2847
        }
      }
    },
    {
      "format": "javascript",
      "lines": 18,
      "fragment": "={editMode}\n        setEditMode={setEditMode}\n        onZoomIn={handleZoomIn}\n        onZoomOut={handleZoomOut}\n        onResetView={handleResetView}\n        onSave={handleSave}\n        onUndo={undo}\n        onRedo={redo}\n        onResegment={handleResegment}\n        canUndo={canUndo}\n        canRedo={canRedo}\n        isSaving={isSaving}\n        isResegmenting={isResegmenting}\n      />\n\n      <div className=\"flex-1 relative\" id=\"canvas-container\">\n        <CanvasV2\n          imageData={imageData",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/segmentation/SegmentationEditorV2.tsx",
        "start": 196,
        "end": 213,
        "startLoc": {
          "line": 196,
          "column": 9,
          "position": 1403
        },
        "endLoc": {
          "line": 213,
          "column": 10,
          "position": 1507
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/SegmentationPage.tsx",
        "start": 207,
        "end": 225,
        "startLoc": {
          "line": 207,
          "column": 9,
          "position": 1749
        },
        "endLoc": {
          "line": 225,
          "column": 12,
          "position": 1875
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "= 0;\n\n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n\n  for (let i = 1; i < points.length - 1; i++) {\n    const distance = perpendicularDistance(points[i], firstPoint, lastPoint);\n\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      maxIndex",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/lib/segmentation/dynamicSimplification.ts",
        "start": 127,
        "end": 137,
        "startLoc": {
          "line": 127,
          "column": 2,
          "position": 708
        },
        "endLoc": {
          "line": 137,
          "column": 9,
          "position": 824
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 326,
        "end": 336,
        "startLoc": {
          "line": 326,
          "column": 2,
          "position": 2981
        },
        "endLoc": {
          "line": 336,
          "column": 6,
          "position": 3097
        }
      }
    },
    {
      "format": "typescript",
      "lines": 28,
      "fragment": "mockGet.mockImplementation((url) => {\n    if (url.includes('/queue-status/project-123')) {\n      return Promise.resolve({\n        data: {\n          queueLength: 1,\n          runningTasks: ['task-1'],\n          queuedTasks: ['task-2'],\n          processingImages: [\n            { id: 'task-1', name: 'Image 1', projectId: 'project-123' }\n          ]\n        }\n      });\n    } else if (url.includes('/queue-status')) {\n      return Promise.resolve({\n        data: {\n          queueLength: 2,\n          runningTasks: ['task-1', 'task-3'],\n          queuedTasks: ['task-2', 'task-4'],\n          processingImages: [\n            { id: 'task-1', name: 'Image 1', projectId: 'project-123' },\n            { id: 'task-3', name: 'Image 3', projectId: 'project-456' }\n          ]\n        }\n      });\n    }\n    return Promise.reject(new Error('Not found'));\n  });\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/lib/__mocks__/apiClient.ts",
        "start": 48,
        "end": 75,
        "startLoc": {
          "line": 48,
          "column": 3,
          "position": 399
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 654
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/lib/__mocks__/apiClient.ts",
        "start": 11,
        "end": 39,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 84
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 339
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "]\n  );\n\n  // Convert accept string to the format expected by react-dropzone v14+\n  const acceptProp = typeof accept === 'string' \n    ? { [accept]: [] }  // Convert 'image/*' to { 'image/*': [] }\n    : accept;\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: acceptProp,\n    multiple,\n    maxSize,\n    disabled: disabled || uploadState === 'uploading',\n    onDrop: handleDrop,\n    onDragEnter: () => setDragActive(true),\n    onDragLeave: () => setDragActive(false),\n  });\n\n  // Handle file removal\n  const removeFile = (index: number) => {\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ui/enhanced-file-uploader.tsx",
        "start": 116,
        "end": 136,
        "startLoc": {
          "line": 116,
          "column": 2,
          "position": 1277
        },
        "endLoc": {
          "line": 136,
          "column": 3,
          "position": 1484
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ui/file-uploader.tsx",
        "start": 66,
        "end": 86,
        "startLoc": {
          "line": 66,
          "column": 8,
          "position": 659
        },
        "endLoc": {
          "line": 86,
          "column": 6,
          "position": 866
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "(\n        <div className=\"flex-1 min-w-0\">\n          <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n            {file.name}\n          </p>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {(file.size / 1024).toFixed(2)} kB\n          </p>\n        </div>\n      );",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ui/enhanced-file-uploader.tsx",
        "start": 237,
        "end": 246,
        "startLoc": {
          "line": 237,
          "column": 2,
          "position": 2540
        },
        "endLoc": {
          "line": 246,
          "column": 2,
          "position": 2616
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ui/file-uploader.tsx",
        "start": 170,
        "end": 179,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 1541
        },
        "endLoc": {
          "line": 179,
          "column": 2,
          "position": 1617
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "}</span>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  // File preview section\n  const renderPreview = () => {\n    if (!showPreview || files.length === 0) return null;\n\n    return (\n      <div className={cn",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ui/enhanced-file-uploader.tsx",
        "start": 331,
        "end": 344,
        "startLoc": {
          "line": 331,
          "column": 13,
          "position": 3316
        },
        "endLoc": {
          "line": 344,
          "column": 3,
          "position": 3407
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ui/file-uploader.tsx",
        "start": 123,
        "end": 136,
        "startLoc": {
          "line": 123,
          "column": 10,
          "position": 1164
        },
        "endLoc": {
          "line": 136,
          "column": 4,
          "position": 1255
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n  };\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div\n        {...getRootProps()}\n        className={getContainerClasses()}\n      >\n        <input {...getInputProps()} />\n        \n        <div className=\"p-8 text-center\">\n          <UploadCloud className=\"mx-auto h-12 w-12 text-gray-400\" />\n          <p className=\"mt-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n            {getDropzoneText",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ui/enhanced-file-uploader.tsx",
        "start": 411,
        "end": 425,
        "startLoc": {
          "line": 411,
          "column": 2,
          "position": 4028
        },
        "endLoc": {
          "line": 425,
          "column": 16,
          "position": 4128
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ui/file-uploader.tsx",
        "start": 219,
        "end": 233,
        "startLoc": {
          "line": 219,
          "column": 12,
          "position": 1986
        },
        "endLoc": {
          "line": 233,
          "column": 11,
          "position": 2086
        }
      }
    },
    {
      "format": "javascript",
      "lines": 81,
      "fragment": ")}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\"",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ui/context-menu.tsx",
        "start": 65,
        "end": 145,
        "startLoc": {
          "line": 65,
          "column": 7,
          "position": 442
        },
        "endLoc": {
          "line": 145,
          "column": 52,
          "position": 987
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ui/menubar.tsx",
        "start": 100,
        "end": 180,
        "startLoc": {
          "line": 100,
          "column": 9,
          "position": 674
        },
        "endLoc": {
          "line": 180,
          "column": 36,
          "position": 1220
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ")} {...field} value={field.value ?? ''} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             {/* Organization Field */}\n             <FormField\n              control={form.control}\n              name=\"organization\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t('profile.organization'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/settings/UserProfileSection.tsx",
        "start": 196,
        "end": 208,
        "startLoc": {
          "line": 196,
          "column": 27,
          "position": 1932
        },
        "endLoc": {
          "line": 208,
          "column": 23,
          "position": 2018
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/settings/UserProfileSection.tsx",
        "start": 182,
        "end": 194,
        "startLoc": {
          "line": 182,
          "column": 30,
          "position": 1826
        },
        "endLoc": {
          "line": 194,
          "column": 16,
          "position": 1912
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": ")} {...field} value={field.value ?? ''} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             {/* Bio Field */}\n             <FormField\n              control={form.control}\n              name=\"bio\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{t('profile.bio'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/settings/UserProfileSection.tsx",
        "start": 210,
        "end": 222,
        "startLoc": {
          "line": 210,
          "column": 34,
          "position": 2038
        },
        "endLoc": {
          "line": 222,
          "column": 14,
          "position": 2124
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/settings/UserProfileSection.tsx",
        "start": 182,
        "end": 194,
        "startLoc": {
          "line": 182,
          "column": 30,
          "position": 1826
        },
        "endLoc": {
          "line": 194,
          "column": 16,
          "position": 1912
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "console.log(`Using mock data for project ${projectId}...`);\n                setQueueStatus({\n                  queueLength: 1,\n                  runningTasks: ['123e4567-e89b-12d3-a456-426614174000'],\n                  queuedTasks: ['323e4567-e89b-12d3-a456-426614174002'],\n                  processingImages: [\n                    { id: '123e4567-e89b-12d3-a456-426614174000', name: `Sample Image for Project ${projectId}`, projectId }\n                  ]\n                });\n                return; // Exit early with mock data\n              }\n            }\n          }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/SegmentationProgress.tsx",
        "start": 170,
        "end": 182,
        "startLoc": {
          "line": 170,
          "column": 17,
          "position": 1465
        },
        "endLoc": {
          "line": 182,
          "column": 2,
          "position": 1557
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/SegmentationProgress.tsx",
        "start": 83,
        "end": 94,
        "startLoc": {
          "line": 83,
          "column": 15,
          "position": 803
        },
        "endLoc": {
          "line": 94,
          "column": 6,
          "position": 894
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "console.log('Using mock data for global queue...');\n            setQueueStatus({\n              queueLength: 2,\n              runningTasks: ['123e4567-e89b-12d3-a456-426614174000', '223e4567-e89b-12d3-a456-426614174001'],\n              queuedTasks: ['323e4567-e89b-12d3-a456-426614174002', '423e4567-e89b-12d3-a456-426614174003'],\n              processingImages: [\n                { id: '123e4567-e89b-12d3-a456-426614174000', name: 'Sample Image 1', projectId: 'project-123' },\n                { id: '223e4567-e89b-12d3-a456-426614174001', name: 'Sample Image 2', projectId: 'project-456' }\n              ]\n            });\n            return; // Exit early with mock data\n          }\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/SegmentationProgress.tsx",
        "start": 201,
        "end": 214,
        "startLoc": {
          "line": 201,
          "column": 13,
          "position": 1703
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1819
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/SegmentationProgress.tsx",
        "start": 112,
        "end": 124,
        "startLoc": {
          "line": 112,
          "column": 11,
          "position": 1025
        },
        "endLoc": {
          "line": 124,
          "column": 6,
          "position": 1140
        }
      }
    },
    {
      "format": "javascript",
      "lines": 28,
      "fragment": "}\n            />\n          ))}\n        </motion.div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {renderBatchActionsPanel()}\n      <motion.div\n        className=\"space-y-2\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        {images.map((image) => (\n          <ImageListItem\n            key={image.id}\n            image={image}\n            onDelete={onDelete}\n            onOpen={selectionMode ? undefined : onOpen}\n            onResegment={handleResegment}\n            selectionMode={selectionMode}\n            isSelected={!!selectedImages[image.id]}\n            onToggleSelection={(event) => onToggleSelection?.(image.id, event)}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/ProjectImages.tsx",
        "start": 127,
        "end": 154,
        "startLoc": {
          "line": 127,
          "column": 2,
          "position": 1031
        },
        "endLoc": {
          "line": 154,
          "column": 2,
          "position": 1225
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectImages.tsx",
        "start": 98,
        "end": 127,
        "startLoc": {
          "line": 98,
          "column": 2,
          "position": 820
        },
        "endLoc": {
          "line": 127,
          "column": 2,
          "position": 1031
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ";\n       if (axios.isAxiosError(error) && error.response) {\n          message = error.response.data?.message || message;\n       } else if (error instanceof Error) {\n         message = error.message;\n       }\n      toast.error(message);\n      setLoadingStatus",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/ProjectImageProcessor.tsx",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 25,
          "position": 852
        },
        "endLoc": {
          "line": 91,
          "column": 17,
          "position": 933
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectImageProcessor.tsx",
        "start": 46,
        "end": 53,
        "startLoc": {
          "line": 46,
          "column": 32,
          "position": 490
        },
        "endLoc": {
          "line": 53,
          "column": 15,
          "position": 571
        }
      }
    },
    {
      "format": "javascript",
      "lines": 33,
      "fragment": "}\n      layout\n    >\n      <Card\n        className={cn(\n          \"overflow-hidden border-gray-200 dark:border-gray-700 transition-all group hover:shadow-md relative\",\n          isSelected ? \"ring-2 ring-blue-500\" : \"\",\n          className\n        )}\n        onClick={(e) => {\n          if (selectionMode) {\n            onToggleSelection?.(e);\n          } else if (onOpen) {\n            onOpen(image.id);\n          }\n        }}\n      >\n        {/* Selection checkbox or actions */}\n        {selectionMode ? (\n          <div className=\"absolute top-2 right-2 z-10\">\n            <div onClick={(e) => e.stopPropagation()}>\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={(e) => onToggleSelection?.(e.nativeEvent)}\n                className=\"h-5 w-5 rounded border-gray-300\"\n              />\n            </div>\n          </div>\n        ) : (\n          <ImageActions\n            onDelete={() => onDelete(image.id)}\n            onResegment={() => ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/ImageCard.tsx",
        "start": 37,
        "end": 69,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 347
        },
        "endLoc": {
          "line": 69,
          "column": 2,
          "position": 579
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ImageListItem.tsx",
        "start": 110,
        "end": 137,
        "startLoc": {
          "line": 110,
          "column": 2,
          "position": 929
        },
        "endLoc": {
          "line": 137,
          "column": 13,
          "position": 1149
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": "onError={(e) => {\n                console.error(`Failed to load thumbnail: ${image.thumbnail_url}`);\n                try {\n                  // Try with direct URL to backend including port\n                  const backendUrl = import.meta.env.VITE_API_URL || 'http://backend:5001';\n                  const directPath = `${backendUrl}/uploads/${image.thumbnail_url?.replace(/^.*uploads\\//, '')}`;\n                  console.log(`Trying direct backend URL: ${directPath}`);\n                  e.currentTarget.src = directPath;\n                } catch (err) {\n                  // Fallback to original image if thumbnail fails\n                  if (image.url) {\n                    e.currentTarget.src = constructUrl(image.url);\n                  } else {\n                    e.currentTarget.src = '/placeholder.svg';\n                  }\n                }\n              }}\n            />\n          ) : image.url ? (\n            <img\n              ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/ImageCard.tsx",
        "start": 82,
        "end": 102,
        "startLoc": {
          "line": 82,
          "column": 15,
          "position": 657
        },
        "endLoc": {
          "line": 102,
          "column": 15,
          "position": 856
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ImageListItem.tsx",
        "start": 63,
        "end": 83,
        "startLoc": {
          "line": 63,
          "column": 13,
          "position": 533
        },
        "endLoc": {
          "line": 83,
          "column": 13,
          "position": 732
        }
      }
    },
    {
      "format": "tsx",
      "lines": 29,
      "fragment": "\"\n          size=\"icon\"\n          className=\"h-7 w-7\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onResegment();\n          }}\n          title=\"Opětovná segmentace\"\n        >\n          <RefreshCcw className=\"h-4 w-4\" />\n        </Button>\n      )}\n      <Button\n        variant=\"destructive\"\n        size=\"icon\"\n        className=\"h-7 w-7\"\n        onClick={(e) => {\n          e.stopPropagation();\n          onDelete();\n        }}\n        title=\"Smazat obrázek\"\n      >\n        <Trash2 className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default ImageActions",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/project/ImageActions.tsx",
        "start": 15,
        "end": 43,
        "startLoc": {
          "line": 15,
          "column": 5,
          "position": 129
        },
        "endLoc": {
          "line": 43,
          "column": 13,
          "position": 286
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ImageListActions.tsx",
        "start": 15,
        "end": 43,
        "startLoc": {
          "line": 15,
          "column": 8,
          "position": 129
        },
        "endLoc": {
          "line": 43,
          "column": 17,
          "position": 286
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ", async () => {\n    renderComponent();\n    \n    // Wait for projects to load\n    await waitFor(() => {\n      expect(apiClient.get).toHaveBeenCalledWith('/projects?limit=1000');\n    });\n    \n    // Create a mock file\n    const file = new File(['test'], 'test-image.jpg', { type: 'image/jpeg' });\n    \n    // Simulate file drop",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx",
        "start": 109,
        "end": 120,
        "startLoc": {
          "line": 109,
          "column": 22,
          "position": 780
        },
        "endLoc": {
          "line": 120,
          "column": 22,
          "position": 871
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/__tests__/ImageUploaderTest.tsx",
        "start": 89,
        "end": 100,
        "startLoc": {
          "line": 89,
          "column": 25,
          "position": 636
        },
        "endLoc": {
          "line": 100,
          "column": 66,
          "position": 727
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ");\n      \n      // Construct snapshot path\n      const snapshotPath = path.join(visualConfig.snapshotsDir, `${name}.png`);\n      \n      // If snapshot doesn't exist yet, save it\n      if (!fs.existsSync(snapshotPath) && process.env.UPDATE_VISUAL_SNAPSHOTS) {\n        fs.writeFileSync(snapshotPath, screenshot);\n        console.log(`Created new snapshot: ${name}`);\n        return;\n      }\n      \n      // Compare with existing snapshot\n      expect(screenshot).toMatchImageSnapshot({\n        customSnapshotIdentifier: name,\n        customSnapshotsDir: visualConfig.snapshotsDir,\n        ...visualConfig.comparisonOptions\n      });\n    };\n    \n    await",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/__tests__/visual-regression/setupVisualRegression.ts",
        "start": 69,
        "end": 89,
        "startLoc": {
          "line": 69,
          "column": 8,
          "position": 544
        },
        "endLoc": {
          "line": 89,
          "column": 6,
          "position": 685
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/__tests__/visual-regression/setupVisualRegression.ts",
        "start": 42,
        "end": 62,
        "startLoc": {
          "line": 42,
          "column": 2,
          "position": 306
        },
        "endLoc": {
          "line": 62,
          "column": 46,
          "position": 447
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "[\n    {\n      points: [\n        { x: 100, y: 100 },\n        { x: 200, y: 100 },\n        { x: 200, y: 200 },\n        { x: 100, y: 200 }\n      ],\n      closed: true,\n      color: '#FF0000'\n    },\n    {\n      points: [\n        { x: 300, y: 300 },\n        { x: 400, y: 300 },\n        { x: 350, y: 400 }\n      ],\n      closed: true,\n      color: '#00FF00'\n    },",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/__tests__/fixtures/polygonFixtures.ts",
        "start": 99,
        "end": 118,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 765
        },
        "endLoc": {
          "line": 118,
          "column": 2,
          "position": 942
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/__tests__/visual-regression/segmentation.visual.spec.ts",
        "start": 69,
        "end": 89,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 525
        },
        "endLoc": {
          "line": 89,
          "column": 2,
          "position": 704
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "import { Point } from '@spheroseg/types';\n\n/**\n * Interface for the polygon worker\n */\nexport interface PolygonWorker {\n  isReady: boolean;\n  calculatePolygonArea: (points: Point[]) => Promise<number>;\n  calculatePolygonPerimeter: (points: Point[]) => Promise<number>;\n  calculateBoundingBox: (points: Point[]) => Promise<{ x: number; y: number; width: number; height: number } | null>;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/polygonWorkerUtils.ts",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 2,
          "position": 123
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/shared/utils/polygonWorkerUtils.ts",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 17,
          "position": 124
        }
      }
    },
    {
      "format": "typescript",
      "lines": 73,
      "fragment": ">;\n}\n\n/**\n * Base function to execute polygon worker operations with error handling\n */\nexport const executePolygonWorkerOperation = async <T>(\n  points: Point[],\n  polygonWorker: PolygonWorker,\n  operation: (points: Point[]) => Promise<T>,\n  operationName: string,\n  defaultValue: T\n): Promise<T> => {\n  try {\n    if (!polygonWorker.isReady) {\n      console.warn(`Polygon worker not ready, returning ${defaultValue} for ${operationName}`);\n      return defaultValue;\n    }\n    \n    return await operation(points);\n  } catch (error) {\n    console.error(`Error in ${operationName}:`, error);\n    return defaultValue;\n  }\n};\n\n/**\n * Calculate polygon area using WebWorker\n */\nexport const calculatePolygonAreaAsync = async (\n  points: Point[],\n  polygonWorker: PolygonWorker\n): Promise<number> => {\n  return executePolygonWorkerOperation(\n    points,\n    polygonWorker,\n    (pts) => polygonWorker.calculatePolygonArea(pts),\n    'calculatePolygonAreaAsync',\n    0\n  );\n};\n\n/**\n * Calculate polygon perimeter using WebWorker\n */\nexport const calculatePolygonPerimeterAsync = async (\n  points: Point[],\n  polygonWorker: PolygonWorker\n): Promise<number> => {\n  return executePolygonWorkerOperation(\n    points,\n    polygonWorker,\n    (pts) => polygonWorker.calculatePolygonPerimeter(pts),\n    'calculatePolygonPerimeterAsync',\n    0\n  );\n};\n\n/**\n * Calculate polygon bounding box using WebWorker\n */\nexport const calculateBoundingBoxAsync = async (\n  points: Point[],\n  polygonWorker: PolygonWorker\n): Promise<{ x: number; y: number; width: number; height: number } | null> => {\n  return executePolygonWorkerOperation(\n    points,\n    polygonWorker,\n    (pts) => polygonWorker.calculateBoundingBox(pts),\n    'calculateBoundingBoxAsync',\n    null\n  );\n};",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/polygonWorkerUtils.ts",
        "start": 10,
        "end": 82,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 120
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 582
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/shared/utils/polygonWorkerUtils.ts",
        "start": 13,
        "end": 85,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 213
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 675
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": "const distA = Math.pow(a.x - sliceStart.x, 2) + Math.pow(a.y - sliceStart.y, 2);\n      const distB = Math.pow(b.x - sliceStart.x, 2) + Math.pow(b.y - sliceStart.y, 2);\n      return distA - distB;\n    });\n\n    // Use the first and last intersections for a clean cut",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/polygonSlicingUtils.ts",
        "start": 137,
        "end": 142,
        "startLoc": {
          "line": 137,
          "column": 7,
          "position": 1037
        },
        "endLoc": {
          "line": 142,
          "column": 56,
          "position": 1145
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/slicingUtils.ts",
        "start": 40,
        "end": 45,
        "startLoc": {
          "line": 40,
          "column": 5,
          "position": 219
        },
        "endLoc": {
          "line": 45,
          "column": 57,
          "position": 327
        }
      }
    },
    {
      "format": "typescript",
      "lines": 416,
      "fragment": "} from '@spheroseg/types';\n\n/**\n * Interface representing a bounding box\n */\nexport interface BoundingBox {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n}\n\n/**\n * Worker message types\n */\nexport interface WorkerRequest {\n  id: string;\n  operation: string;\n  data: any;\n}\n\nexport interface WorkerResponse {\n  id: string;\n  operation: string;\n  result: any;\n  error?: string;\n}\n\n/**\n * Calculate the bounding box of a polygon\n */\nexport const calculateBoundingBox = (points: Point[]): BoundingBox => {\n  if (!points.length) {\n    return { minX: 0, minY: 0, maxX: 0, maxY: 0 };\n  }\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  for (const point of points) {\n    minX = Math.min(minX, point.x);\n    minY = Math.min(minY, point.y);\n    maxX = Math.max(maxX, point.x);\n    maxY = Math.max(maxY, point.y);\n  }\n\n  return { minX, minY, maxX, maxY };\n};\n\n/**\n * Check if a point is inside a polygon using ray casting algorithm\n */\nexport const isPointInPolygon = (point: Point, polygon: Point[]): boolean => {\n  if (polygon.length < 3) return false;\n\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    const intersect = ((yi > point.y) !== (yj > point.y)) &&\n      (point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi);\n\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n};\n\n/**\n * Calculate the intersection point of two line segments\n */\nexport const calculateIntersection = (\n  p1: Point, p2: Point, p3: Point, p4: Point\n): Point | null => {\n  // Line 1 represented as a1x + b1y = c1\n  const a1 = p2.y - p1.y;\n  const b1 = p1.x - p2.x;\n  const c1 = a1 * p1.x + b1 * p1.y;\n\n  // Line 2 represented as a2x + b2y = c2\n  const a2 = p4.y - p3.y;\n  const b2 = p3.x - p4.x;\n  const c2 = a2 * p3.x + b2 * p3.y;\n\n  const determinant = a1 * b2 - a2 * b1;\n\n  if (determinant === 0) {\n    // Lines are parallel\n    return null;\n  }\n\n  const x = (b2 * c1 - b1 * c2) / determinant;\n  const y = (a1 * c2 - a2 * c1) / determinant;\n\n  // Check if the intersection point is on both line segments\n  const onSegment1 = \n    Math.min(p1.x, p2.x) <= x && x <= Math.max(p1.x, p2.x) &&\n    Math.min(p1.y, p2.y) <= y && y <= Math.max(p1.y, p2.y);\n  \n  const onSegment2 = \n    Math.min(p3.x, p4.x) <= x && x <= Math.max(p3.x, p4.x) &&\n    Math.min(p3.y, p4.y) <= y && y <= Math.max(p3.y, p4.y);\n\n  if (onSegment1 && onSegment2) {\n    return { x, y };\n  }\n\n  return null;\n};\n\n/**\n * Calculate all intersection points between a line and a polygon\n */\nexport const calculateLinePolygonIntersections = (\n  lineStart: Point, \n  lineEnd: Point, \n  polygon: Point[]\n): Point[] => {\n  const intersections: Point[] = [];\n\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    const intersection = calculateIntersection(\n      lineStart, lineEnd, polygon[i], polygon[j]\n    );\n\n    if (intersection) {\n      // Add a small epsilon to avoid duplicate points\n      const epsilon = 0.0001;\n      const isDuplicate = intersections.some(p => \n        Math.abs(p.x - intersection.x) < epsilon && \n        Math.abs(p.y - intersection.y) < epsilon\n      );\n\n      if (!isDuplicate) {\n        intersections.push(intersection);\n      }\n    }\n  }\n\n  return intersections;\n};\n\n/**\n * Calculate perpendicular distance from a point to a line\n */\nexport const perpendicularDistance = (\n  point: Point, \n  lineStart: Point, \n  lineEnd: Point\n): number => {\n  const dx = lineEnd.x - lineStart.x;\n  const dy = lineEnd.y - lineStart.y;\n  \n  // Line length\n  const lineLengthSquared = dx * dx + dy * dy;\n  \n  if (lineLengthSquared === 0) {\n    // Line is actually a point\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) + \n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n  \n  // Calculate the projection of the point onto the line\n  const t = ((point.x - lineStart.x) * dx + (point.y - lineStart.y) * dy) / lineLengthSquared;\n  \n  if (t < 0) {\n    // Point is beyond the lineStart end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineStart.x, 2) + \n      Math.pow(point.y - lineStart.y, 2)\n    );\n  }\n  \n  if (t > 1) {\n    // Point is beyond the lineEnd end of the line segment\n    return Math.sqrt(\n      Math.pow(point.x - lineEnd.x, 2) + \n      Math.pow(point.y - lineEnd.y, 2)\n    );\n  }\n  \n  // Projection falls on the line segment\n  const projectionX = lineStart.x + t * dx;\n  const projectionY = lineStart.y + t * dy;\n  \n  return Math.sqrt(\n    Math.pow(point.x - projectionX, 2) + \n    Math.pow(point.y - projectionY, 2)\n  );\n};\n\n/**\n * Slice a polygon with a line\n */\nexport const slicePolygon = (\n  polygon: Point[], \n  sliceStart: Point, \n  sliceEnd: Point\n): Point[][] => {\n  // Find intersections\n  const intersections = calculateLinePolygonIntersections(\n    sliceStart, sliceEnd, polygon\n  );\n\n  // If we don't have exactly 2 intersections, we can't slice properly\n  if (intersections.length !== 2) {\n    return [polygon]; // Return original polygon\n  }\n\n  // Sort intersections by distance from slice start\n  intersections.sort((a, b) => {\n    const distA = Math.pow(a.x - sliceStart.x, 2) + Math.pow(a.y - sliceStart.y, 2);\n    const distB = Math.pow(b.x - sliceStart.x, 2) + Math.pow(b.y - sliceStart.y, 2);\n    return distA - distB;\n  });\n\n  // Find the polygon edges that contain the intersections\n  const intersectionEdges: number[] = [];\n  \n  for (const intersection of intersections) {\n    for (let i = 0; i < polygon.length; i++) {\n      const j = (i + 1) % polygon.length;\n      const p1 = polygon[i];\n      const p2 = polygon[j];\n      \n      const intersection2 = calculateIntersection(\n        sliceStart, sliceEnd, p1, p2\n      );\n      \n      if (intersection2) {\n        const epsilon = 0.0001;\n        if (\n          Math.abs(intersection.x - intersection2.x) < epsilon && \n          Math.abs(intersection.y - intersection2.y) < epsilon\n        ) {\n          intersectionEdges.push(i);\n          break;\n        }\n      }\n    }\n  }\n\n  // Create two new polygons\n  const poly1: Point[] = [];\n  const poly2: Point[] = [];\n\n  // First polygon: from edge1 to edge2 via one side\n  let currentIndex = intersectionEdges[0];\n  poly1.push(intersections[0]);\n  \n  while (currentIndex !== intersectionEdges[1]) {\n    currentIndex = (currentIndex + 1) % polygon.length;\n    poly1.push(polygon[currentIndex]);\n  }\n  \n  poly1.push(intersections[1]);\n\n  // Second polygon: from edge2 to edge1 via the other side\n  currentIndex = intersectionEdges[1];\n  poly2.push(intersections[1]);\n  \n  while (currentIndex !== intersectionEdges[0]) {\n    currentIndex = (currentIndex + 1) % polygon.length;\n    poly2.push(polygon[currentIndex]);\n  }\n  \n  poly2.push(intersections[0]);\n\n  return [poly1, poly2];\n};\n\n/**\n * Calculate polygon area using the Shoelace formula\n */\nexport const calculatePolygonArea = (points: Point[]): number => {\n  let area = 0;\n  \n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    area += points[i].x * points[j].y;\n    area -= points[j].x * points[i].y;\n  }\n  \n  return Math.abs(area / 2);\n};\n\n/**\n * Calculate polygon perimeter\n */\nexport const calculatePolygonPerimeter = (points: Point[]): number => {\n  let perimeter = 0;\n  \n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    perimeter += Math.sqrt(\n      Math.pow(points[j].x - points[i].x, 2) + \n      Math.pow(points[j].y - points[i].y, 2)\n    );\n  }\n  \n  return perimeter;\n};\n\n/**\n * Simplify a polygon using the Ramer-Douglas-Peucker algorithm\n */\nexport const simplifyPolygon = (\n  points: Point[], \n  epsilon: number\n): Point[] => {\n  if (points.length <= 2) return points;\n\n  // Find the point with the maximum distance\n  let maxDistance = 0;\n  let index = 0;\n  \n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n  \n  for (let i = 1; i < points.length - 1; i++) {\n    const distance = perpendicularDistance(points[i], firstPoint, lastPoint);\n    \n    if (distance > maxDistance) {\n      maxDistance = distance;\n      index = i;\n    }\n  }\n  \n  // If max distance is greater than epsilon, recursively simplify\n  if (maxDistance > epsilon) {\n    // Recursive call\n    const firstHalf = simplifyPolygon(points.slice(0, index + 1), epsilon);\n    const secondHalf = simplifyPolygon(points.slice(index), epsilon);\n    \n    // Concatenate the two parts\n    return firstHalf.slice(0, -1).concat(secondHalf);\n  } else {\n    // Base case - return just the endpoints\n    return [firstPoint, lastPoint];\n  }\n};\n\n/**\n * Check if a bounding box is visible in the viewport\n * Adds a margin to ensure polygons that are partially visible are included\n */\nexport const isBoxVisible = (\n  box: BoundingBox,\n  viewport: BoundingBox,\n  margin: number = 100\n): boolean => {\n  // Add margin to viewport\n  const viewportWithMargin = {\n    minX: viewport.minX - margin,\n    minY: viewport.minY - margin,\n    maxX: viewport.maxX + margin,\n    maxY: viewport.maxY + margin\n  };\n\n  // Check if the boxes overlap\n  return !(\n    box.maxX < viewportWithMargin.minX ||\n    box.minX > viewportWithMargin.maxX ||\n    box.maxY < viewportWithMargin.minY ||\n    box.minY > viewportWithMargin.maxY\n  );\n};\n\n/**\n * Memoize bounding box calculations for polygons\n */\nexport class PolygonBoundingBoxCache {\n  private cache: Map<string, BoundingBox> = new Map();\n  \n  /**\n   * Get the bounding box for a polygon, calculating it if not cached\n   */\n  getBoundingBox(polygonId: string, points: Point[]): BoundingBox {\n    if (!this.cache.has(polygonId)) {\n      this.cache.set(polygonId, calculateBoundingBox(points));\n    }\n    return this.cache.get(polygonId)!;\n  }\n  \n  /**\n   * Invalidate the cache for a specific polygon\n   */\n  invalidate(polygonId: string): void {\n    this.cache.delete(polygonId);\n  }\n  \n  /**\n   * Clear the entire cache\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n  \n  /**\n   * Get the number of cached bounding boxes\n   */\n  size(): number {\n    return this.cache.size;\n  }\n}\n\n// Create a singleton instance\nexport const polygonBoundingBoxCache = new PolygonBoundingBoxCache();",
      "tokens": 0,
      "firstFile": {
        "name": "packages/shared/src/utils/polygonOperationsUtils.ts",
        "start": 4,
        "end": 419,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 11
        },
        "endLoc": {
          "line": 419,
          "column": 2,
          "position": 3676
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/shared/utils/polygonOperationsUtils.ts",
        "start": 4,
        "end": 321,
        "startLoc": {
          "line": 4,
          "column": 2,
          "position": 8
        },
        "endLoc": {
          "line": 321,
          "column": 2,
          "position": 2847
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "= (x: number, y: number, points: Point[]): boolean => {\n  let inside = false;\n  for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n    const xi = points[i].x;\n    const yi = points[i].y;\n    const xj = points[j].x;\n    const yj = points[j].y;\n\n    const intersect = ((yi > y) !== (yj > y)) &&\n                      (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) inside = !inside;\n  }\n  return inside;\n};\n\n/**\n * Check if a point is inside a polygon (alternative version taking a Point object)\n * @param point Point to check\n * @param polygon Array of points defining the polygon\n * @returns True if the point is inside the polygon, false otherwise\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 80,
        "end": 100,
        "startLoc": {
          "line": 80,
          "column": 2,
          "position": 341
        },
        "endLoc": {
          "line": 100,
          "column": 4,
          "position": 584
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/segmentation/geometry.worker.ts",
        "start": 45,
        "end": 61,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 312
        },
        "endLoc": {
          "line": 61,
          "column": 4,
          "position": 554
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": "[] = [];\n\n  for (let i = 0; i < polygon.length; i++) {\n    const j = (i + 1) % polygon.length;\n    const intersection = calculateIntersection(\n      lineStart, lineEnd, polygon[i], polygon[j]\n    );\n\n    if (intersection) {\n      // Calculate the distance from the line start to the intersection",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 200,
        "end": 209,
        "startLoc": {
          "line": 200,
          "column": 13,
          "position": 1486
        },
        "endLoc": {
          "line": 209,
          "column": 66,
          "position": 1589
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 111,
        "end": 120,
        "startLoc": {
          "line": 111,
          "column": 6,
          "position": 1121
        },
        "endLoc": {
          "line": 120,
          "column": 49,
          "position": 1224
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "// Add a small epsilon to avoid duplicate points\n      const epsilon = 0.0001;\n      const isDuplicate = intersections.some(p =>\n        Math.abs(p.x - intersection.x) < epsilon &&\n        Math.abs(p.y - intersection.y) < epsilon\n      );\n\n      if (!isDuplicate) {\n        intersections.push({",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 212,
        "end": 220,
        "startLoc": {
          "line": 212,
          "column": 7,
          "position": 1609
        },
        "endLoc": {
          "line": 220,
          "column": 2,
          "position": 1698
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 120,
        "end": 128,
        "startLoc": {
          "line": 120,
          "column": 7,
          "position": 1224
        },
        "endLoc": {
          "line": 128,
          "column": 13,
          "position": 1313
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "export const isClockwise = (points: Point[]): boolean => {\n  let sum = 0;\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    sum += (points[j].x - points[i].x) * (points[j].y + points[i].y);\n  }\n  return sum > 0;\n};\n\n/**\n * Ensure a polygon is oriented clockwise\n * @param points Array of points defining the polygon\n * @returns Array of points with clockwise orientation\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 404,
        "end": 417,
        "startLoc": {
          "line": 404,
          "column": 1,
          "position": 3451
        },
        "endLoc": {
          "line": 417,
          "column": 4,
          "position": 3596
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/utils/geometry.ts",
        "start": 50,
        "end": 61,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 746
        },
        "endLoc": {
          "line": 61,
          "column": 4,
          "position": 891
        }
      }
    },
    {
      "format": "typescript",
      "lines": 20,
      "fragment": "export const simplifyPolygon = (points: Point[], epsilon: number): Point[] => {\n  if (points.length <= 2) return points;\n\n  // Find the point with the maximum distance\n  let maxDistance = 0;\n  let index = 0;\n\n  const firstPoint = points[0];\n  const lastPoint = points[points.length - 1];\n\n  for (let i = 1; i < points.length - 1; i++) {\n    const distance = perpendicularDistance(points[i], firstPoint, lastPoint);\n\n    if (distance > maxDistance) {\n      maxDistance = distance;\n      index = i;\n    }\n  }\n\n  // If the maximum distance is greater than epsilon, recursively simplify",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 443,
        "end": 462,
        "startLoc": {
          "line": 443,
          "column": 1,
          "position": 3731
        },
        "endLoc": {
          "line": 462,
          "column": 73,
          "position": 3931
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/geometry/geometryUtils.ts",
        "start": 326,
        "end": 340,
        "startLoc": {
          "line": 326,
          "column": 1,
          "position": 2852
        },
        "endLoc": {
          "line": 340,
          "column": 65,
          "position": 3112
        }
      }
    },
    {
      "format": "typescript",
      "lines": 29,
      "fragment": "const polygon1Points: Point[] = [];\n  const polygon2Points: Point[] = [];\n\n  // First polygon\n  polygon1Points.push({ x: int1.x, y: int1.y });\n\n  let i = (int1.edgeIndex + 1) % polygonPoints.length;\n  while (i !== (int2.edgeIndex + 1) % polygonPoints.length) {\n    polygon1Points.push({ ...polygonPoints[i] });\n    i = (i + 1) % polygonPoints.length;\n  }\n\n  polygon1Points.push({ x: int2.x, y: int2.y });\n\n  // Second polygon\n  polygon2Points.push({ x: int2.x, y: int2.y });\n\n  i = (int2.edgeIndex + 1) % polygonPoints.length;\n  while (i !== (int1.edgeIndex + 1) % polygonPoints.length) {\n    polygon2Points.push({ ...polygonPoints[i] });\n    i = (i + 1) % polygonPoints.length;\n  }\n\n  polygon2Points.push({ x: int1.x, y: int1.y });\n\n  // Ensure both polygons have at least 3 points\n  if (polygon1Points.length >= 3 && polygon2Points.length >= 3) {\n    // Create new polygon objects\n    const newPolygon1 =",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 551,
        "end": 579,
        "startLoc": {
          "line": 551,
          "column": 3,
          "position": 4662
        },
        "endLoc": {
          "line": 579,
          "column": 2,
          "position": 5026
        }
      },
      "secondFile": {
        "name": "packages/shared/src/utils/polygonSlicingUtils.ts",
        "start": 147,
        "end": 175,
        "startLoc": {
          "line": 147,
          "column": 5,
          "position": 1184
        },
        "endLoc": {
          "line": 175,
          "column": 2,
          "position": 1547
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ";\n\n    img.onload = () => {\n      resolve({\n        width: img.naturalWidth,\n        height: img.naturalHeight\n      });\n    };\n\n    img.onerror = () => {\n      console.error(`Failed to load image from ${url}`);\n      resolve(null);\n    };\n\n    img.src = url;\n  });\n};\n\nexport",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/imageUtils.ts",
        "start": 34,
        "end": 52,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 257
        },
        "endLoc": {
          "line": 52,
          "column": 7,
          "position": 364
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/utils/imageLoader.ts",
        "start": 32,
        "end": 54,
        "startLoc": {
          "line": 32,
          "column": 2,
          "position": 204
        },
        "endLoc": {
          "line": 54,
          "column": 4,
          "position": 314
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "= async (url: string): Promise<boolean> => {\n  try {\n    const response = await fetch(url, {\n      method: 'HEAD',\n      cache: 'no-cache',\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      }\n    });\n    return response.ok;\n  } catch (error) {\n    logger",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/utils/imageLoader.ts",
        "start": 60,
        "end": 72,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 298
        },
        "endLoc": {
          "line": 72,
          "column": 7,
          "position": 401
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/utils/imageUtils.ts",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 2,
          "position": 45
        },
        "endLoc": {
          "line": 26,
          "column": 8,
          "position": 148
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "withCredentials: false\n          });\n\n          // Update tokens in localStorage\n          const { accessToken, refreshToken } = response.data;\n          setTokens(accessToken, refreshToken);\n\n          // Set up cookie as well\n          document.cookie = `auth_token=${accessToken}; path=/; samesite=strict; max-age=3600`;\n\n          logger.info('[authService] Development mode login successful');\n          return true;\n        } finally {\n          clearTimeout(timeoutId);\n        }\n      } catch (devError) {\n        logger.error('[authService] Failed to perform development login:', devError);\n        return false;\n      }\n    }\n\n    return false;\n  }\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/services/authService.ts",
        "start": 369,
        "end": 392,
        "startLoc": {
          "line": 369,
          "column": 13,
          "position": 2518
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 2657
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/services/authService.ts",
        "start": 275,
        "end": 299,
        "startLoc": {
          "line": 275,
          "column": 13,
          "position": 1838
        },
        "endLoc": {
          "line": 299,
          "column": 4,
          "position": 1979
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": ")}\n                        {...field}\n                        className=\"h-10 bg-gray-50 dark:bg-gray-700/50 border-gray-300 dark:border-gray-600 rounded-md\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('common.passwordConfirm'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 209,
        "end": 223,
        "startLoc": {
          "line": 209,
          "column": 27,
          "position": 1850
        },
        "endLoc": {
          "line": 223,
          "column": 25,
          "position": 1925
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 190,
        "end": 204,
        "startLoc": {
          "line": 190,
          "column": 24,
          "position": 1743
        },
        "endLoc": {
          "line": 204,
          "column": 18,
          "position": 1818
        }
      }
    },
    {
      "format": "javascript",
      "lines": 14,
      "fragment": "t('auth.passwordPlaceholder')}\n                        {...field}\n                        className=\"h-10 bg-gray-50 dark:bg-gray-700/50 border-gray-300 dark:border-gray-600 rounded-md\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"agreeTerms\"\n                render={({ field }) => (\n                  <FormItem ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 228,
        "end": 241,
        "startLoc": {
          "line": 228,
          "column": 2,
          "position": 1961
        },
        "endLoc": {
          "line": 241,
          "column": 2,
          "position": 2031
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 209,
        "end": 203,
        "startLoc": {
          "line": 209,
          "column": 2,
          "position": 1847
        },
        "endLoc": {
          "line": 203,
          "column": 2,
          "position": 1810
        }
      }
    },
    {
      "format": "tsx",
      "lines": 18,
      "fragment": ">\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 dark:from-gray-800 dark:via-gray-900 dark:to-black\">\n      {/* Header Buttons - Positioned Absolutely */}\n      <div className=\"absolute top-4 left-4\">\n        <BackButton />\n      </div>\n      <div className=\"absolute top-4 right-4\">\n        <LanguageSwitcher />\n      </div>\n\n      {/* Main Content Card - Centered */}\n      <div",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/SignIn.tsx",
        "start": 81,
        "end": 98,
        "startLoc": {
          "line": 81,
          "column": 7,
          "position": 921
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 1014
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 117,
        "end": 134,
        "startLoc": {
          "line": 117,
          "column": 5,
          "position": 1247
        },
        "endLoc": {
          "line": 134,
          "column": 5,
          "position": 1340
        }
      }
    },
    {
      "format": "tsx",
      "lines": 12,
      "fragment": ")}\n              </Button>\n            </Link>\n            <Link to=\"/request-access\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full h-10 text-base rounded-md\"\n              >\n                {t('auth.requestAccess')}\n              </Button>\n            </Link>\n            <p className=\"text-center text-sm text-gray-600 mt-3",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/SignIn.tsx",
        "start": 174,
        "end": 185,
        "startLoc": {
          "line": 174,
          "column": 14,
          "position": 1660
        },
        "endLoc": {
          "line": 185,
          "column": 39,
          "position": 1727
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 295,
        "end": 306,
        "startLoc": {
          "line": 295,
          "column": 14,
          "position": 2455
        },
        "endLoc": {
          "line": 306,
          "column": 58,
          "position": 2522
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "\">\n              {t('auth.termsAndPrivacy')}{' '}\n              <Link to=\"/terms-of-service\" className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\">\n                {t('common.termsOfService')}\n              </Link>{' '}\n              {t('requestAccess.and')}{' '}\n              <Link to=\"/privacy-policy\" className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\">\n                {t('common.privacyPolicy')}\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/SignIn.tsx",
        "start": 185,
        "end": 197,
        "startLoc": {
          "line": 185,
          "column": 39,
          "position": 1728
        },
        "endLoc": {
          "line": 197,
          "column": 4,
          "position": 1833
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 306,
        "end": 318,
        "startLoc": {
          "line": 306,
          "column": 58,
          "position": 2523
        },
        "endLoc": {
          "line": 318,
          "column": 5,
          "position": 2628
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "return (\n    <div className=\"relative min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 dark:from-gray-800 dark:via-gray-900 dark:to-black\">\n      {/* Header Buttons - Positioned Absolutely */}\n      <div className=\"absolute top-4 left-4\">\n        <BackButton />\n      </div>\n      <div className=\"absolute top-4 right-4\">\n        <LanguageSwitcher />\n      </div>\n\n      {/* Main Content Card - Centered */}\n      <Card className=\"w-full max-w-md shadow-xl bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-gray-200 dark:border-gray-700/50 rounded-lg overflow-hidden\">\n        {",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/RequestAccess.tsx",
        "start": 87,
        "end": 99,
        "startLoc": {
          "line": 87,
          "column": 3,
          "position": 861
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 943
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 123,
        "end": 135,
        "startLoc": {
          "line": 123,
          "column": 3,
          "position": 1268
        },
        "endLoc": {
          "line": 135,
          "column": 2,
          "position": 1350
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "</CardContent>\n\n        <div className=\"p-6 bg-gray-50 dark:bg-gray-800/50 border-t border-gray-100 dark:border-gray-700/50\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-gray-300 dark:border-gray-700\"></div>\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-4 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400\">{t('auth.alreadyHaveAccess'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/RequestAccess.tsx",
        "start": 210,
        "end": 218,
        "startLoc": {
          "line": 210,
          "column": 9,
          "position": 1830
        },
        "endLoc": {
          "line": 218,
          "column": 25,
          "position": 1911
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 278,
        "end": 285,
        "startLoc": {
          "line": 278,
          "column": 9,
          "position": 2312
        },
        "endLoc": {
          "line": 285,
          "column": 26,
          "position": 2392
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": ")}</span>\n            </div>\n          </div>\n\n          <div className=\"mt-6 flex flex-col gap-3\">\n            <Link to=\"/sign-in\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full h-10 text-base rounded-md\"\n              >\n                {t('auth.signIn')}\n              </Button>\n            </Link>\n            <Link to=\"/sign-up",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/RequestAccess.tsx",
        "start": 218,
        "end": 231,
        "startLoc": {
          "line": 218,
          "column": 25,
          "position": 1912
        },
        "endLoc": {
          "line": 231,
          "column": 9,
          "position": 1994
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 285,
        "end": 298,
        "startLoc": {
          "line": 285,
          "column": 26,
          "position": 2393
        },
        "endLoc": {
          "line": 298,
          "column": 16,
          "position": 2475
        }
      }
    },
    {
      "format": "tsx",
      "lines": 21,
      "fragment": ")}\n              </Button>\n            </Link>\n            <p className=\"text-center text-sm text-gray-600 dark:text-gray-400 mt-3\">\n              {t('auth.termsAndPrivacy')}{' '}\n              <Link to=\"/terms-of-service\" className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\">\n                {t('common.termsOfService')}\n              </Link>{' '}\n              {t('requestAccess.and')}{' '}\n              <Link to=\"/privacy-policy\" className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\">\n                {t('common.privacyPolicy')}\n              </Link>\n            </p>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default RequestAccess",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/RequestAccess.tsx",
        "start": 236,
        "end": 256,
        "startLoc": {
          "line": 236,
          "column": 14,
          "position": 2021
        },
        "endLoc": {
          "line": 256,
          "column": 14,
          "position": 2167
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/SignUp.tsx",
        "start": 303,
        "end": 323,
        "startLoc": {
          "line": 303,
          "column": 21,
          "position": 2502
        },
        "endLoc": {
          "line": 323,
          "column": 7,
          "position": 2648
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "= () => {\n    const selectedImageIds = Object.entries(selectedImages)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id]) => id);\n\n    if (selectedImageIds.length === 0) {\n      toast.error('No images selected');\n      return;\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 302,
        "end": 312,
        "startLoc": {
          "line": 302,
          "column": 2,
          "position": 2546
        },
        "endLoc": {
          "line": 312,
          "column": 3,
          "position": 2637
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 271,
        "end": 281,
        "startLoc": {
          "line": 271,
          "column": 2,
          "position": 2292
        },
        "endLoc": {
          "line": 281,
          "column": 6,
          "position": 2383
        }
      }
    },
    {
      "format": "tsx",
      "lines": 11,
      "fragment": "= () => {\n    const selectedImageIds = Object.entries(selectedImages)\n      .filter(([_, isSelected]) => isSelected)\n      .map(([id]) => id);\n\n    if (selectedImageIds.length === 0) {\n      toast.error('No images selected');\n      return;\n    }\n\n    // Použijeme funkci z useExportFunctions pro vytvoření ZIP souboru",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 363,
        "end": 373,
        "startLoc": {
          "line": 363,
          "column": 2,
          "position": 3041
        },
        "endLoc": {
          "line": 373,
          "column": 67,
          "position": 3132
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 271,
        "end": 281,
        "startLoc": {
          "line": 271,
          "column": 2,
          "position": 2292
        },
        "endLoc": {
          "line": 281,
          "column": 6,
          "position": 2383
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ";\n         if (axios.isAxiosError(error) && error.response) {\n            message = error.response.data?.message || message;\n         } else if (error instanceof Error) {\n           message = error.message;\n         }\n        toast.error(message);\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 417,
        "end": 424,
        "startLoc": {
          "line": 417,
          "column": 40,
          "position": 3508
        },
        "endLoc": {
          "line": 424,
          "column": 2,
          "position": 3589
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectImageProcessor.tsx",
        "start": 46,
        "end": 53,
        "startLoc": {
          "line": 46,
          "column": 32,
          "position": 490
        },
        "endLoc": {
          "line": 53,
          "column": 15,
          "position": 571
        }
      }
    },
    {
      "format": "javascript",
      "lines": 51,
      "fragment": "={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n        <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md\">\n          {t('common.pleaseLogin')}\n        </div>\n      </div>\n    );\n  }\n\n  if (!profileData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative flex justify-center items-center\">\n        {/* Background elements */}\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n          <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n        <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md text-red-500 dark:text-red-400\">\n          {t('profile.fetchError')}\n        </div>\n      </div>\n    );\n  }\n\n  const joinedDate = user.created_at ? new Date(user.created_at) : new Date();\n  const month = joinedDate.toLocaleString('default', { month: 'long' });\n  const year = joinedDate.getFullYear();\n  const formattedJoinedDate = `${month} ${year}`;\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative\">\n      {/* Background elements */}\n      <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n        <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n        <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n        <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n      </div>\n\n      <DashboardHeader />\n      <main className=\"flex-1 p-4 md:p-6 lg:p-8 relative z-10\">\n        <h1 className=\"text-2xl font-bold mb-6\">{t('profile.pageTitle')}</h1>\n        <div className=\"grid gap-8 lg:grid-cols-3\">\n          <Card className=\"lg:col-span-1\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"relative w-24 h-24 mx-auto mb-4\">\n                <Avatar className=\"w-24 h-24 border-2 border-white dark:border-gray-800 shadow-md\">\n                  {(avatarUrl || profileData.avatar_url) ? (\n                    <AvatarImage\n                      src={avatarUrl ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 367,
        "end": 417,
        "startLoc": {
          "line": 367,
          "column": 6,
          "position": 3191
        },
        "endLoc": {
          "line": 417,
          "column": 11,
          "position": 3716
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 353,
        "end": 403,
        "startLoc": {
          "line": 353,
          "column": 6,
          "position": 3059
        },
        "endLoc": {
          "line": 403,
          "column": 2,
          "position": 3560
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "interface UserProfile {\n  user_id: string;\n  username: string | null;\n  full_name: string | null;\n  title: string | null;\n  organization: string | null;\n  bio: string | null;\n  location: string | null;\n  avatar_url: string | null;\n  preferred_language: string | null;\n}\n\ninterface",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 19,
        "end": 31,
        "startLoc": {
          "line": 19,
          "column": 1,
          "position": 262
        },
        "endLoc": {
          "line": 31,
          "column": 10,
          "position": 366
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Settings.tsx",
        "start": 22,
        "end": 34,
        "startLoc": {
          "line": 22,
          "column": 1,
          "position": 253
        },
        "endLoc": {
          "line": 34,
          "column": 6,
          "position": 357
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ">\n        {/* Background elements */}\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n          <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n        <Loader2",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 349,
        "end": 356,
        "startLoc": {
          "line": 349,
          "column": 2,
          "position": 3018
        },
        "endLoc": {
          "line": 356,
          "column": 8,
          "position": 3103
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/ProjectDetail.tsx",
        "start": 449,
        "end": 457,
        "startLoc": {
          "line": 449,
          "column": 5,
          "position": 3775
        },
        "endLoc": {
          "line": 457,
          "column": 14,
          "position": 3861
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ") {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative flex justify-center items-center\">\n        {/* Background elements */}\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n          <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n        <div",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 361,
        "end": 370,
        "startLoc": {
          "line": 361,
          "column": 5,
          "position": 3132
        },
        "endLoc": {
          "line": 370,
          "column": 4,
          "position": 3235
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 347,
        "end": 457,
        "startLoc": {
          "line": 347,
          "column": 8,
          "position": 3000
        },
        "endLoc": {
          "line": 457,
          "column": 14,
          "position": 3861
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": ") {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative flex justify-center items-center\">\n        {/* Background elements */}\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n          <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n        <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md text-red-500 dark:text-red-400",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 377,
        "end": 386,
        "startLoc": {
          "line": 377,
          "column": 12,
          "position": 3276
        },
        "endLoc": {
          "line": 386,
          "column": 82,
          "position": 3384
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 347,
        "end": 370,
        "startLoc": {
          "line": 347,
          "column": 8,
          "position": 3000
        },
        "endLoc": {
          "line": 370,
          "column": 51,
          "position": 3240
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "\">\n      {/* Background elements */}\n      <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n        <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n        <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n        <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n      </div>\n\n      <DashboardHeader",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 399,
        "end": 407,
        "startLoc": {
          "line": 399,
          "column": 114,
          "position": 3516
        },
        "endLoc": {
          "line": 407,
          "column": 16,
          "position": 3603
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 349,
        "end": 457,
        "startLoc": {
          "line": 349,
          "column": 133,
          "position": 3017
        },
        "endLoc": {
          "line": 457,
          "column": 14,
          "position": 3861
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "= () => {\n  const { t } = useLanguage();\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 dark:from-gray-800 dark:via-gray-900 dark:to-black\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-12 flex-1 mt-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold mb-8\">{t('privacyPage.title'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/PrivacyPolicy.tsx",
        "start": 7,
        "end": 15,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 62
        },
        "endLoc": {
          "line": 15,
          "column": 20,
          "position": 145
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/TermsOfService.tsx",
        "start": 7,
        "end": 15,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 62
        },
        "endLoc": {
          "line": 15,
          "column": 18,
          "position": 145
        }
      }
    },
    {
      "format": "tsx",
      "lines": 9,
      "fragment": "</p>\n          </div>\n\n          <div className=\"mt-8 flex justify-between\">\n            <Button variant=\"outline\" asChild>\n              <Link to=\"/\">{t('common.backToHome')}</Link>\n            </Button>\n            <Button asChild>\n              <Link to=\"/terms-of-service",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/PrivacyPolicy.tsx",
        "start": 73,
        "end": 81,
        "startLoc": {
          "line": 73,
          "column": 2,
          "position": 675
        },
        "endLoc": {
          "line": 81,
          "column": 18,
          "position": 748
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/TermsOfService.tsx",
        "start": 48,
        "end": 56,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 455
        },
        "endLoc": {
          "line": 56,
          "column": 16,
          "position": 528
        }
      }
    },
    {
      "format": "tsx",
      "lines": 10,
      "fragment": "\">\n        {/* Background elements */}\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n          <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n          <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n        </div>\n\n        <DashboardHeader />\n        <div",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Dashboard.tsx",
        "start": 96,
        "end": 105,
        "startLoc": {
          "line": 96,
          "column": 116,
          "position": 845
        },
        "endLoc": {
          "line": 105,
          "column": 4,
          "position": 938
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Profile.tsx",
        "start": 349,
        "end": 408,
        "startLoc": {
          "line": 349,
          "column": 133,
          "position": 3017
        },
        "endLoc": {
          "line": 408,
          "column": 5,
          "position": 3609
        }
      }
    },
    {
      "format": "tsx",
      "lines": 13,
      "fragment": "return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 relative overflow-hidden\">\n      {/* Background elements */}\n      <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n        <div className=\"absolute top-1/3 left-1/4 w-64 h-64 bg-blue-200/30 dark:bg-blue-400/10 rounded-full filter blur-3xl animate-float\" />\n        <div className=\"absolute bottom-1/4 right-1/3 w-80 h-80 bg-blue-300/20 dark:bg-blue-500/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-2s\" }} />\n        <div className=\"absolute top-2/3 left-1/3 w-40 h-40 bg-blue-400/20 dark:bg-blue-600/10 rounded-full filter blur-3xl animate-float\" style={{ animationDelay: \"-4s\" }} />\n      </div>\n\n      <DashboardHeader />\n\n      <div className=\"container mx-auto px-4 py-8 relative z-10\">\n        <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between mb-8",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/pages/Dashboard.tsx",
        "start": 117,
        "end": 129,
        "startLoc": {
          "line": 117,
          "column": 3,
          "position": 1036
        },
        "endLoc": {
          "line": 129,
          "column": 75,
          "position": 1158
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/Dashboard.tsx",
        "start": 95,
        "end": 106,
        "startLoc": {
          "line": 95,
          "column": 5,
          "position": 833
        },
        "endLoc": {
          "line": 106,
          "column": 105,
          "position": 954
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n    \n    const intersect = ((yi > point.y) !== (yj > point.y)) &&\n      (point.x < (xj - xi) * (point.y - yi) / (yj - yi) + xi);\n    \n    if (intersect) {",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/lib/svgUtils.ts",
        "start": 61,
        "end": 71,
        "startLoc": {
          "line": 61,
          "column": 3,
          "position": 412
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 614
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/utils/geometry.ts",
        "start": 7,
        "end": 17,
        "startLoc": {
          "line": 7,
          "column": 5,
          "position": 47
        },
        "endLoc": {
          "line": 17,
          "column": 7,
          "position": 248
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n      \n      // Try to use cached data even if it's expired\n      if (useCache) {\n        const { data: cachedData } = loadFromCache();\n        if (cachedData) {\n          logger.info('Using expired cached activities due to fetch error'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useRecentActivity.ts",
        "start": 245,
        "end": 263,
        "startLoc": {
          "line": 245,
          "column": 35,
          "position": 1648
        },
        "endLoc": {
          "line": 263,
          "column": 53,
          "position": 1800
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 291,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 291,
          "column": 53,
          "position": 2100
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n      \n      return",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useProjectDuplicate.ts",
        "start": 263,
        "end": 277,
        "startLoc": {
          "line": 263,
          "column": 30,
          "position": 1390
        },
        "endLoc": {
          "line": 277,
          "column": 7,
          "position": 1498
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 287,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 287,
          "column": 47,
          "position": 2056
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n      \n      // Revert status if it was changed",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useImageResegment.ts",
        "start": 156,
        "end": 170,
        "startLoc": {
          "line": 156,
          "column": 35,
          "position": 849
        },
        "endLoc": {
          "line": 170,
          "column": 35,
          "position": 957
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 287,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 287,
          "column": 47,
          "position": 2056
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n      \n      // Revert statuses if they were changed",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useImageResegment.ts",
        "start": 244,
        "end": 258,
        "startLoc": {
          "line": 244,
          "column": 41,
          "position": 1557
        },
        "endLoc": {
          "line": 258,
          "column": 40,
          "position": 1665
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 287,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 287,
          "column": 47,
          "position": 2056
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n      \n      throw",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useImageDelete.ts",
        "start": 121,
        "end": 135,
        "startLoc": {
          "line": 121,
          "column": 25,
          "position": 739
        },
        "endLoc": {
          "line": 135,
          "column": 6,
          "position": 847
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 287,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 287,
          "column": 47,
          "position": 2056
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": ";\n      \n      if (axios.isAxiosError(err) && err.response) {\n        errorMessage = err.response.data?.message || errorMessage;\n      } else if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast.error(errorMessage);\n      }\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/hooks/useImageDelete.ts",
        "start": 190,
        "end": 203,
        "startLoc": {
          "line": 190,
          "column": 31,
          "position": 1395
        },
        "endLoc": {
          "line": 203,
          "column": 2,
          "position": 1501
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/hooks/useUserStatistics.ts",
        "start": 273,
        "end": 287,
        "startLoc": {
          "line": 273,
          "column": 33,
          "position": 1948
        },
        "endLoc": {
          "line": 287,
          "column": 47,
          "position": 2056
        }
      }
    },
    {
      "format": "tsx",
      "lines": 73,
      "fragment": "/**\n * SocketContext\n * \n * Provides global Socket.IO connection management for the application\n */\nimport React, { createContext, useContext, useMemo, ReactNode } from 'react';\nimport { Socket } from 'socket.io-client';\nimport useSocketConnection from '../hooks/useSocketConnection';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  error: Error | null;\n  connect: () => void;\n  disconnect: () => void;\n}\n\n// Create context with default values\nconst SocketContext = createContext<SocketContextType>({\n  socket: null,\n  isConnected: false,\n  error: null,\n  connect: () => {},\n  disconnect: () => {},\n});\n\ninterface SocketProviderProps {\n  children: ReactNode;\n  autoConnect?: boolean;\n}\n\n/**\n * Socket context provider component\n */\nexport const SocketProvider: React.FC<SocketProviderProps> = ({ \n  children, \n  autoConnect = true \n}) => {\n  const { socket, isConnected, error, connect, disconnect } = useSocketConnection({\n    autoConnect,\n    reconnect: true,\n  });\n\n  // Memoize context value to prevent unnecessary re-renders\n  const value = useMemo(() => ({\n    socket,\n    isConnected,\n    error,\n    connect,\n    disconnect,\n  }), [socket, isConnected, error, connect, disconnect]);\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n/**\n * Custom hook to use the socket context\n */\nexport const useSocket = (): SocketContextType => {\n  const context = useContext(SocketContext);\n  \n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  \n  return context;\n};\n\nexport default SocketContext;",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/context/SocketContext.tsx",
        "start": 1,
        "end": 73,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 73,
          "column": 2,
          "position": 466
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/contexts/SocketContext.tsx",
        "start": 1,
        "end": 73,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 73,
          "column": 2,
          "position": 466
        }
      }
    },
    {
      "format": "javascript",
      "lines": 66,
      "fragment": "}\n                aria-label=\"GitHub Repository\"\n              >\n                <Github className=\"w-5 h-5\" />\n              </a>\n              <a \n                href=\"mailto:prusemic@cvut.cz\" \n                className={getLinkHoverClasses()}\n                aria-label=\"Contact Email\"\n              >\n                <Mail className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n          \n          {/* Information Section */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-6\">{getTranslation('footer.informationTitle')}</h3>\n            <ul className=\"space-y-4\">\n              <li>\n                <Link to=\"/documentation\" className={getLinkHoverClasses()}>\n                  {getTranslation('footer.documentationLink')}\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/terms-of-service\" className={getLinkHoverClasses()}>\n                  {getTranslation('footer.termsLink')}\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/privacy-policy\" className={getLinkHoverClasses()}>\n                  {getTranslation('footer.privacyLink')}\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/request-access\" className={getLinkHoverClasses()}>\n                  {getTranslation('footer.requestAccessLink') || \"Request Access\"}\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Contact Section */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-6\">{getTranslation('footer.contactTitle')}</h3>\n            <ul className=\"space-y-4\">\n              <li>\n                <a href=\"mailto:prusemic@cvut.cz\" className={getLinkHoverClasses()}>\n                  prusemic@cvut.cz\n                </a>\n              </li>\n              <li>\n                <a href=\"https://www.fjfi.cvut.cz/\" target=\"_blank\" rel=\"noopener noreferrer\" className={getLinkHoverClasses()}>\n                  FNSPE CTU in Prague\n                </a>\n              </li>\n              <li>\n                <a href=\"https://www.utia.cas.cz/\" target=\"_blank\" rel=\"noopener noreferrer\" className={getLinkHoverClasses()}>\n                  UTIA CAS\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className={`border-t ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ThemedFooter.tsx",
        "start": 139,
        "end": 204,
        "startLoc": {
          "line": 139,
          "column": 2,
          "position": 1142
        },
        "endLoc": {
          "line": 204,
          "column": 11,
          "position": 1659
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ThemedFooter.tsx",
        "start": 131,
        "end": 196,
        "startLoc": {
          "line": 131,
          "column": 16,
          "position": 1087
        },
        "endLoc": {
          "line": 196,
          "column": 20,
          "position": 1614
        }
      }
    },
    {
      "format": "javascript",
      "lines": 35,
      "fragment": "}>\n            <MonitorSmartphone className=\"h-4 w-4 mr-2\" />\n            {t('settings.system')}\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    );\n  }\n\n  // Default variant shows three buttons\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Button\n        variant={theme === 'light' ? 'default' : 'outline'}\n        size=\"sm\"\n        className=\"w-24\"\n        onClick={() => handleThemeChange('light')}\n      >\n        <Sun className=\"h-4 w-4 mr-2\" />\n        {t('settings.light')}\n      </Button>\n      <Button\n        variant={theme === 'dark' ? 'default' : 'outline'}\n        size=\"sm\"\n        className=\"w-24\"\n        onClick={() => handleThemeChange('dark')}\n      >\n        <Moon className=\"h-4 w-4 mr-2\" />\n        {t('settings.dark')}\n      </Button>\n      <Button\n        variant={theme === 'system' ? 'default' : 'outline'}\n        size=\"sm\"\n        className=\"w-24\"\n        onClick={() => handleThemeChange('system')}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/ThemeToggle.tsx",
        "start": 47,
        "end": 81,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 481
        },
        "endLoc": {
          "line": 81,
          "column": 2,
          "position": 739
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/settings/AppearanceSection.tsx",
        "start": 64,
        "end": 105,
        "startLoc": {
          "line": 64,
          "column": 6,
          "position": 694
        },
        "endLoc": {
          "line": 105,
          "column": 2,
          "position": 1020
        }
      }
    },
    {
      "format": "tsx",
      "lines": 8,
      "fragment": ";\n        if (axios.isAxiosError(error) && error.response) {\n          message = error.response.data?.message || message;\n        } else if (error instanceof Error) {\n          message = error.message;\n        }\n        toast.error(message);\n        setStats",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/StatsOverview.tsx",
        "start": 94,
        "end": 101,
        "startLoc": {
          "line": 94,
          "column": 29,
          "position": 922
        },
        "endLoc": {
          "line": 101,
          "column": 9,
          "position": 1003
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectImageProcessor.tsx",
        "start": 46,
        "end": 53,
        "startLoc": {
          "line": 46,
          "column": 32,
          "position": 490
        },
        "endLoc": {
          "line": 53,
          "column": 15,
          "position": 571
        }
      }
    },
    {
      "format": "javascript",
      "lines": 28,
      "fragment": "}>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectName\" className=\"text-right\">\n                {t('common.projectName')}\n              </Label>\n              <Input\n                id=\"projectName\"\n                placeholder={t('projects.projectNamePlaceholder')}\n                value={projectName}\n                onChange={(e) => setProjectName(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectDescription\" className=\"text-right\">\n                {t('common.description')} ({t('common.optional')})\n              </Label>\n              <Input\n                id=\"projectDescription\"\n                placeholder={t('projects.projectDescPlaceholder')}\n                value={projectDescription}\n                onChange={(e) => setProjectDescription(e.target.value)}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button type=\"submit\" disabled={isCreating",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/NewProject.tsx",
        "start": 92,
        "end": 119,
        "startLoc": {
          "line": 92,
          "column": 20,
          "position": 772
        },
        "endLoc": {
          "line": 119,
          "column": 11,
          "position": 1004
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectDialogForm.tsx",
        "start": 38,
        "end": 70,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 294
        },
        "endLoc": {
          "line": 70,
          "column": 12,
          "position": 540
        }
      }
    },
    {
      "format": "tsx",
      "lines": 14,
      "fragment": "<DialogHeader>\n          <DialogTitle>{t('projects.createProject')}</DialogTitle>\n          <DialogDescription>\n            {t('projects.createProjectDesc')}\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleCreateProject}>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"projectName\" className=\"text-right\">\n                {t('common.projectName')}\n              </Label>\n              <Input\n                ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/NewProject.tsx",
        "start": 86,
        "end": 99,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 723
        },
        "endLoc": {
          "line": 99,
          "column": 17,
          "position": 830
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectDialogForm.tsx",
        "start": 32,
        "end": 45,
        "startLoc": {
          "line": 32,
          "column": 7,
          "position": 236
        },
        "endLoc": {
          "line": 45,
          "column": 15,
          "position": 352
        }
      }
    },
    {
      "format": "javascript",
      "lines": 34,
      "fragment": "}\n            >\n              {t('navbar.home')}\n            </Link>\n            <Link\n              to=\"/documentation\"\n              className=\"text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 py-2 transition-colors\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {t('navbar.documentation')}\n            </Link>\n            <Link\n              to=\"/terms-of-service\"\n              className=\"text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 py-2 transition-colors\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {t('navbar.terms')}\n            </Link>\n            <Link\n              to=\"/privacy-policy\"\n              className=\"text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 py-2 transition-colors\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {t('navbar.privacy')}\n            </Link>\n            <Link\n              to=\"/sign-in\"\n              className=\"text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400 py-2 transition-colors\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            >\n              {t('navbar.login')}\n            </Link>\n            <Button asChild className=\"w-full rounded-md\">\n              <Link to=\"/request-access\" onClick={() => setIsMobileMenuOpen(false)}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/Navbar.tsx",
        "start": 120,
        "end": 153,
        "startLoc": {
          "line": 120,
          "column": 2,
          "position": 871
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1103
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/Navbar.tsx",
        "start": 108,
        "end": 148,
        "startLoc": {
          "line": 108,
          "column": 3,
          "position": 783
        },
        "endLoc": {
          "line": 148,
          "column": 2,
          "position": 1051
        }
      }
    },
    {
      "format": "tsx",
      "lines": 24,
      "fragment": "// Navigate through the translation object to find the value\n    let value = translations;\n    for (const part of parts) {\n      if (value && typeof value === 'object' && part in value) {\n        value = value[part];\n      } else {\n        // If the key doesn't exist in the current language, fall back to English\n        if (language !== 'en') {\n          let englishValue = enTranslations;\n          for (const p of parts) {\n            if (englishValue && typeof englishValue === 'object' && p in englishValue) {\n              englishValue = englishValue[p];\n            } else {\n              return key; // Key not found in English either\n            }\n          }\n          return typeof englishValue === 'string' ? englishValue : key;\n        }\n        return key; // Key not found\n      }\n    }\n    \n    return typeof value === 'string' ? value : key;\n  };",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/Features.tsx",
        "start": 71,
        "end": 94,
        "startLoc": {
          "line": 71,
          "column": 5,
          "position": 568
        },
        "endLoc": {
          "line": 94,
          "column": 2,
          "position": 801
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/ThemedFooter.tsx",
        "start": 49,
        "end": 72,
        "startLoc": {
          "line": 49,
          "column": 5,
          "position": 418
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 651
        }
      }
    },
    {
      "format": "tsx",
      "lines": 15,
      "fragment": ";\n  \n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add(\"active\");\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/Features.tsx",
        "start": 94,
        "end": 108,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 801
        },
        "endLoc": {
          "line": 108,
          "column": 3,
          "position": 901
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/Hero.tsx",
        "start": 11,
        "end": 25,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 145
        },
        "endLoc": {
          "line": 25,
          "column": 6,
          "position": 244
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n          size=\"sm\" \n          className=\"h-9 px-2.5 rounded-r-none\"\n          onClick={() => setViewMode(\"grid\")}\n        >\n          <Grid2X2 className=\"h-4 w-4\" />\n        </Button>\n        <Button \n          variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n          size=\"sm\" \n          className=\"h-9 px-2.5 rounded-l-none\"\n          onClick={() => setViewMode(\"list\")}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/components/DashboardActions.tsx",
        "start": 37,
        "end": 48,
        "startLoc": {
          "line": 37,
          "column": 8,
          "position": 286
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 392
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/components/project/ProjectToolbar.tsx",
        "start": 168,
        "end": 183,
        "startLoc": {
          "line": 168,
          "column": 8,
          "position": 1774
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 1998
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "try {\n        const legacyResponse = await fetch(`/api/images?projectId=${projectId}`);\n\n        if (legacyResponse.ok) {\n          const legacyImages = await legacyResponse.json();\n          console.log(`Successfully fetched ${legacyImages.length} images from legacy API`);\n          return legacyImages.map((image: Image) => mapApiImageToProjectImage(image));\n        }\n      }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/api/projectImages.ts",
        "start": 145,
        "end": 153,
        "startLoc": {
          "line": 145,
          "column": 7,
          "position": 1052
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1145
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/api/projectImages.ts",
        "start": 123,
        "end": 132,
        "startLoc": {
          "line": 123,
          "column": 9,
          "position": 871
        },
        "endLoc": {
          "line": 132,
          "column": 73,
          "position": 965
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": ");\n      if (whereMatch) {\n        const conditions = whereMatch[1];\n        \n        // Parse basic key-value conditions\n        const conditionParts = conditions.split('AND').map(part => part.trim());\n        conditionParts.forEach(condition => {\n          const match = condition.match(/([^\\s=<>]+)\\s*(=|<>|>|<|>=|<=)\\s*(?:'([^']*)'|(\\d+)|(\\$\\d+))/);\n          if (match) {\n            const [, column, operator, stringValue, numberValue, placeholder] = match;\n            \n            // For placeholder values, we'll handle them separately\n            if (!placeholder) {\n              result.conditions[column] = stringValue || numberValue;\n            }\n          }\n        });\n      }\n    }\n    \n    // Check for DELETE",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 290,
        "end": 310,
        "startLoc": {
          "line": 290,
          "column": 17,
          "position": 2196
        },
        "endLoc": {
          "line": 310,
          "column": 20,
          "position": 2367
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 218,
        "end": 238,
        "startLoc": {
          "line": 218,
          "column": 46,
          "position": 1549
        },
        "endLoc": {
          "line": 238,
          "column": 20,
          "position": 1720
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": ";\n      }\n      \n      // Extract WHERE conditions\n      const whereMatch = queryText.match(/WHERE\\s+(.+)$/i);\n      if (whereMatch) {\n        const conditions = whereMatch[1];\n        \n        // Parse basic key-value conditions\n        const conditionParts = conditions.split('AND').map(part => part.trim());\n        conditionParts.forEach(condition => {\n          const match = condition.match(/([^\\s=<>]+)\\s*(=|<>|>|<|>=|<=)\\s*(?:'([^']*)'|(\\d+)|(\\$\\d+))/);\n          if (match) {\n            const [, column, operator, stringValue, numberValue, placeholder] = match;\n            \n            // For placeholder values, we'll handle them separately\n            if (!placeholder) {\n              result.conditions[column] = stringValue || numberValue;\n            }\n          }\n        });\n      }\n    }\n    \n    return",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 317,
        "end": 341,
        "startLoc": {
          "line": 317,
          "column": 2,
          "position": 2439
        },
        "endLoc": {
          "line": 341,
          "column": 7,
          "position": 2632
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 286,
        "end": 238,
        "startLoc": {
          "line": 286,
          "column": 2,
          "position": 2174
        },
        "endLoc": {
          "line": 238,
          "column": 20,
          "position": 1720
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "const conditionParts = conditions.split('AND').map(part => part.trim());\n          conditionParts.forEach((condition, index) => {\n            const match = condition.match(/([^\\s=<>]+)\\s*(=|<>|>|<|>=|<=)\\s*(\\$\\d+)/);\n            if (match) {\n              const [, column, operator, placeholder] = match;\n              const paramIndex = parseInt(placeholder.substring(1)) - 1;\n              \n              if (paramIndex >= 0 && paramIndex < values.length) {\n                parsedQuery.conditions[column] = values[paramIndex];\n              }\n            }\n          });\n        }\n      }\n    }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 430,
        "end": 444,
        "startLoc": {
          "line": 430,
          "column": 11,
          "position": 3502
        },
        "endLoc": {
          "line": 444,
          "column": 2,
          "position": 3670
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 379,
        "end": 394,
        "startLoc": {
          "line": 379,
          "column": 11,
          "position": 2941
        },
        "endLoc": {
          "line": 394,
          "column": 5,
          "position": 3111
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= this.tables[parsedQuery.tableName].filter(row => {\n          return Object.entries(parsedQuery.conditions).every(([column, value]) => {\n            return row[column] === value;\n          });\n        });\n        \n        // Update rows",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 500,
        "end": 506,
        "startLoc": {
          "line": 500,
          "column": 2,
          "position": 4164
        },
        "endLoc": {
          "line": 506,
          "column": 15,
          "position": 4236
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockDatabase.ts",
        "start": 453,
        "end": 459,
        "startLoc": {
          "line": 453,
          "column": 2,
          "position": 3754
        },
        "endLoc": {
          "line": 459,
          "column": 7,
          "position": 3826
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "} else {\n        const [, valueStr, unit] = match;\n        const value = parseInt(valueStr, 10);\n        \n        switch (unit) {\n          case 's': expiresAt = new Date(now.getTime() + value * 1000); break;\n          case 'm': expiresAt = new Date(now.getTime() + value * 60000); break;\n          case 'h': expiresAt = new Date(now.getTime() + value * 3600000); break;\n          case 'd': expiresAt = new Date(now.getTime() + value * 86400000); break;\n          case 'w': expiresAt = new Date(now.getTime() + value * 604800000); break;\n          case 'y': expiresAt = new Date(now.getTime() + value * 31536000000); break;\n          default: expiresAt = new Date(now.getTime() + 604800000",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockAuth.ts",
        "start": 224,
        "end": 235,
        "startLoc": {
          "line": 224,
          "column": 7,
          "position": 1904
        },
        "endLoc": {
          "line": 235,
          "column": 10,
          "position": 2172
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockAuth.ts",
        "start": 149,
        "end": 160,
        "startLoc": {
          "line": 149,
          "column": 7,
          "position": 1136
        },
        "endLoc": {
          "line": 160,
          "column": 8,
          "position": 1404
        }
      }
    },
    {
      "format": "typescript",
      "lines": 21,
      "fragment": "|| parts[3] !== this.options.jwtSecret) {\n      return null;\n    }\n    \n    try {\n      const payload = JSON.parse(parts[1]) as TokenPayload;\n      \n      // Check if token is expired\n      if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n        return null;\n      }\n      \n      return payload;\n    } catch (error) {\n      return null;\n    }\n  }\n  \n  /**\n   * Create a mock authentication middleware\n   */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/test-utils/mockAuth.ts",
        "start": 319,
        "end": 339,
        "startLoc": {
          "line": 319,
          "column": 2,
          "position": 2807
        },
        "endLoc": {
          "line": 339,
          "column": 6,
          "position": 2945
        }
      },
      "secondFile": {
        "name": "packages/backend/src/test-utils/mockAuth.ts",
        "start": 284,
        "end": 304,
        "startLoc": {
          "line": 284,
          "column": 2,
          "position": 2525
        },
        "endLoc": {
          "line": 304,
          "column": 6,
          "position": 2663
        }
      }
    },
    {
      "format": "typescript",
      "lines": 19,
      "fragment": "/**\n * Function to add a segmentation task to the queue\n *\n * @param imageId ID of the image\n * @param imagePath Path to the image\n * @param parameters Parameters for segmentation\n * @param priority Priority of the task\n * @returns Task ID\n */\nexport const triggerSegmentationTask = async (\n  imageId: string,\n  imagePath: string,\n  parameters: any,\n  priority: number = 1\n): Promise<string> => {\n  logger.info(`Queueing segmentation for imageId: ${imageId}, path: ${imagePath}, priority: ${priority}`);\n\n  try {\n    // Check if this is a force resegment task",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/segmentationQueueService.ts",
        "start": 215,
        "end": 233,
        "startLoc": {
          "line": 215,
          "column": 1,
          "position": 1534
        },
        "endLoc": {
          "line": 233,
          "column": 43,
          "position": 1619
        }
      },
      "secondFile": {
        "name": "packages/backend/src/services/segmentationService.ts",
        "start": 6,
        "end": 24,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 37
        },
        "endLoc": {
          "line": 24,
          "column": 50,
          "position": 122
        }
      }
    },
    {
      "format": "typescript",
      "lines": 39,
      "fragment": "function generateNewFilePaths(\n  originalStoragePath: string,\n  originalThumbnailPath?: string,\n  newProjectId?: string\n): { newStoragePath: string; newThumbnailPath?: string } {\n  // Generate timestamp and random suffix for uniqueness\n  const timestamp = Date.now();\n  const randomSuffix = Math.floor(Math.random() * 1000000);\n\n  // Extract filename from original path\n  const originalFileName = originalStoragePath.split('/').pop() || '';\n  const fileNameParts = originalFileName.split('.');\n  const fileExtension = fileNameParts.pop() || 'png';\n  const fileBaseName = fileNameParts.join('.');\n\n  // Generate new storage path\n  const newStoragePath = `/uploads/${newProjectId}/${fileBaseName}-copy-${timestamp}-${randomSuffix}.${fileExtension}`;\n\n  // Generate new thumbnail path if original exists\n  let newThumbnailPath;\n  if (originalThumbnailPath) {\n    const originalThumbName = originalThumbnailPath.split('/').pop() || '';\n    const thumbNameParts = originalThumbName.split('.');\n    const thumbExtension = thumbNameParts.pop() || 'png';\n    const thumbBaseName = thumbNameParts.join('.');\n\n    newThumbnailPath = `/uploads/${newProjectId}/thumb-${thumbBaseName}-copy-${timestamp}-${randomSuffix}.${thumbExtension}`;\n  }\n\n  return { newStoragePath, newThumbnailPath };\n}\n\n/**\n * Copy image files from source to target\n *\n * @param sourcePath Source path (relative to baseDir)\n * @param targetPath Target path (relative to baseDir)\n * @param baseDir Base directory\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/projectDuplicationService.ts",
        "start": 271,
        "end": 309,
        "startLoc": {
          "line": 271,
          "column": 1,
          "position": 1541
        },
        "endLoc": {
          "line": 309,
          "column": 4,
          "position": 1877
        }
      },
      "secondFile": {
        "name": "packages/backend/src/workers/projectDuplicationWorker.ts",
        "start": 158,
        "end": 192,
        "startLoc": {
          "line": 158,
          "column": 1,
          "position": 1160
        },
        "endLoc": {
          "line": 192,
          "column": 4,
          "position": 1501
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "> {\n  try {\n    // Normalize paths\n    const normalizedSourcePath = sourcePath.startsWith('/') ? sourcePath.substring(1) : sourcePath;\n    const normalizedTargetPath = targetPath.startsWith('/') ? targetPath.substring(1) : targetPath;\n\n    // Create full paths\n    const fullSourcePath = path.join(baseDir, normalizedSourcePath);\n    const fullTargetPath = path.join(baseDir, normalizedTargetPath);\n\n    // Create target directory if it doesn't exist\n    const targetDir = path.dirname(fullTargetPath);\n    if (!fs",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/projectDuplicationService.ts",
        "start": 314,
        "end": 326,
        "startLoc": {
          "line": 314,
          "column": 5,
          "position": 1912
        },
        "endLoc": {
          "line": 326,
          "column": 3,
          "position": 2044
        }
      },
      "secondFile": {
        "name": "packages/backend/src/workers/projectDuplicationWorker.ts",
        "start": 124,
        "end": 136,
        "startLoc": {
          "line": 124,
          "column": 8,
          "position": 888
        },
        "endLoc": {
          "line": 136,
          "column": 6,
          "position": 1022
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "let area = 0;\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    area += points[i].x * points[j].y;\n    area -= points[j].x * points[i].y;\n  }\n  \n  return Math.abs(area / 2);\n};\n\n/**\n * Calculate the perimeter of a polygon\n * @param points Array of points defining the polygon\n * @returns Perimeter of the polygon\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/metricsService.ts",
        "start": 22,
        "end": 36,
        "startLoc": {
          "line": 22,
          "column": 3,
          "position": 67
        },
        "endLoc": {
          "line": 36,
          "column": 4,
          "position": 194
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/pages/segmentation/hooks/polygonInteraction/geometry/utils/intersectionUtils.ts",
        "start": 82,
        "end": 219,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 931
        },
        "endLoc": {
          "line": 219,
          "column": 4,
          "position": 2069
        }
      }
    },
    {
      "format": "typescript",
      "lines": 25,
      "fragment": "let minX = points[0].x;\n  let minY = points[0].y;\n  let maxX = points[0].x;\n  let maxY = points[0].y;\n  \n  for (let i = 1; i < points.length; i++) {\n    minX = Math.min(minX, points[i].x);\n    minY = Math.min(minY, points[i].y);\n    maxX = Math.max(maxX, points[i].x);\n    maxY = Math.max(maxY, points[i].y);\n  }\n  \n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n};\n\n/**\n * Calculate the convex hull of a polygon using Graham scan algorithm\n * @param points Array of points defining the polygon\n * @returns Array of points defining the convex hull\n */",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/metricsService.ts",
        "start": 59,
        "end": 83,
        "startLoc": {
          "line": 59,
          "column": 3,
          "position": 485
        },
        "endLoc": {
          "line": 83,
          "column": 4,
          "position": 711
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 305,
        "end": 329,
        "startLoc": {
          "line": 305,
          "column": 3,
          "position": 2444
        },
        "endLoc": {
          "line": 329,
          "column": 4,
          "position": 2668
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "export const calculateConvexHull = (points: Point[]): Point[] => {\n  if (points.length <= 3) return [...points];\n  \n  // Find the point with the lowest y-coordinate (and leftmost if tied)\n  let lowestPoint = points[0];\n  for (let i = 1; i < points.length; i++) {\n    if (points[i].y < lowestPoint.y || (points[i].y === lowestPoint.y && points[i].x < lowestPoint.x)) {\n      lowestPoint = points[i];\n    }\n  }\n  \n  // Sort points by polar angle with respect to the lowest point\n  const sortedPoints = [...points].sort((a, b) => {\n    if (a === lowestPoint) return -1;\n    if (b === lowestPoint) return 1;\n    \n    const angleA = Math.atan2(a.y - lowestPoint.y, a.x - lowestPoint.x);\n    const angleB = Math.atan2(b.y - lowestPoint.y, b.x - lowestPoint.x);\n    \n    if (angleA === angleB) {\n      // If angles are the same, sort by distance from the lowest point\n      const distA = Math",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/metricsService.ts",
        "start": 84,
        "end": 105,
        "startLoc": {
          "line": 84,
          "column": 1,
          "position": 713
        },
        "endLoc": {
          "line": 105,
          "column": 5,
          "position": 1033
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 330,
        "end": 352,
        "startLoc": {
          "line": 330,
          "column": 1,
          "position": 2670
        },
        "endLoc": {
          "line": 352,
          "column": 9,
          "position": 2987
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": "const uniquePoints: Point[] = [];\n  for (let i = 0; i < sortedPoints.length; i++) {\n    if (i === 0 || sortedPoints[i].x !== sortedPoints[i-1].x || sortedPoints[i].y !== sortedPoints[i-1].y) {\n      uniquePoints.push(sortedPoints[i]);\n    }\n  }\n  \n  // Graham scan algorithm\n  if (uniquePoints.length <=",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/services/metricsService.ts",
        "start": 114,
        "end": 122,
        "startLoc": {
          "line": 114,
          "column": 3,
          "position": 1154
        },
        "endLoc": {
          "line": 122,
          "column": 3,
          "position": 1281
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/utils/polygonUtils.ts",
        "start": 361,
        "end": 371,
        "startLoc": {
          "line": 361,
          "column": 3,
          "position": 3046
        },
        "endLoc": {
          "line": 371,
          "column": 2,
          "position": 3174
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ", authMiddleware, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const userId = req.user?.userId;\n  const projectId = req.params.projectId;\n\n  if (!userId) {\n    res.status(401).json({ message: 'Authentication error' });\n    return;\n  }\n\n  try {\n    // Return mock data specific to the requested project",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/status.ts",
        "start": 180,
        "end": 190,
        "startLoc": {
          "line": 180,
          "column": 32,
          "position": 1408
        },
        "endLoc": {
          "line": 190,
          "column": 54,
          "position": 1513
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/status.ts",
        "start": 78,
        "end": 88,
        "startLoc": {
          "line": 78,
          "column": 27,
          "position": 611
        },
        "endLoc": {
          "line": 88,
          "column": 25,
          "position": 716
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": ",\n                status: 'pending',\n                result_data: {\n                    polygons: []\n                },\n                polygons: [],\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            };\n            res.status(200).json(emptyResult);\n            return;\n        }\n\n        // Format the result\n        const segmentationResult = result.rows[0];\n\n        // Ensure polygons are available in the expected format\n        if (segmentationResult.result_data && segmentationResult.result_data.polygons) {\n            segmentationResult.polygons = segmentationResult.result_data.polygons;\n        } else if (!segmentationResult.polygons) {\n            segmentationResult.polygons = [];\n        }\n\n        res.status(200).json(segmentationResult);\n    } catch (error) {\n        console.error('Error fetching segmentation results:'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/segmentation.ts",
        "start": 119,
        "end": 144,
        "startLoc": {
          "line": 119,
          "column": 14,
          "position": 1030
        },
        "endLoc": {
          "line": 144,
          "column": 39,
          "position": 1235
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/segmentation.ts",
        "start": 52,
        "end": 77,
        "startLoc": {
          "line": 52,
          "column": 8,
          "position": 459
        },
        "endLoc": {
          "line": 77,
          "column": 38,
          "position": 664
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "if (!userId) {\n        res.status(401).json({ message: 'Authentication error' });\n        return;\n    }\n\n    try {\n        // Verify user has access to the project\n        const projectCheck = await pool.query('SELECT id FROM projects WHERE id = $1 AND user_id = $2', [projectId, userId]);\n\n        if (projectCheck.rows.length === 0) {\n            res.status(404).json({ message: 'Project not found or access denied' });\n            return;\n        }\n\n        // Verify image belongs to the project using its UUID\n        const imageCheck = await pool.query('SELECT id FROM images WHERE id = $1 AND project_id = $2', [imageId, projectId]);\n\n        if (imageCheck.rows.length === 0) {\n            res.status(404).json({ message: 'Image not found in this project' });\n            return;\n        }\n\n        // Use the actual image ID from the database for the segmentation lookup (which is just imageId now)\n        const actualImageId = imageId; // Directly use the validated imageId\n\n        // Check if segmentation result exists",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/segmentation.ts",
        "start": 379,
        "end": 404,
        "startLoc": {
          "line": 379,
          "column": 5,
          "position": 3310
        },
        "endLoc": {
          "line": 404,
          "column": 39,
          "position": 3520
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/segmentation.ts",
        "start": 88,
        "end": 113,
        "startLoc": {
          "line": 88,
          "column": 5,
          "position": 761
        },
        "endLoc": {
          "line": 113,
          "column": 29,
          "position": 971
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": "router.get('/mock-queue-status', authMiddleware, async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    const userId = req.user?.userId;\n\n    if (!userId) {\n        res.status(401).json({ message: 'Authentication error' });\n        return;\n    }\n\n    try {\n        // Return mock data to demonstrate the UI during development\n        // Generate some random UUIDs for demonstration\n        const mockImageId1 = '123e4567-e89b-12d3-a456-426614174000';\n        const mockImageId2 = '223e4567-e89b-12d3-a456-426614174001';\n\n        // Return mock data",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/segmentation.ts",
        "start": 453,
        "end": 467,
        "startLoc": {
          "line": 453,
          "column": 1,
          "position": 3829
        },
        "endLoc": {
          "line": 467,
          "column": 20,
          "position": 3952
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/status.ts",
        "start": 146,
        "end": 159,
        "startLoc": {
          "line": 146,
          "column": 1,
          "position": 1111
        },
        "endLoc": {
          "line": 159,
          "column": 6,
          "position": 1233
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "), async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    const userId = req.user?.userId;\n    const { id: projectId } = req.params;\n\n    if (!userId) return res.status(401).json({ message: 'Authentication error' });\n\n    try {\n        logger.info('Processing delete project request'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 233,
        "end": 240,
        "startLoc": {
          "line": 233,
          "column": 20,
          "position": 1779
        },
        "endLoc": {
          "line": 240,
          "column": 36,
          "position": 1883
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 163,
        "end": 170,
        "startLoc": {
          "line": 163,
          "column": 16,
          "position": 1216
        },
        "endLoc": {
          "line": 170,
          "column": 33,
          "position": 1320
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "// First check if the projects table exists\n        const projectsTableCheck = await pool.query(`\n            SELECT EXISTS (\n                SELECT 1\n                FROM information_schema.tables\n                WHERE table_schema = 'public'\n                AND table_name = 'projects'\n            )\n        `);\n        \n        const projectsTableExists = projectsTableCheck.rows[0].exists;\n        if (!projectsTableExists) {\n            logger.warn('Projects table does not exist in database');\n            return res.status(404).json({ \n                message: 'Project not found - projects table missing',\n                error: 'NOT_FOUND'\n            });\n        }\n\n        // Import and use projectService\n        const projectService = await import('../services/projectService');\n        \n        // Delete the project using the service",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 242,
        "end": 264,
        "startLoc": {
          "line": 242,
          "column": 9,
          "position": 1899
        },
        "endLoc": {
          "line": 264,
          "column": 40,
          "position": 2014
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 188,
        "end": 210,
        "startLoc": {
          "line": 188,
          "column": 9,
          "position": 1458
        },
        "endLoc": {
          "line": 210,
          "column": 33,
          "position": 1574
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": "});\n\n        // First check if the projects table exists\n        const projectsTableCheck = await pool.query(`\n            SELECT EXISTS (\n                SELECT 1\n                FROM information_schema.tables\n                WHERE table_schema = 'public'\n                AND table_name = 'projects'\n            )\n        `);\n        \n        const projectsTableExists = projectsTableCheck.rows[0].exists;\n        if (!projectsTableExists) {\n            logger.warn('Projects table does not exist in database');\n            return res.status(404).json({ \n                message: 'Project not found - projects table missing',\n                error: 'NOT_FOUND'\n            });\n        }\n\n        // Verify the source project exists and belongs to the user",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 295,
        "end": 316,
        "startLoc": {
          "line": 295,
          "column": 2,
          "position": 2372
        },
        "endLoc": {
          "line": 316,
          "column": 60,
          "position": 2473
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 240,
        "end": 207,
        "startLoc": {
          "line": 240,
          "column": 2,
          "position": 1893
        },
        "endLoc": {
          "line": 207,
          "column": 33,
          "position": 1554
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "// Verify the source project exists and belongs to the user\n      const projectCheck = await pool.query(\n        'SELECT * FROM projects WHERE id = $1 AND user_id = $2',\n        [originalProjectId, userId]\n      );\n\n      if (projectCheck.rows.length === 0) {\n        logger.info('Source project not found or access denied', { originalProjectId, userId });\n        return res.status(404).json({ message: 'Source project not found or access denied' });\n      }\n      \n      // Duplicate the project synchronously",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 89,
        "end": 100,
        "startLoc": {
          "line": 89,
          "column": 7,
          "position": 681
        },
        "endLoc": {
          "line": 100,
          "column": 39,
          "position": 779
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 316,
        "end": 327,
        "startLoc": {
          "line": 316,
          "column": 9,
          "position": 2473
        },
        "endLoc": {
          "line": 327,
          "column": 79,
          "position": 2570
        }
      }
    },
    {
      "format": "typescript",
      "lines": 15,
      "fragment": ");\n    }\n\n    // Verify the source project exists and belongs to the user\n    const projectCheck = await pool.query(\n      'SELECT * FROM projects WHERE id = $1 AND user_id = $2',\n      [originalProjectId, userId]\n    );\n\n    if (projectCheck.rows.length === 0) {\n      logger.info('Source project not found or access denied', { originalProjectId, userId });\n      return res.status(404).json({ message: 'Source project not found or access denied' });\n    }\n\n    // Import the duplication queue service",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 120,
        "end": 134,
        "startLoc": {
          "line": 120,
          "column": 11,
          "position": 893
        },
        "endLoc": {
          "line": 134,
          "column": 40,
          "position": 998
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 313,
        "end": 327,
        "startLoc": {
          "line": 313,
          "column": 2,
          "position": 2465
        },
        "endLoc": {
          "line": 327,
          "column": 79,
          "position": 2570
        }
      }
    },
    {
      "format": "typescript",
      "lines": 26,
      "fragment": "// Import the duplication queue service\n    const projectDuplicationQueueService = await import('../services/projectDuplicationQueueService');\n    \n    // Trigger an asynchronous duplication\n    const taskId = await projectDuplicationQueueService.default.triggerProjectDuplication(\n      pool,\n      originalProjectId,\n      userId,\n      {\n        newTitle,\n        copyFiles,\n        copySegmentations,\n        resetStatus,\n        baseDir: process.cwd()\n      }\n    );\n    \n    logger.info('Project duplication task created successfully', { \n      originalProjectId,\n      taskId,\n      userId,\n      options: { newTitle, copyFiles, copySegmentations, resetStatus }\n    });\n    \n    // Return the task ID and status\n    res",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 134,
        "end": 159,
        "startLoc": {
          "line": 134,
          "column": 5,
          "position": 998
        },
        "endLoc": {
          "line": 159,
          "column": 4,
          "position": 1139
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projects.ts",
        "start": 342,
        "end": 367,
        "startLoc": {
          "line": 342,
          "column": 21,
          "position": 2635
        },
        "endLoc": {
          "line": 367,
          "column": 7,
          "position": 2776
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "), async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const userId = req.user?.userId;\n  const { taskId } = req.params;\n\n  if (!userId) return res.status(401).json({ message: 'Authentication error' });\n\n  try {\n    logger.info('Cancelling duplication task'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 279,
        "end": 286,
        "startLoc": {
          "line": 279,
          "column": 24,
          "position": 2105
        },
        "endLoc": {
          "line": 286,
          "column": 30,
          "position": 2206
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 234,
        "end": 241,
        "startLoc": {
          "line": 234,
          "column": 21,
          "position": 1717
        },
        "endLoc": {
          "line": 241,
          "column": 28,
          "position": 1818
        }
      }
    },
    {
      "format": "typescript",
      "lines": 22,
      "fragment": ", { userId, taskId });\n\n    // Check if the duplication tasks table exists\n    const tasksTableCheck = await pool.query(`\n      SELECT EXISTS (\n        SELECT 1\n        FROM information_schema.tables\n        WHERE table_schema = 'public'\n        AND table_name = 'project_duplication_tasks'\n      )\n    `);\n    \n    const tasksTableExists = tasksTableCheck.rows[0].exists;\n    if (!tasksTableExists) {\n      logger.warn('Project duplication tasks table does not exist');\n      return res.status(404).json({ message: 'Task not found - tasks table missing' });\n    }\n\n    // Import the duplication queue service\n    const projectDuplicationQueueService = await import('../services/projectDuplicationQueueService');\n    \n    // Cancel the task",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 286,
        "end": 307,
        "startLoc": {
          "line": 286,
          "column": 30,
          "position": 2207
        },
        "endLoc": {
          "line": 307,
          "column": 19,
          "position": 2327
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/projectDuplicationRoutes.ts",
        "start": 241,
        "end": 262,
        "startLoc": {
          "line": 241,
          "column": 28,
          "position": 1819
        },
        "endLoc": {
          "line": 262,
          "column": 16,
          "position": 1939
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": "), async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    const userId = req.user?.userId;\n    let { projectId } = req.params;\n    const imageId = req.params.imageId;\n\n    // Handle project IDs with \"project-\" prefix\n    const originalProjectId = projectId;\n    if (projectId.startsWith('project-')) {\n        projectId = projectId.substring(8); // Remove \"project-\" prefix for database query\n        logger.debug('Removed project- prefix for database query', {\n            originalId: originalProjectId,\n            cleanedId: projectId\n        });\n    }\n\n    logger.info('Image detail request received'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 604,
        "end": 619,
        "startLoc": {
          "line": 604,
          "column": 18,
          "position": 4740
        },
        "endLoc": {
          "line": 619,
          "column": 32,
          "position": 4893
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 489,
        "end": 504,
        "startLoc": {
          "line": 489,
          "column": 18,
          "position": 3860
        },
        "endLoc": {
          "line": 504,
          "column": 34,
          "position": 4013
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": "});\n\n    try {\n        const projectCheck = await pool.query('SELECT id FROM projects WHERE id = $1 AND user_id = $2', [projectId, userId]);\n\n        if (projectCheck.rows.length === 0) {\n            logger.warn('Project access denied', { projectId, originalProjectId, userId });\n            throw new ApiError('Project not found or access denied', 404);\n        }\n\n        const imageResult = await pool.query(\n            name",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 691,
        "end": 702,
        "startLoc": {
          "line": 691,
          "column": 5,
          "position": 5362
        },
        "endLoc": {
          "line": 702,
          "column": 5,
          "position": 5470
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 624,
        "end": 635,
        "startLoc": {
          "line": 624,
          "column": 5,
          "position": 4914
        },
        "endLoc": {
          "line": 635,
          "column": 57,
          "position": 5022
        }
      }
    },
    {
      "format": "typescript",
      "lines": 16,
      "fragment": ", async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    const userId = req.user?.userId;\n    let { projectId } = req.params;\n    const imageId = req.params.imageId;\n\n    // Handle project IDs with \"project-\" prefix\n    const originalProjectId = projectId;\n    if (projectId.startsWith('project-')) {\n        projectId = projectId.substring(8); // Remove \"project-\" prefix for database query\n        logger.debug('Removed project- prefix for database query', {\n            originalId: originalProjectId,\n            cleanedId: projectId\n        });\n    }\n\n    logger.info('Image verification request received'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 753,
        "end": 768,
        "startLoc": {
          "line": 753,
          "column": 15,
          "position": 5825
        },
        "endLoc": {
          "line": 768,
          "column": 38,
          "position": 5977
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 489,
        "end": 504,
        "startLoc": {
          "line": 489,
          "column": 2,
          "position": 3861
        },
        "endLoc": {
          "line": 504,
          "column": 34,
          "position": 4013
        }
      }
    },
    {
      "format": "typescript",
      "lines": 17,
      "fragment": ", {\n        userId,\n        projectId,\n        originalProjectId,\n        imageId\n    });\n\n    try {\n        const projectCheck = await pool.query('SELECT id FROM projects WHERE id = $1 AND user_id = $2', [projectId, userId]);\n\n        if (projectCheck.rows.length === 0) {\n            logger.warn('Project access denied', { projectId, originalProjectId, userId });\n            throw new ApiError('Project not found or access denied', 404);\n        }\n\n        const imageResult = await pool.query(\n            'SELECT id, storage_path FROM images WHERE id = $1 AND project_id = $2'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 768,
        "end": 784,
        "startLoc": {
          "line": 768,
          "column": 38,
          "position": 5978
        },
        "endLoc": {
          "line": 784,
          "column": 72,
          "position": 6106
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 619,
        "end": 635,
        "startLoc": {
          "line": 619,
          "column": 32,
          "position": 4894
        },
        "endLoc": {
          "line": 635,
          "column": 57,
          "position": 5022
        }
      }
    },
    {
      "format": "typescript",
      "lines": 13,
      "fragment": "} = req.params;\n\n    // Handle project IDs with \"project-\" prefix\n    const originalProjectId = projectId;\n    if (projectId.startsWith('project-')) {\n        projectId = projectId.substring(8); // Remove \"project-\" prefix for database query\n        logger.debug('Removed project- prefix for database query', {\n            originalId: originalProjectId,\n            cleanedId: projectId\n        });\n    }\n\n    if",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 856,
        "end": 868,
        "startLoc": {
          "line": 856,
          "column": 2,
          "position": 6723
        },
        "endLoc": {
          "line": 868,
          "column": 3,
          "position": 6808
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/images.ts",
        "start": 277,
        "end": 289,
        "startLoc": {
          "line": 277,
          "column": 2,
          "position": 2141
        },
        "endLoc": {
          "line": 289,
          "column": 6,
          "position": 2226
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": ", (req, res) => {\n    res.status(200).json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      components: {\n        api: 'healthy',\n        database: 'connected'\n      }\n    });\n  });\n\n  // Add simple mock login endpoint for testing",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/direct-endpoints.js",
        "start": 6,
        "end": 17,
        "startLoc": {
          "line": 6,
          "column": 14,
          "position": 25
        },
        "endLoc": {
          "line": 17,
          "column": 46,
          "position": 106
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/health.js",
        "start": 7,
        "end": 18,
        "startLoc": {
          "line": 7,
          "column": 4,
          "position": 36
        },
        "endLoc": {
          "line": 18,
          "column": 7,
          "position": 115
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ", authMiddleware, async (req: AuthenticatedRequest, res: Response) => {\n  const userId = req.user?.userId;\n\n  if (!userId) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n\n  try {\n    logger.info('Fetching current user data'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/routes/auth.ts",
        "start": 386,
        "end": 394,
        "startLoc": {
          "line": 386,
          "column": 6,
          "position": 3340
        },
        "endLoc": {
          "line": 394,
          "column": 29,
          "position": 3427
        }
      },
      "secondFile": {
        "name": "packages/backend/src/routes/auth.ts",
        "start": 365,
        "end": 373,
        "startLoc": {
          "line": 365,
          "column": 10,
          "position": 3143
        },
        "endLoc": {
          "line": 373,
          "column": 39,
          "position": 3230
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ", { \n            ip: req.ip, \n            path: req.path,\n            method: req.method,\n            userId: (req as any).user?.userId \n          });\n          res.status(429).json(options.message);\n          res.set('Retry-After', '3600'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 92,
        "end": 99,
        "startLoc": {
          "line": 92,
          "column": 42,
          "position": 847
        },
        "endLoc": {
          "line": 99,
          "column": 7,
          "position": 927
        }
      },
      "secondFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 69,
        "end": 76,
        "startLoc": {
          "line": 69,
          "column": 27,
          "position": 626
        },
        "endLoc": {
          "line": 76,
          "column": 6,
          "position": 706
        }
      }
    },
    {
      "format": "typescript",
      "lines": 12,
      "fragment": ", { \n            ip: req.ip, \n            path: req.path,\n            method: req.method,\n            userId: (req as any).user?.userId \n          });\n          res.status(429).json(options.message);\n          res.set('Retry-After', '900'); // 15 minutes in seconds\n        }\n      };\n      break;\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 115,
        "end": 126,
        "startLoc": {
          "line": 115,
          "column": 22,
          "position": 1068
        },
        "endLoc": {
          "line": 126,
          "column": 2,
          "position": 1166
        }
      },
      "secondFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 69,
        "end": 80,
        "startLoc": {
          "line": 69,
          "column": 27,
          "position": 626
        },
        "endLoc": {
          "line": 80,
          "column": 5,
          "position": 724
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ": NextFunction, options: any) => {\n    logger.warn('Sensitive operation rate limit exceeded', { \n      ip: req.ip, \n      path: req.path,\n      method: req.method,\n      userId: (req as any).user?.userId \n    });\n    res.status(options",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 187,
        "end": 194,
        "startLoc": {
          "line": 187,
          "column": 5,
          "position": 1739
        },
        "endLoc": {
          "line": 194,
          "column": 8,
          "position": 1821
        }
      },
      "secondFile": {
        "name": "packages/backend/src/middleware/rateLimitMiddleware.ts",
        "start": 91,
        "end": 98,
        "startLoc": {
          "line": 91,
          "column": 6,
          "position": 826
        },
        "endLoc": {
          "line": 98,
          "column": 4,
          "position": 908
        }
      }
    },
    {
      "format": "typescript",
      "lines": 24,
      "fragment": "const decoded = tokenService.verifyToken(token, TokenType.ACCESS, {\n      validateFingerprint: config.auth.tokenSecurityMode === 'strict',\n      requiredIssuer: 'spheroseg-auth',\n      requiredAudience: 'spheroseg-api'\n    });\n\n    // Add user data to request\n    req.user = {\n      userId: decoded.userId,\n      email: decoded.email,\n      type: decoded.type,\n      // Add additional claims for enhanced security\n      tokenId: decoded.jti,\n      fingerprint: decoded.fingerprint,\n      tokenVersion: decoded.version\n    };\n\n    // Add token metadata to request for access in routes\n    req.tokenMetadata = {\n      issuedAt: new Date((decoded as any).iat * 1000),\n      expiresAt: new Date((decoded as any).exp * 1000)\n    };\n\n    logger.debug(`Optional auth: User authenticated: ",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/middleware/authMiddleware.ts",
        "start": 161,
        "end": 184,
        "startLoc": {
          "line": 161,
          "column": 5,
          "position": 1299
        },
        "endLoc": {
          "line": 184,
          "column": 37,
          "position": 1495
        }
      },
      "secondFile": {
        "name": "packages/backend/src/middleware/authMiddleware.ts",
        "start": 51,
        "end": 74,
        "startLoc": {
          "line": 51,
          "column": 5,
          "position": 349
        },
        "endLoc": {
          "line": 74,
          "column": 22,
          "position": 545
        }
      }
    },
    {
      "format": "typescript",
      "lines": 23,
      "fragment": "= async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const imageId = req.params.imageId;\n    const versionStr = req.params.version;\n    \n    if (!imageId) {\n      throw new ApiError(400, 'Image ID is required');\n    }\n    \n    if (!versionStr) {\n      throw new ApiError(400, 'Version is required');\n    }\n    \n    const version = parseInt(versionStr, 10);\n    if (isNaN(version) || version <= 0) {\n      throw new ApiError(400, 'Invalid version number');\n    }\n    \n    const result",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/controllers/segmentationController.ts",
        "start": 191,
        "end": 213,
        "startLoc": {
          "line": 191,
          "column": 2,
          "position": 1264
        },
        "endLoc": {
          "line": 213,
          "column": 7,
          "position": 1447
        }
      },
      "secondFile": {
        "name": "packages/backend/src/controllers/segmentationController.ts",
        "start": 158,
        "end": 180,
        "startLoc": {
          "line": 158,
          "column": 2,
          "position": 1017
        },
        "endLoc": {
          "line": 180,
          "column": 12,
          "position": 1200
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "export interface UserProfile {\n  user_id: string;\n  username: string | null;\n  full_name: string | null;\n  title: string | null;\n  organization: string | null;\n  bio: string | null;\n  location: string | null;\n  avatar_url: string | null;\n  preferred_language: string | null;\n  preferred_theme",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/user.ts",
        "start": 14,
        "end": 24,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 64
        },
        "endLoc": {
          "line": 24,
          "column": 16,
          "position": 168
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/types/userProfile.ts",
        "start": 1,
        "end": 11,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 11,
          "column": 94,
          "position": 104
        }
      }
    },
    {
      "format": "typescript",
      "lines": 46,
      "fragment": "/**\n * User and authentication related types\n */\nexport interface User {\n    id: string;\n    email: string;\n    name?: string;\n    role?: 'user' | 'admin';\n    created_at?: string;\n    updated_at?: string;\n}\nexport interface UserProfile {\n    user_id: string;\n    username: string | null;\n    full_name: string | null;\n    title: string | null;\n    organization: string | null;\n    bio: string | null;\n    location: string | null;\n    avatar_url: string | null;\n    preferred_language: string | null;\n    preferred_theme?: 'light' | 'dark' | 'system' | null;\n    storage_limit_bytes?: number | null;\n    storage_used_bytes?: number | null;\n}\nexport interface LoginResponse {\n    token: string;\n    user: User;\n}\nexport interface RefreshTokenResponse {\n    token: string;\n    expires_at: string;\n}\nexport type UserProfileUpdatePayload = Partial<Omit<UserProfile, 'user_id'>>;\nexport interface AccessRequestPayload {\n    email: string;\n    name?: string;\n    organization?: string;\n    reason?: string;\n}\nexport interface AccessRequestResponse {\n    id: string;\n    email: string;\n    status: string;\n    created_at: string;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/user.d.ts",
        "start": 1,
        "end": 46,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 355
        }
      },
      "secondFile": {
        "name": "packages/types/src/user.ts",
        "start": 1,
        "end": 53,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 362
        }
      }
    },
    {
      "format": "typescript",
      "lines": 48,
      "fragment": "}\nexport interface SegmentationData {\n    id: string;\n    image_id?: string;\n    imageId?: string;\n    status?: ImageStatus;\n    result_data?: {\n        polygons: Polygon[];\n        [key: string]: any;\n    };\n    polygons: Polygon[];\n    created_at?: string;\n    updated_at?: string;\n    parameters?: {\n        model?: string;\n        threshold?: number;\n        [key: string]: any;\n    };\n    [key: string]: any;\n}\nexport interface SegmentationResult {\n    id: string;\n    polygons: Polygon[];\n    [key: string]: any;\n}\nexport interface SegmentationResultData {\n    polygons?: Polygon[];\n    contours?: Array<Array<[number, number]>>;\n    hierarchy?: Array<[number, number, number, number]>;\n    imageWidth: number;\n    imageHeight: number;\n    metadata?: {\n        source?: 'resunet' | 'api' | 'empty' | 'cv2';\n        timestamp?: string;\n        modelType?: string;\n        [key: string]: unknown;\n    };\n}\nexport interface SegmentationApiResponse {\n    image_id: string;\n    status: ImageStatus;\n    result_data?: SegmentationResultData | null;\n    parameters?: Record<string, unknown> | null;\n    created_at: string;\n    updated_at: string;\n    error?: string | null;\n}\nexport type CanvasSegmentationData = SegmentationResultData;",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/segmentation.d.ts",
        "start": 12,
        "end": 59,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 502
        }
      },
      "secondFile": {
        "name": "packages/types/src/segmentation.ts",
        "start": 15,
        "end": 67,
        "startLoc": {
          "line": 15,
          "column": 1,
          "position": 92
        },
        "endLoc": {
          "line": 67,
          "column": 2,
          "position": 509
        }
      }
    },
    {
      "format": "typescript",
      "lines": 30,
      "fragment": "/**\n * Project related types\n */\nexport interface Project {\n    id: string;\n    user_id: string;\n    title: string;\n    description: string | null;\n    created_at: string;\n    updated_at: string;\n    thumbnail_url?: string | null;\n    image_count?: number;\n}\nexport type ProjectCreatePayload = Pick<Project, 'title' | 'description'>;\nexport interface ProjectStatsResponse {\n    user_id: string;\n    project_count: number;\n    image_count: number;\n    segmentation_count: number;\n    recently_updated_projects: Array<{\n        id: string;\n        title: string;\n        updated_at: string;\n    }>;\n    storage_usage: {\n        total_bytes: number;\n        images_bytes: number;\n        segmentations_bytes: number;\n    };\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/project.d.ts",
        "start": 1,
        "end": 30,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 200
        }
      },
      "secondFile": {
        "name": "packages/types/src/project.ts",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 203
        }
      }
    },
    {
      "format": "typescript",
      "lines": 44,
      "fragment": "/**\n * Types related to polygons and geometric objects\n */\nexport interface Point {\n    x: number;\n    y: number;\n}\nexport interface Polygon {\n    id: string;\n    points: Point[];\n    type?: 'external' | 'internal';\n    class?: string;\n    color?: string;\n    parentId?: string;\n    [key: string]: any;\n}\nexport interface VertexHoverInfo {\n    polygonId: string | null;\n    vertexIndex: number | null;\n}\nexport interface VertexDragInfo {\n    polygonId: string | null;\n    vertexIndex: number | null;\n    isDragging: boolean;\n}\nexport interface DragInfo {\n    isDragging: boolean;\n    startX: number;\n    startY: number;\n    lastX: number;\n    lastY: number;\n}\nexport interface TempPointsInfo {\n    points: Point[];\n    polygonId?: string | null;\n    startIndex?: number | null;\n    endIndex?: number | null;\n}\nexport interface TransformState {\n    zoom: number;\n    translateX: number;\n    translateY: number;\n}\nexport declare",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/polygon.d.ts",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 8,
          "position": 304
        }
      },
      "secondFile": {
        "name": "packages/types/src/polygon.ts",
        "start": 1,
        "end": 52,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 52,
          "column": 5,
          "position": 312
        }
      }
    },
    {
      "format": "typescript",
      "lines": 51,
      "fragment": "/**\n * Image related types\n */\nimport { ImageStatus } from './segmentation';\nexport interface ImageData {\n    id: string;\n    name: string;\n    width: number;\n    height: number;\n    src: string;\n    storage_path?: string;\n    storage_path_full?: string;\n    project_id?: string;\n    projectId?: string;\n    user_id?: string;\n    created_at?: string;\n    updated_at?: string;\n    status?: ImageStatus;\n    actualId?: string;\n    [key: string]: any;\n}\nexport interface Image {\n    id: string;\n    project_id: string;\n    user_id: string;\n    name: string;\n    storage_path: string;\n    thumbnail_path: string | null;\n    width: number | null;\n    height: number | null;\n    metadata: Record<string, unknown> | null;\n    status: ImageStatus;\n    created_at: string;\n    updated_at: string;\n    segmentation_result?: {\n        path?: string | null;\n    } | null;\n}\nexport interface ProjectImage {\n    id: string;\n    project_id: string;\n    name: string;\n    url: string;\n    thumbnail_url: string | null;\n    createdAt: Date;\n    updatedAt: Date;\n    width: number | null;\n    height: number | null;\n    segmentationStatus: ImageStatus;\n    segmentationResultPath?: string | null;\n}",
      "tokens": 0,
      "firstFile": {
        "name": "packages/types/src/image.d.ts",
        "start": 1,
        "end": 51,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 389
        }
      },
      "secondFile": {
        "name": "packages/types/src/image.ts",
        "start": 1,
        "end": 55,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 393
        }
      }
    },
    {
      "format": "javascript",
      "lines": 15,
      "fragment": " />\n        </ErrorBoundary>\n      </ProtectedRoute>\n    } />\n    {/* Ensure both URL formats work properly */}\n    <Route path=\"/projects/:id\" element={\n      <ProtectedRoute>\n        <ErrorBoundary componentName=\"ProjectDetailPage\">\n          <ProjectDetail />\n        </ErrorBoundary>\n      </ProtectedRoute>\n    } />\n    <Route path=\"/projects/:projectId/segmentation/:imageId\" element={\n      <ProtectedRoute>\n        <ErrorBoundary componentName=\"SegmentationPage",
      "tokens": 0,
      "firstFile": {
        "name": "packages/frontend/src/App.tsx",
        "start": 266,
        "end": 280,
        "startLoc": {
          "line": 266,
          "column": 14,
          "position": 2261
        },
        "endLoc": {
          "line": 280,
          "column": 17,
          "position": 2350
        }
      },
      "secondFile": {
        "name": "packages/frontend/src/App.tsx",
        "start": 258,
        "end": 273,
        "startLoc": {
          "line": 258,
          "column": 10,
          "position": 2211
        },
        "endLoc": {
          "line": 273,
          "column": 18,
          "position": 2305
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ") {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Registration attempt:'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 99,
        "end": 109,
        "startLoc": {
          "line": 99,
          "column": 17,
          "position": 885
        },
        "endLoc": {
          "line": 109,
          "column": 24,
          "position": 974
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 14,
          "position": 477
        },
        "endLoc": {
          "line": 62,
          "column": 17,
          "position": 566
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "}));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle refresh token endpoint - support multiple paths for compatibility",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 131,
        "end": 143,
        "startLoc": {
          "line": 131,
          "column": 11,
          "position": 1203
        },
        "endLoc": {
          "line": 143,
          "column": 76,
          "position": 1288
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 86,
        "end": 98,
        "startLoc": {
          "line": 86,
          "column": 11,
          "position": 779
        },
        "endLoc": {
          "line": 98,
          "column": 71,
          "position": 864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ") {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Token refresh attempt'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 144,
        "end": 154,
        "startLoc": {
          "line": 144,
          "column": 16,
          "position": 1309
        },
        "endLoc": {
          "line": 154,
          "column": 24,
          "position": 1398
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 14,
          "position": 477
        },
        "endLoc": {
          "line": 62,
          "column": 17,
          "position": 566
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Refresh token is required\"",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 161,
        "end": 169,
        "startLoc": {
          "line": 161,
          "column": 13,
          "position": 1451
        },
        "endLoc": {
          "line": 169,
          "column": 28,
          "position": 1536
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 122,
        "end": 130,
        "startLoc": {
          "line": 122,
          "column": 13,
          "position": 1115
        },
        "endLoc": {
          "line": 130,
          "column": 34,
          "position": 1200
        }
      }
    },
    {
      "format": "javascript",
      "lines": 13,
      "fragment": "}));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle logout endpoint - support multiple paths for compatibility",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 170,
        "end": 182,
        "startLoc": {
          "line": 170,
          "column": 11,
          "position": 1539
        },
        "endLoc": {
          "line": 182,
          "column": 69,
          "position": 1624
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 86,
        "end": 98,
        "startLoc": {
          "line": 86,
          "column": 11,
          "position": 779
        },
        "endLoc": {
          "line": 98,
          "column": 71,
          "position": 864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ") {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Logout attempt'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 183,
        "end": 193,
        "startLoc": {
          "line": 183,
          "column": 15,
          "position": 1645
        },
        "endLoc": {
          "line": 193,
          "column": 17,
          "position": 1734
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 14,
          "position": 477
        },
        "endLoc": {
          "line": 62,
          "column": 17,
          "position": 566
        }
      }
    },
    {
      "format": "javascript",
      "lines": 11,
      "fragment": ") {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Creating project with data:'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 381,
        "end": 391,
        "startLoc": {
          "line": 381,
          "column": 7,
          "position": 3412
        },
        "endLoc": {
          "line": 391,
          "column": 30,
          "position": 3501
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 14,
          "position": 477
        },
        "endLoc": {
          "line": 62,
          "column": 17,
          "position": 566
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle DELETE project",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 434,
        "end": 445,
        "startLoc": {
          "line": 434,
          "column": 11,
          "position": 3932
        },
        "endLoc": {
          "line": 445,
          "column": 25,
          "position": 4013
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 200,
        "end": 211,
        "startLoc": {
          "line": 200,
          "column": 2,
          "position": 1783
        },
        "endLoc": {
          "line": 211,
          "column": 5,
          "position": 1864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "// Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n\n        res",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 491,
        "end": 499,
        "startLoc": {
          "line": 491,
          "column": 9,
          "position": 4465
        },
        "endLoc": {
          "line": 499,
          "column": 4,
          "position": 4545
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 256,
        "end": 263,
        "startLoc": {
          "line": 256,
          "column": 9,
          "position": 2334
        },
        "endLoc": {
          "line": 263,
          "column": 2,
          "position": 2413
        }
      }
    },
    {
      "format": "javascript",
      "lines": 9,
      "fragment": "let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Received batch segmentation request:'",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 519,
        "end": 527,
        "startLoc": {
          "line": 519,
          "column": 5,
          "position": 4712
        },
        "endLoc": {
          "line": 527,
          "column": 39,
          "position": 4793
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 54,
        "end": 62,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 485
        },
        "endLoc": {
          "line": 62,
          "column": 17,
          "position": 566
        }
      }
    },
    {
      "format": "javascript",
      "lines": 12,
      "fragment": "}));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle Socket.IO endpoint",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 537,
        "end": 548,
        "startLoc": {
          "line": 537,
          "column": 9,
          "position": 4892
        },
        "endLoc": {
          "line": 548,
          "column": 29,
          "position": 4974
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 200,
        "end": 211,
        "startLoc": {
          "line": 200,
          "column": 9,
          "position": 1782
        },
        "endLoc": {
          "line": 211,
          "column": 5,
          "position": 1864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 10,
      "fragment": ") {\n      // Extract session ID from URL\n      const sidMatch = pathname.match(/\\/socket\\.io\\/([^/]+)\\/polling\\//);\n      const sid = sidMatch ? sidMatch[1] : null;\n\n      if (sid && socketSessions.has(sid)) {\n        const session = socketSessions.get(sid);\n        session.lastActivity = Date.now();\n\n        // Read request body",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 738,
        "end": 747,
        "startLoc": {
          "line": 738,
          "column": 7,
          "position": 6777
        },
        "endLoc": {
          "line": 747,
          "column": 21,
          "position": 6870
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 708,
        "end": 717,
        "startLoc": {
          "line": 708,
          "column": 2,
          "position": 6510
        },
        "endLoc": {
          "line": 717,
          "column": 44,
          "position": 6603
        }
      }
    },
    {
      "format": "javascript",
      "lines": 278,
      "fragment": "// Simple HTTP server without dependencies\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  console.log(`${req.method} ${req.url}`);\n\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.statusCode = 204;\n    res.end();\n    return;\n  }\n\n  // Parse URL\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const pathname = url.pathname;\n\n  // Handle API endpoints\n  if (pathname === '/api/health') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"OK\",\n      timestamp: new Date().toISOString(),\n      service: \"backend-simple\"\n    }));\n  }\n  else if (pathname === '/api/status') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"running\",\n      version: \"1.0.0\",\n      environment: process.env.NODE_ENV || \"development\",\n      uptime: process.uptime()\n    }));\n  }\n  else if (pathname === '/api/metrics/performance') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({ success: true }));\n  }\n  // Support multiple paths for login (compatibility with standard Express router)\n  else if (pathname === '/api/auth/login' || pathname === '/auth/login') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Login attempt:', data.email);\n\n        // Simple mock authentication\n        if (data.email && data.password) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 200;\n          res.end(JSON.stringify({\n            user: {\n              id: \"user-12bprusek-gym-nymburk-cz\",\n              email: data.email,\n              name: \"Michal Průšek\",\n              created_at: new Date().toISOString(),\n              preferred_language: \"en\",\n              theme_preference: \"dark\"\n            },\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 401;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Invalid email or password\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle register endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/register' || pathname === '/auth/register') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Registration attempt:', data.email);\n\n        // Simple mock registration\n        if (data.email && data.password) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 201;\n          res.end(JSON.stringify({\n            user: {\n              id: \"user-\" + data.email.replace(/[^a-zA-Z0-9]/g, '-'),\n              email: data.email,\n              name: data.name || data.email.split('@')[0],\n              created_at: new Date().toISOString()\n            },\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Email and password are required\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle refresh token endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/refresh' || pathname === '/auth/refresh') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Token refresh attempt');\n\n        // Simple mock token refresh\n        if (data.refreshToken) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 200;\n          res.end(JSON.stringify({\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Refresh token is required\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle logout endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/logout' || pathname === '/auth/logout') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Logout attempt');\n\n        // Simple mock logout\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 200;\n        res.end(JSON.stringify({\n          message: \"Logged out successfully\"\n        }));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  else if (pathname === '/api/users/me' || pathname === '/users/me') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      id: \"user-12bprusek-gym-nymburk-cz\",\n      email: \"12bprusek@gym-nymburk.cz\",\n      name: \"Michal Průšek\",\n      role: \"admin\",\n      created_at: new Date().toISOString(),\n      profile: {\n        preferred_language: \"en\",\n        theme_preference: \"dark\"\n      }\n    }));\n  }\n  else if (pathname === '/api/users/me/statistics' || pathname === '/api/users/me/stats') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      projects_count: 5,\n      images_count: 120,\n      segmentations_count: 98,\n      last_login: new Date().toISOString()\n    }));\n  }\n  else if (pathname === '/api/projects' && req.method === 'GET') {\n    // Parse query parameters\n    const limit = parseInt(url.searchParams.get('limit')) || 10;\n    const offset = parseInt(url.searchParams.get('offset')) || 0;\n\n    // Load projects from file\n    let projects = [];\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        try {\n          projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          console.log(`Loaded ${projects.length} projects`);\n        } catch (parseError) {\n          console.error('Error parsing projects file:', parseError);\n        }\n      } else {\n        console.log('Projects file not found, creating empty file');\n        // Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n      }\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    }\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      projects,\n      total: projects.length,\n      limit,\n      offset\n    }));\n  }\n  // Handle specific project details\n  else if (pathname.match(/^\\/api\\/projects\\/project-/))",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.fix.js",
        "start": 1,
        "end": 278,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 278,
          "column": 2,
          "position": 2519
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 1,
        "end": 278,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 278,
          "column": 3,
          "position": 2520
        }
      }
    },
    {
      "format": "javascript",
      "lines": 168,
      "fragment": ") {\n    const projectId = pathname.split('/').pop();\n\n    // Try to find project in data\n    let project = null;\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        try {\n          const projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          project = projects.find(p => p.id === projectId);\n          console.log(`Looking for project ${projectId}, found: ${project ? 'yes' : 'no'}`);\n        } catch (parseError) {\n          console.error('Error parsing projects file:', parseError);\n        }\n      }\n    } catch (error) {\n      console.error('Error finding project:', error);\n    }\n\n    if (project) {\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 200;\n      res.end(JSON.stringify(project));\n    } else {\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 404;\n      res.end(JSON.stringify({\n        error: \"Project not found\",\n        message: \"The requested project does not exist\"\n      }));\n    }\n  }\n  // Handle queue status\n  else if (pathname.match(/^\\/api\\/queue-status\\/project-\\d+$/)) {\n    const projectId = pathname.split('/').pop();\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      project_id: projectId,\n      total_images: 15,\n      processed_images: 12,\n      pending_images: 3,\n      failed_images: 0,\n      status: \"processing\",\n      last_updated: new Date().toISOString()\n    }));\n  }\n  // Handle project images\n  else if (pathname.match(/^\\/api\\/projects\\/project-\\d+\\/images$/)) {\n    const projectId = pathname.split('/')[3];\n\n    // Create mock images for project\n    const mockImages = [\n      {\n        id: `image-1-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 1\",\n        file_path: \"/uploads/sample1.jpg\",\n        thumbnail_path: \"/uploads/sample1_thumb.jpg\",\n        width: 800,\n        height: 600,\n        file_size: 120000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      },\n      {\n        id: `image-2-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 2\",\n        file_path: \"/uploads/sample2.jpg\",\n        thumbnail_path: \"/uploads/sample2_thumb.jpg\",\n        width: 1024,\n        height: 768,\n        file_size: 150000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      },\n      {\n        id: `image-3-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 3\",\n        file_path: \"/uploads/sample3.jpg\",\n        thumbnail_path: \"/uploads/sample3_thumb.jpg\",\n        width: 1280,\n        height: 720,\n        file_size: 180000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      }\n    ];\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify(mockImages));\n  }\n  // Handle API POST to /api/projects\n  else if (pathname === '/api/projects' && req.method === 'POST') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Creating project with data:', data);\n\n        const newProject = {\n          id: `project-${Date.now()}`,\n          name: data.name,\n          description: data.description || '',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          user_id: \"user-12bprusek-gym-nymburk-cz\",\n          status: \"active\",\n          image_count: 0\n        };\n\n        // Try to save to mock projects file\n        try {\n          const fs = require('fs');\n          const path = require('path');\n          const mockDataDir = path.join(__dirname, 'mock-data');\n          const mockProjectsPath = path.join(mockDataDir, 'projects.json');\n          let projects = [];\n\n          if (fs.existsSync(mockProjectsPath)) {\n            try {\n              projects = JSON.parse(fs.readFileSync(mockProjectsPath, 'utf8'));\n              console.log(`Loaded ${projects.length} existing projects`);\n            } catch (parseError) {\n              console.error('Error parsing projects file, starting with empty projects:', parseError);\n              projects = [];\n            }\n          } else {\n            console.log('Projects file not found, creating new file');\n            fs.mkdirSync(path.dirname(mockProjectsPath), { recursive: true });\n          }\n\n          projects.push(newProject);\n          fs.writeFileSync(mockProjectsPath, JSON.stringify(projects, null, 2));\n          console.log(`Added new project to data: ${newProject.id}`);\n        } catch (error) {\n          console.error('Error saving project to data:', error);\n        }\n\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 201;\n        res.end(JSON.stringify(newProject));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle batch segmentation endpoint",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.fix.js",
        "start": 278,
        "end": 445,
        "startLoc": {
          "line": 278,
          "column": 2,
          "position": 2519
        },
        "endLoc": {
          "line": 445,
          "column": 38,
          "position": 4003
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 278,
        "end": 211,
        "startLoc": {
          "line": 278,
          "column": 6,
          "position": 2529
        },
        "endLoc": {
          "line": 211,
          "column": 5,
          "position": 1864
        }
      }
    },
    {
      "format": "javascript",
      "lines": 65,
      "fragment": "}\n  // Handle batch segmentation endpoint\n  else if (pathname === '/images/segmentation/trigger-batch' || pathname === '/api/images/segmentation/trigger-batch') {\n    // Parse request body for batch segmentation\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Received batch segmentation request:', data);\n\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 200;\n        res.end(JSON.stringify({\n          success: true,\n          message: 'Batch segmentation triggered successfully',\n          jobId: 'mock-job-' + Date.now(),\n          imageIds: data.imageIds || [],\n          timestamp: new Date().toISOString()\n        }));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle Socket.IO endpoint\n  else if (pathname === '/socket.io' || pathname.startsWith('/socket.io/')) {\n    handleSocketIORequest(req, res);\n  }\n  // Handle static files from uploads directory\n  else if (pathname.startsWith('/uploads/')) {\n    const filePath = path.join(__dirname, '..', pathname);\n\n    // Check if file exists\n    fs.access(filePath, fs.constants.F_OK, (err) => {\n      if (err) {\n        res.statusCode = 404;\n        res.end(JSON.stringify({ error: \"File not found\" }));\n        return;\n      }\n\n      // Determine content type\n      let contentType = 'application/octet-stream';\n      if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {\n        contentType = 'image/jpeg';\n      } else if (filePath.endsWith('.png')) {\n        contentType = 'image/png';\n      } else if (filePath.endsWith('.json')) {\n        contentType = 'application/json';\n      }\n\n      // Stream the file\n      res.setHeader('Content-Type', contentType);\n      fs.createReadStream(filePath).pipe(res);\n    });\n  }\n  // Handle DELETE project",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.fix.js",
        "start": 444,
        "end": 508,
        "startLoc": {
          "line": 444,
          "column": 3,
          "position": 4000
        },
        "endLoc": {
          "line": 508,
          "column": 25,
          "position": 4586
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 515,
        "end": 579,
        "startLoc": {
          "line": 515,
          "column": 3,
          "position": 4680
        },
        "endLoc": {
          "line": 579,
          "column": 34,
          "position": 5266
        }
      }
    },
    {
      "format": "javascript",
      "lines": 74,
      "fragment": "});\n  }\n  // Handle DELETE project\n  else if (pathname.match(/^\\/api\\/projects\\/project-/) && req.method === 'DELETE') {\n    const projectId = pathname.split('/').pop();\n    console.log(`Deleting project with ID: ${projectId}`);\n\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n\n      if (fs.existsSync(projectsPath)) {\n        try {\n          let projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          const initialLength = projects.length;\n\n          // Find the project index\n          const projectIndex = projects.findIndex(p => p.id === projectId);\n\n          if (projectIndex !== -1) {\n            // Remove the project\n            projects.splice(projectIndex, 1);\n            fs.writeFileSync(projectsPath, JSON.stringify(projects, null, 2));\n            console.log(`Project ${projectId} deleted. Projects remaining: ${projects.length}`);\n\n            // Return 204 status code (success with no content) to match the real API\n            res.statusCode = 204;\n            res.end();\n          } else {\n            console.error(`Project ${projectId} not found for deletion`);\n            res.statusCode = 404;\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify({\n              error: \"Project not found\",\n              message: \"The requested project does not exist or has already been deleted\"\n            }));\n          }\n        } catch (parseError) {\n          console.error('Error parsing projects file for deletion:', parseError);\n          res.statusCode = 500;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            error: \"Internal server error\",\n            message: \"Error reading project data\"\n          }));\n        }\n      } else {\n        // Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n\n        res.statusCode = 404;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: \"Project not found\",\n          message: \"No projects data available\"\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting project:', error);\n      res.statusCode = 500;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({\n        error: \"Internal server error\",\n        message: error.message\n      }));\n    }\n  }\n  // Add support for project images endpoint",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.fix.js",
        "start": 506,
        "end": 579,
        "startLoc": {
          "line": 506,
          "column": 5,
          "position": 4578
        },
        "endLoc": {
          "line": 579,
          "column": 43,
          "position": 5256
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 443,
        "end": 516,
        "startLoc": {
          "line": 443,
          "column": 5,
          "position": 4005
        },
        "endLoc": {
          "line": 516,
          "column": 38,
          "position": 4683
        }
      }
    },
    {
      "format": "javascript",
      "lines": 229,
      "fragment": "else if (pathname.match(/^\\/api\\/projects\\/project-.*\\/images$/)) {\n    const projectId = pathname.split('/')[3]; // Extract project ID from URL\n\n    // Try to find project\n    let project = null;\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        const projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n        project = projects.find(p => p.id === projectId);\n      }\n    } catch (error) {\n      console.error('Error finding project for images:', error);\n    }\n\n    if (project) {\n      // Return sample images for the project\n      const sampleImages = Array.from({ length: project.image_count || 0 }).map((_, index) => ({\n        id: `image-${index + 1}-${projectId}`,\n        project_id: projectId,\n        name: `Image ${index + 1}`,\n        file_path: `/uploads/sample${index + 1}.jpg`,\n        thumbnail_path: `/uploads/sample${index + 1}_thumb.jpg`,\n        width: 800 + index * 100,\n        height: 600 + index * 50,\n        file_size: 120000 + index * 10000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        status: \"processed\"\n      }));\n\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 200;\n      res.end(JSON.stringify(sampleImages));\n    } else {\n      res.statusCode = 404;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({\n        error: \"Project not found\",\n        message: \"The requested project does not exist\"\n      }));\n    }\n  }\n  // Default 404 handler\n  else {\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({ error: \"Not found\" }));\n  }\n});\n\n// Create uploads directory if it doesn't exist\nconst UPLOADS_DIR = path.join(__dirname, '../uploads');\nif (!fs.existsSync(UPLOADS_DIR)) {\n  fs.mkdirSync(UPLOADS_DIR, { recursive: true });\n  console.log(`Created uploads directory: ${UPLOADS_DIR}`);\n}\n\n// Create mock-data directory if it doesn't exist\nconst MOCK_DATA_DIR = path.join(__dirname, 'mock-data');\nif (!fs.existsSync(MOCK_DATA_DIR)) {\n  fs.mkdirSync(MOCK_DATA_DIR, { recursive: true });\n  console.log(`Created mock-data directory: ${MOCK_DATA_DIR}`);\n  \n  // Create empty projects.json file if it doesn't exist\n  const PROJECTS_FILE = path.join(MOCK_DATA_DIR, 'projects.json');\n  if (!fs.existsSync(PROJECTS_FILE)) {\n    fs.writeFileSync(PROJECTS_FILE, JSON.stringify([]));\n    console.log(`Created empty projects.json file`);\n  }\n}\n\n// Add a simple Socket.IO mock implementation\n// We'll use HTTP long polling instead of WebSockets since we don't have ws installed\nconst socketSessions = new Map();\n\n// Generate a random session ID\nconst generateSessionId = () => {\n  return Math.random().toString(36).substring(2, 15) +\n         Math.random().toString(36).substring(2, 15);\n};\n\n// Handle Socket.IO HTTP requests\nconst handleSocketIORequest = (req, res) => {\n  // Parse URL to get the specific Socket.IO endpoint\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const pathname = url.pathname;\n  const query = Object.fromEntries(url.searchParams.entries());\n\n  // Handle different Socket.IO endpoints\n  if (pathname.includes('/socket.io/')) {\n    // Handle handshake request (first request in Socket.IO connection)\n    if (pathname === '/socket.io/' && req.method === 'GET') {\n      // Create a new session\n      const sid = generateSessionId();\n      const session = {\n        id: sid,\n        createdAt: Date.now(),\n        lastActivity: Date.now(),\n        messages: []\n      };\n\n      socketSessions.set(sid, session);\n\n      // Send a valid Socket.IO handshake response\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.statusCode = 200;\n\n      // Format: <length>:<packet type><data>\n      // 0 = open packet\n      const handshakeData = JSON.stringify({\n        sid: sid,\n        upgrades: [\"websocket\", \"polling\"],\n        pingInterval: 25000,\n        pingTimeout: 20000,\n        maxPayload: 1000000\n      });\n\n      const packet = `0${handshakeData}`;\n      const response = `${packet.length}:${packet}`;\n\n      console.log(`Socket.IO handshake: created session ${sid}`);\n      res.end(response);\n    }\n    // Handle polling requests (subsequent GET requests)\n    else if (pathname.includes('/socket.io/') && req.method === 'GET' && pathname.includes('/polling/')) {\n      // Extract session ID from URL\n      const sidMatch = pathname.match(/\\/socket\\.io\\/([^/]+)\\/polling\\//);\n      const sid = sidMatch ? sidMatch[1] : null;\n\n      if (sid && socketSessions.has(sid)) {\n        const session = socketSessions.get(sid);\n        session.lastActivity = Date.now();\n\n        // If there are messages to send, send them\n        if (session.messages.length > 0) {\n          const messages = session.messages;\n          session.messages = [];\n\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end(messages.join(''));\n        } else {\n          // No messages, send empty response\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end('');\n        }\n      } else {\n        // Invalid session\n        res.statusCode = 400;\n        res.end('Invalid session');\n      }\n    }\n    // Handle POST requests (client sending messages)\n    else if (req.method === 'POST') {\n      // Extract session ID from URL\n      const sidMatch = pathname.match(/\\/socket\\.io\\/([^/]+)\\/polling\\//);\n      const sid = sidMatch ? sidMatch[1] : null;\n\n      if (sid && socketSessions.has(sid)) {\n        const session = socketSessions.get(sid);\n        session.lastActivity = Date.now();\n\n        // Read request body\n        let body = '';\n        req.on('data', chunk => {\n          body += chunk.toString();\n        });\n\n        req.on('end', () => {\n          console.log(`Socket.IO message from client (${sid}):`, body);\n\n          // Acknowledge the message\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end('ok');\n        });\n      } else {\n        // Invalid session\n        res.statusCode = 400;\n        res.end('Invalid session');\n      }\n    }\n    else {\n      // Unknown Socket.IO request\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.statusCode = 400;\n      res.end('Invalid Socket.IO request');\n    }\n  } else {\n    // Default Socket.IO response\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"ok\",\n      message: \"Socket.IO endpoint mock - real-time updates not available in simple server mode\",\n      timestamp: new Date().toISOString()\n    }));\n  }\n};\n\n// Handle WebSocket upgrade requests\nserver.on('upgrade', (request, socket, head) => {\n  // We don't support WebSockets in this simple server\n  // Just close the connection, the client will fall back to polling\n  console.log('WebSocket upgrade request received, but not supported');\n  socket.write('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  socket.destroy();\n});\n\n// Start server\nconst PORT = process.env.PORT || 5001;\nserver.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server started on http://0.0.0.0:${PORT}`);\n  console.log(`Environment: ${process.env.NODE_ENV || \"development\"}`);\n  console.log(`Socket.IO endpoint available at /socket.io (with WebSocket support)`);\n  \n  // Log available authentication endpoints for diagnostics\n  console.log(\"Available authentication endpoints:\");\n  console.log(\"- POST /api/auth/login (or /auth/login)\");\n  console.log(\"- POST /api/auth/register (or /auth/register)\");\n  console.log(\"- POST /api/auth/refresh (or /auth/refresh)\");\n  console.log(\"- POST /api/auth/logout (or /auth/logout)\");\n  console.log(\"- GET /api/users/me (or /users/me)\");\n});",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server.fix.js",
        "start": 580,
        "end": 808,
        "startLoc": {
          "line": 580,
          "column": 3,
          "position": 5259
        },
        "endLoc": {
          "line": 808,
          "column": 2,
          "position": 7336
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 580,
        "end": 808,
        "startLoc": {
          "line": 580,
          "column": 3,
          "position": 5269
        },
        "endLoc": {
          "line": 808,
          "column": 2,
          "position": 7346
        }
      }
    },
    {
      "format": "javascript",
      "lines": 808,
      "fragment": "// Simple HTTP server without dependencies\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  console.log(`${req.method} ${req.url}`);\n\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.statusCode = 204;\n    res.end();\n    return;\n  }\n\n  // Parse URL\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const pathname = url.pathname;\n\n  // Handle API endpoints\n  if (pathname === '/api/health') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"OK\",\n      timestamp: new Date().toISOString(),\n      service: \"backend-simple\"\n    }));\n  }\n  else if (pathname === '/api/status') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"running\",\n      version: \"1.0.0\",\n      environment: process.env.NODE_ENV || \"development\",\n      uptime: process.uptime()\n    }));\n  }\n  else if (pathname === '/api/metrics/performance') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({ success: true }));\n  }\n  // Support multiple paths for login (compatibility with standard Express router)\n  else if (pathname === '/api/auth/login' || pathname === '/auth/login') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Login attempt:', data.email);\n\n        // Simple mock authentication\n        if (data.email && data.password) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 200;\n          res.end(JSON.stringify({\n            user: {\n              id: \"user-12bprusek-gym-nymburk-cz\",\n              email: data.email,\n              name: \"Michal Průšek\",\n              created_at: new Date().toISOString(),\n              preferred_language: \"en\",\n              theme_preference: \"dark\"\n            },\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 401;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Invalid email or password\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle register endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/register' || pathname === '/auth/register') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Registration attempt:', data.email);\n\n        // Simple mock registration\n        if (data.email && data.password) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 201;\n          res.end(JSON.stringify({\n            user: {\n              id: \"user-\" + data.email.replace(/[^a-zA-Z0-9]/g, '-'),\n              email: data.email,\n              name: data.name || data.email.split('@')[0],\n              created_at: new Date().toISOString()\n            },\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Email and password are required\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle refresh token endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/refresh' || pathname === '/auth/refresh') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Token refresh attempt');\n\n        // Simple mock token refresh\n        if (data.refreshToken) {\n          res.setHeader('Content-Type', 'application/json');\n          res.statusCode = 200;\n          res.end(JSON.stringify({\n            accessToken: \"mock-access-token-\" + Date.now(),\n            refreshToken: \"mock-refresh-token-\" + Date.now(),\n            tokenType: \"Bearer\"\n          }));\n        } else {\n          res.statusCode = 400;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            message: \"Refresh token is required\"\n          }));\n        }\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle logout endpoint - support multiple paths for compatibility\n  else if (pathname === '/api/auth/logout' || pathname === '/auth/logout') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Logout attempt');\n\n        // Simple mock logout\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 200;\n        res.end(JSON.stringify({\n          message: \"Logged out successfully\"\n        }));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  else if (pathname === '/api/users/me' || pathname === '/users/me') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      id: \"user-12bprusek-gym-nymburk-cz\",\n      email: \"12bprusek@gym-nymburk.cz\",\n      name: \"Michal Průšek\",\n      role: \"admin\",\n      created_at: new Date().toISOString(),\n      profile: {\n        preferred_language: \"en\",\n        theme_preference: \"dark\"\n      }\n    }));\n  }\n  else if (pathname === '/api/users/me/statistics' || pathname === '/api/users/me/stats') {\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      projects_count: 5,\n      images_count: 120,\n      segmentations_count: 98,\n      last_login: new Date().toISOString()\n    }));\n  }\n  else if (pathname === '/api/projects' && req.method === 'GET') {\n    // Parse query parameters\n    const limit = parseInt(url.searchParams.get('limit')) || 10;\n    const offset = parseInt(url.searchParams.get('offset')) || 0;\n\n    // Load projects from file\n    let projects = [];\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        try {\n          projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          console.log(`Loaded ${projects.length} projects`);\n        } catch (parseError) {\n          console.error('Error parsing projects file:', parseError);\n        }\n      } else {\n        console.log('Projects file not found, creating empty file');\n        // Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n      }\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    }\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      projects,\n      total: projects.length,\n      limit,\n      offset\n    }));\n  }\n  // Handle specific project details\n  else if (pathname.match(/^\\/api\\/projects\\/project-/) && req.method === 'GET') {\n    const projectId = pathname.split('/').pop();\n\n    // Try to find project in data\n    let project = null;\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        try {\n          const projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          project = projects.find(p => p.id === projectId);\n          console.log(`Looking for project ${projectId}, found: ${project ? 'yes' : 'no'}`);\n        } catch (parseError) {\n          console.error('Error parsing projects file:', parseError);\n        }\n      }\n    } catch (error) {\n      console.error('Error finding project:', error);\n    }\n\n    if (project) {\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 200;\n      res.end(JSON.stringify(project));\n    } else {\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 404;\n      res.end(JSON.stringify({\n        error: \"Project not found\",\n        message: \"The requested project does not exist\"\n      }));\n    }\n  }\n  // Handle queue status\n  else if (pathname.match(/^\\/api\\/queue-status\\/project-\\d+$/)) {\n    const projectId = pathname.split('/').pop();\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      project_id: projectId,\n      total_images: 15,\n      processed_images: 12,\n      pending_images: 3,\n      failed_images: 0,\n      status: \"processing\",\n      last_updated: new Date().toISOString()\n    }));\n  }\n  // Handle project images\n  else if (pathname.match(/^\\/api\\/projects\\/project-\\d+\\/images$/)) {\n    const projectId = pathname.split('/')[3];\n\n    // Create mock images for project\n    const mockImages = [\n      {\n        id: `image-1-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 1\",\n        file_path: \"/uploads/sample1.jpg\",\n        thumbnail_path: \"/uploads/sample1_thumb.jpg\",\n        width: 800,\n        height: 600,\n        file_size: 120000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      },\n      {\n        id: `image-2-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 2\",\n        file_path: \"/uploads/sample2.jpg\",\n        thumbnail_path: \"/uploads/sample2_thumb.jpg\",\n        width: 1024,\n        height: 768,\n        file_size: 150000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      },\n      {\n        id: `image-3-${projectId}`,\n        project_id: projectId,\n        name: \"Sample Image 3\",\n        file_path: \"/uploads/sample3.jpg\",\n        thumbnail_path: \"/uploads/sample3_thumb.jpg\",\n        width: 1280,\n        height: 720,\n        file_size: 180000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        status: \"processed\"\n      }\n    ];\n\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify(mockImages));\n  }\n  // Handle API POST to /api/projects\n  else if (pathname === '/api/projects' && req.method === 'POST') {\n    // Parse request body\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Creating project with data:', data);\n\n        const newProject = {\n          id: `project-${Date.now()}`,\n          name: data.name,\n          description: data.description || '',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          user_id: \"user-12bprusek-gym-nymburk-cz\",\n          status: \"active\",\n          image_count: 0\n        };\n\n        // Try to save to mock projects file\n        try {\n          const fs = require('fs');\n          const path = require('path');\n          const mockDataDir = path.join(__dirname, 'mock-data');\n          const mockProjectsPath = path.join(mockDataDir, 'projects.json');\n          let projects = [];\n\n          if (fs.existsSync(mockProjectsPath)) {\n            try {\n              projects = JSON.parse(fs.readFileSync(mockProjectsPath, 'utf8'));\n              console.log(`Loaded ${projects.length} existing projects`);\n            } catch (parseError) {\n              console.error('Error parsing projects file, starting with empty projects:', parseError);\n              projects = [];\n            }\n          } else {\n            console.log('Projects file not found, creating new file');\n            fs.mkdirSync(path.dirname(mockProjectsPath), { recursive: true });\n          }\n\n          projects.push(newProject);\n          fs.writeFileSync(mockProjectsPath, JSON.stringify(projects, null, 2));\n          console.log(`Added new project to data: ${newProject.id}`);\n        } catch (error) {\n          console.error('Error saving project to data:', error);\n        }\n\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 201;\n        res.end(JSON.stringify(newProject));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle DELETE project\n  else if (pathname.match(/^\\/api\\/projects\\/project-/) && req.method === 'DELETE') {\n    const projectId = pathname.split('/').pop();\n    console.log(`Deleting project with ID: ${projectId}`);\n\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n\n      if (fs.existsSync(projectsPath)) {\n        try {\n          let projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          const initialLength = projects.length;\n\n          // Find the project index\n          const projectIndex = projects.findIndex(p => p.id === projectId);\n\n          if (projectIndex !== -1) {\n            // Remove the project\n            projects.splice(projectIndex, 1);\n            fs.writeFileSync(projectsPath, JSON.stringify(projects, null, 2));\n            console.log(`Project ${projectId} deleted. Projects remaining: ${projects.length}`);\n\n            // Return 204 status code (success with no content) to match the real API\n            res.statusCode = 204;\n            res.end();\n          } else {\n            console.error(`Project ${projectId} not found for deletion`);\n            res.statusCode = 404;\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify({\n              error: \"Project not found\",\n              message: \"The requested project does not exist or has already been deleted\"\n            }));\n          }\n        } catch (parseError) {\n          console.error('Error parsing projects file for deletion:', parseError);\n          res.statusCode = 500;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            error: \"Internal server error\",\n            message: \"Error reading project data\"\n          }));\n        }\n      } else {\n        // Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n\n        res.statusCode = 404;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: \"Project not found\",\n          message: \"No projects data available\"\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting project:', error);\n      res.statusCode = 500;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({\n        error: \"Internal server error\",\n        message: error.message\n      }));\n    }\n  }\n  // Handle batch segmentation endpoint\n  else if (pathname === '/images/segmentation/trigger-batch' || pathname === '/api/images/segmentation/trigger-batch') {\n    // Parse request body for batch segmentation\n    let body = '';\n    req.on('data', chunk => {\n      body += chunk.toString();\n    });\n\n    req.on('end', () => {\n      try {\n        const data = JSON.parse(body);\n        console.log('Received batch segmentation request:', data);\n\n        res.setHeader('Content-Type', 'application/json');\n        res.statusCode = 200;\n        res.end(JSON.stringify({\n          success: true,\n          message: 'Batch segmentation triggered successfully',\n          jobId: 'mock-job-' + Date.now(),\n          imageIds: data.imageIds || [],\n          timestamp: new Date().toISOString()\n        }));\n      } catch (error) {\n        res.statusCode = 400;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: 'Invalid request body',\n          message: error.message\n        }));\n      }\n    });\n  }\n  // Handle Socket.IO endpoint\n  else if (pathname === '/socket.io' || pathname.startsWith('/socket.io/')) {\n    handleSocketIORequest(req, res);\n  }\n  // Handle static files from uploads directory\n  else if (pathname.startsWith('/uploads/')) {\n    const filePath = path.join(__dirname, '..', pathname);\n\n    // Check if file exists\n    fs.access(filePath, fs.constants.F_OK, (err) => {\n      if (err) {\n        res.statusCode = 404;\n        res.end(JSON.stringify({ error: \"File not found\" }));\n        return;\n      }\n\n      // Determine content type\n      let contentType = 'application/octet-stream';\n      if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {\n        contentType = 'image/jpeg';\n      } else if (filePath.endsWith('.png')) {\n        contentType = 'image/png';\n      } else if (filePath.endsWith('.json')) {\n        contentType = 'application/json';\n      }\n\n      // Stream the file\n      res.setHeader('Content-Type', contentType);\n      fs.createReadStream(filePath).pipe(res);\n    });\n  }\n  // Add support for project images\n  else if (pathname.match(/^\\/api\\/projects\\/project-.*\\/images$/)) {\n    const projectId = pathname.split('/')[3]; // Extract project ID from URL\n\n    // Try to find project\n    let project = null;\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n      if (fs.existsSync(projectsPath)) {\n        const projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n        project = projects.find(p => p.id === projectId);\n      }\n    } catch (error) {\n      console.error('Error finding project for images:', error);\n    }\n\n    if (project) {\n      // Return sample images for the project\n      const sampleImages = Array.from({ length: project.image_count || 0 }).map((_, index) => ({\n        id: `image-${index + 1}-${projectId}`,\n        project_id: projectId,\n        name: `Image ${index + 1}`,\n        file_path: `/uploads/sample${index + 1}.jpg`,\n        thumbnail_path: `/uploads/sample${index + 1}_thumb.jpg`,\n        width: 800 + index * 100,\n        height: 600 + index * 50,\n        file_size: 120000 + index * 10000,\n        mime_type: \"image/jpeg\",\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        status: \"processed\"\n      }));\n\n      res.setHeader('Content-Type', 'application/json');\n      res.statusCode = 200;\n      res.end(JSON.stringify(sampleImages));\n    } else {\n      res.statusCode = 404;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({\n        error: \"Project not found\",\n        message: \"The requested project does not exist\"\n      }));\n    }\n  }\n  // Default 404 handler\n  else {\n    res.statusCode = 404;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({ error: \"Not found\" }));\n  }\n});\n\n// Create uploads directory if it doesn't exist\nconst UPLOADS_DIR = path.join(__dirname, '../uploads');\nif (!fs.existsSync(UPLOADS_DIR)) {\n  fs.mkdirSync(UPLOADS_DIR, { recursive: true });\n  console.log(`Created uploads directory: ${UPLOADS_DIR}`);\n}\n\n// Create mock-data directory if it doesn't exist\nconst MOCK_DATA_DIR = path.join(__dirname, 'mock-data');\nif (!fs.existsSync(MOCK_DATA_DIR)) {\n  fs.mkdirSync(MOCK_DATA_DIR, { recursive: true });\n  console.log(`Created mock-data directory: ${MOCK_DATA_DIR}`);\n  \n  // Create empty projects.json file if it doesn't exist\n  const PROJECTS_FILE = path.join(MOCK_DATA_DIR, 'projects.json');\n  if (!fs.existsSync(PROJECTS_FILE)) {\n    fs.writeFileSync(PROJECTS_FILE, JSON.stringify([]));\n    console.log(`Created empty projects.json file`);\n  }\n}\n\n// Add a simple Socket.IO mock implementation\n// We'll use HTTP long polling instead of WebSockets since we don't have ws installed\nconst socketSessions = new Map();\n\n// Generate a random session ID\nconst generateSessionId = () => {\n  return Math.random().toString(36).substring(2, 15) +\n         Math.random().toString(36).substring(2, 15);\n};\n\n// Handle Socket.IO HTTP requests\nconst handleSocketIORequest = (req, res) => {\n  // Parse URL to get the specific Socket.IO endpoint\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const pathname = url.pathname;\n  const query = Object.fromEntries(url.searchParams.entries());\n\n  // Handle different Socket.IO endpoints\n  if (pathname.includes('/socket.io/')) {\n    // Handle handshake request (first request in Socket.IO connection)\n    if (pathname === '/socket.io/' && req.method === 'GET') {\n      // Create a new session\n      const sid = generateSessionId();\n      const session = {\n        id: sid,\n        createdAt: Date.now(),\n        lastActivity: Date.now(),\n        messages: []\n      };\n\n      socketSessions.set(sid, session);\n\n      // Send a valid Socket.IO handshake response\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.statusCode = 200;\n\n      // Format: <length>:<packet type><data>\n      // 0 = open packet\n      const handshakeData = JSON.stringify({\n        sid: sid,\n        upgrades: [\"websocket\", \"polling\"],\n        pingInterval: 25000,\n        pingTimeout: 20000,\n        maxPayload: 1000000\n      });\n\n      const packet = `0${handshakeData}`;\n      const response = `${packet.length}:${packet}`;\n\n      console.log(`Socket.IO handshake: created session ${sid}`);\n      res.end(response);\n    }\n    // Handle polling requests (subsequent GET requests)\n    else if (pathname.includes('/socket.io/') && req.method === 'GET' && pathname.includes('/polling/')) {\n      // Extract session ID from URL\n      const sidMatch = pathname.match(/\\/socket\\.io\\/([^/]+)\\/polling\\//);\n      const sid = sidMatch ? sidMatch[1] : null;\n\n      if (sid && socketSessions.has(sid)) {\n        const session = socketSessions.get(sid);\n        session.lastActivity = Date.now();\n\n        // If there are messages to send, send them\n        if (session.messages.length > 0) {\n          const messages = session.messages;\n          session.messages = [];\n\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end(messages.join(''));\n        } else {\n          // No messages, send empty response\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end('');\n        }\n      } else {\n        // Invalid session\n        res.statusCode = 400;\n        res.end('Invalid session');\n      }\n    }\n    // Handle POST requests (client sending messages)\n    else if (req.method === 'POST') {\n      // Extract session ID from URL\n      const sidMatch = pathname.match(/\\/socket\\.io\\/([^/]+)\\/polling\\//);\n      const sid = sidMatch ? sidMatch[1] : null;\n\n      if (sid && socketSessions.has(sid)) {\n        const session = socketSessions.get(sid);\n        session.lastActivity = Date.now();\n\n        // Read request body\n        let body = '';\n        req.on('data', chunk => {\n          body += chunk.toString();\n        });\n\n        req.on('end', () => {\n          console.log(`Socket.IO message from client (${sid}):`, body);\n\n          // Acknowledge the message\n          res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n          res.statusCode = 200;\n          res.end('ok');\n        });\n      } else {\n        // Invalid session\n        res.statusCode = 400;\n        res.end('Invalid session');\n      }\n    }\n    else {\n      // Unknown Socket.IO request\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.statusCode = 400;\n      res.end('Invalid Socket.IO request');\n    }\n  } else {\n    // Default Socket.IO response\n    res.setHeader('Content-Type', 'application/json');\n    res.statusCode = 200;\n    res.end(JSON.stringify({\n      status: \"ok\",\n      message: \"Socket.IO endpoint mock - real-time updates not available in simple server mode\",\n      timestamp: new Date().toISOString()\n    }));\n  }\n};\n\n// Handle WebSocket upgrade requests\nserver.on('upgrade', (request, socket, head) => {\n  // We don't support WebSockets in this simple server\n  // Just close the connection, the client will fall back to polling\n  console.log('WebSocket upgrade request received, but not supported');\n  socket.write('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n  socket.destroy();\n});\n\n// Start server\nconst PORT = process.env.PORT || 5001;\nserver.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server started on http://0.0.0.0:${PORT}`);\n  console.log(`Environment: ${process.env.NODE_ENV || \"development\"}`);\n  console.log(`Socket.IO endpoint available at /socket.io (with WebSocket support)`);\n  \n  // Log available authentication endpoints for diagnostics\n  console.log(\"Available authentication endpoints:\");\n  console.log(\"- POST /api/auth/login (or /auth/login)\");\n  console.log(\"- POST /api/auth/register (or /auth/register)\");\n  console.log(\"- POST /api/auth/refresh (or /auth/refresh)\");\n  console.log(\"- POST /api/auth/logout (or /auth/logout)\");\n  console.log(\"- GET /api/users/me (or /users/me)\");\n});",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/simple-server-fixed.js",
        "start": 1,
        "end": 808,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 808,
          "column": 2,
          "position": 7346
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 1,
        "end": 808,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 808,
          "column": 2,
          "position": 7346
        }
      }
    },
    {
      "format": "javascript",
      "lines": 71,
      "fragment": "// Handle DELETE project\n  else if (pathname.match(/^\\/api\\/projects\\/project-/) && req.method === 'DELETE') {\n    const projectId = pathname.split('/').pop();\n    console.log(`Deleting project with ID: ${projectId}`);\n\n    try {\n      const fs = require('fs');\n      const path = require('path');\n      const projectsPath = path.join(__dirname, 'mock-data', 'projects.json');\n\n      if (fs.existsSync(projectsPath)) {\n        try {\n          let projects = JSON.parse(fs.readFileSync(projectsPath, 'utf8'));\n          const initialLength = projects.length;\n\n          // Find the project index\n          const projectIndex = projects.findIndex(p => p.id === projectId);\n\n          if (projectIndex !== -1) {\n            // Remove the project\n            projects.splice(projectIndex, 1);\n            fs.writeFileSync(projectsPath, JSON.stringify(projects, null, 2));\n            console.log(`Project ${projectId} deleted. Projects remaining: ${projects.length}`);\n\n            // Return 204 status code (success with no content) to match the real API\n            res.statusCode = 204;\n            res.end();\n          } else {\n            console.error(`Project ${projectId} not found for deletion`);\n            res.statusCode = 404;\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify({\n              error: \"Project not found\",\n              message: \"The requested project does not exist or has already been deleted\"\n            }));\n          }\n        } catch (parseError) {\n          console.error('Error parsing projects file for deletion:', parseError);\n          res.statusCode = 500;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({\n            error: \"Internal server error\",\n            message: \"Error reading project data\"\n          }));\n        }\n      } else {\n        // Create the directory if it doesn't exist\n        const mockDataDir = path.join(__dirname, 'mock-data');\n        if (!fs.existsSync(mockDataDir)) {\n          fs.mkdirSync(mockDataDir, { recursive: true });\n        }\n        // Create an empty projects file\n        fs.writeFileSync(projectsPath, JSON.stringify([]));\n\n        res.statusCode = 404;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({\n          error: \"Project not found\",\n          message: \"No projects data available\"\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting project:', error);\n      res.statusCode = 500;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({\n        error: \"Internal server error\",\n        message: error.message\n      }));\n    }\n  }",
      "tokens": 0,
      "firstFile": {
        "name": "packages/backend/src/delete-handler.js",
        "start": 1,
        "end": 71,
        "startLoc": {
          "line": 1,
          "column": 3,
          "position": 1
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 668
        }
      },
      "secondFile": {
        "name": "packages/backend/src/simple-server.js",
        "start": 445,
        "end": 515,
        "startLoc": {
          "line": 445,
          "column": 3,
          "position": 4013
        },
        "endLoc": {
          "line": 515,
          "column": 2,
          "position": 4680
        }
      }
    }
  ],
  "filename": "/Users/michalprusek/.npm/_npx/652ead47bf63fe99/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}